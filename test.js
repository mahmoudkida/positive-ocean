
// --------------------------------------
// 
//    _  _ _/ .  _  _/ /_ _  _  _        
//   /_|/_ / /|//_  / / //_ /_// /_/     
//   http://activetheory.net     _/      
// 
// --------------------------------------
//   2/27/17 12:52a
// --------------------------------------

window.Global = {};
window.getURL = function(url, target) {
    if (!target) {
        target = "_blank"
    }
    window.open(url, target)
};
if (typeof(console) === "undefined") {
    window.console = {};
    console.log = console.error = console.info = console.debug = console.warn = console.trace = function() {}
}
if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = (function() {
        return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
            window.setTimeout(callback, 1000 / 60)
        }
    })()
}
window.performance = (function() {
    if (window.performance && window.performance.now) {
        return window.performance
    } else {
        return Date
    }
})();
Date.now = Date.now || function() {
    return +new Date
};
window.Class = function(_class, _type) {
    var _this = this || window;
    var _string = _class.toString();
    var _name = _class.toString().match(/function ([^\(]+)/)[1];
    var _static = null;
    if (typeof _type === "function") {
        _static = _type;
        _type = null
    }
    _type = (_type || "").toLowerCase();
    _class.prototype.__call = function() {
        if (this.events) {
            this.events.scope(this)
        }
    };
    if (!_type) {
        _this[_name] = _class;
        _static && _static()
    } else {
        if (_type == "static") {
            _this[_name] = new _class()
        } else {
            if (_type == "singleton") {
                _this[_name] = (function() {
                    var __this = {};
                    var _instance;
                    __this.instance = function() {
                        if (!_instance) {
                            _instance = new _class()
                        }
                        return _instance
                    };
                    return __this
                })()
            }
        }
    }
    if (this !== window) {
        if (!this.__namespace) {
            this.__namespace = this.constructor.toString().match(/function ([^\(]+)/)[1]
        }
        this[_name]._namespace = this.__namespace
    }
};
window.Inherit = function(child, parent, param) {
    if (typeof param === "undefined") {
        param = child
    }
    var p = new parent(param, true);
    var save = {};
    for (var method in p) {
        child[method] = p[method];
        save[method] = p[method]
    }
    if (child.__call) {
        child.__call()
    }
    defer(function() {
        for (method in p) {
            if ((child[method] && save[method]) && child[method] !== save[method]) {
                child["_" + method] = save[method]
            }
        }
        p = save = null;
        child = parent = param = null
    })
};
window.Implement = function(cl, intr) {
    Render.nextFrame(function() {
        var intrface = new intr();
        for (var property in intrface) {
            if (typeof cl[property] === "undefined") {
                throw "Interface Error: Missing Property: " + property + " ::: " + intr
            } else {
                var type = typeof intrface[property];
                if (typeof cl[property] != type) {
                    throw "Interface Error: Property " + property + " is Incorrect Type ::: " + intr
                }
            }
        }
    })
};
window.Namespace = function(name) {
    if (typeof name === "string") {
        window[name] = {
            Class: window.Class
        }
    } else {
        name.Class = window.Class
    }
};
window.Interface = function(display) {
    var name = display.toString().match(/function ([^\(]+)/)[1];
    Hydra.INTERFACES[name] = display
};
window.THREAD = false;
Class(function HydraObject(_selector, _type, _exists, _useFragment) {
    this._children = new LinkedList();
    this.__useFragment = _useFragment;
    this._initSelector(_selector, _type, _exists)
}, function() {
    var prototype = HydraObject.prototype;
    prototype._initSelector = function(_selector, _type, _exists) {
        if (_selector && typeof _selector !== "string") {
            this.div = _selector
        } else {
            var first = _selector ? _selector.charAt(0) : null;
            var name = _selector ? _selector.slice(1) : null;
            if (first != "." && first != "#") {
                name = _selector;
                first = "."
            }
            if (!_exists) {
                this._type = _type || "div";
                if (this._type == "svg") {
                    this.div = document.createElementNS("http://www.w3.org/2000/svg", this._type);
                    this.div.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink")
                } else {
                    this.div = document.createElement(this._type);
                    if (first) {
                        if (first == "#") {
                            this.div.id = name
                        } else {
                            this.div.className = name
                        }
                    }
                }
            } else {
                if (first != "#") {
                    throw "Hydra Selectors Require #ID"
                }
                this.div = document.getElementById(name)
            }
        }
        this.div.hydraObject = this
    };
    prototype.addChild = prototype.add = function(child) {
        var div = this.div;
        var createFrag = function() {
            if (this.__useFragment) {
                if (!this._fragment) {
                    this._fragment = document.createDocumentFragment();
                    var _this = this;
                    defer(function() {
                        if (!_this._fragment || !_this.div) {
                            return _this._fragment = null
                        }
                        _this.div.appendChild(_this._fragment);
                        _this._fragment = null
                    })
                }
                div = this._fragment
            }
        };
        if (child.element && child.element instanceof HydraObject) {
            createFrag();
            div.appendChild(child.element.div);
            this._children.push(child.element);
            child.element._parent = this;
            child.element.div.parentNode = this.div
        } else {
            if (child.div) {
                createFrag();
                div.appendChild(child.div);
                this._children.push(child);
                child._parent = this;
                child.div.parentNode = this.div
            } else {
                if (child.nodeName) {
                    createFrag();
                    div.appendChild(child);
                    child.parentNode = this.div
                }
            }
        }
        return this
    };
    prototype.clone = function() {
        return $(this.div.cloneNode(true))
    };
    prototype.create = function(name, type) {
        var $obj = $(name, type);
        this.addChild($obj);
        if (this.__root) {
            this.__root.__append[name] = $obj;
            $obj.__root = this.__root
        }
        return $obj
    };
    prototype.empty = function() {
        var child = this._children.start();
        while (child) {
            if (child && child.remove) {
                child.remove()
            }
            child = this._children.next()
        }
        this.div.innerHTML = "";
        return this
    };
    prototype.parent = function() {
        return this._parent
    };
    prototype.children = function() {
        return this.div.children ? this.div.children : this.div.childNodes
    };
    prototype.append = function(callback, params) {
        if (!this.__root) {
            this.__root = this;
            this.__append = {}
        }
        return callback.apply(this, params)
    };
    prototype.removeChild = function(object, keep) {
        try {
            object.div.parentNode.removeChild(object.div)
        } catch (e) {}
        if (!keep) {
            this._children.remove(object)
        }
    };
    prototype.remove = prototype.destroy = function() {
        this.removed = true;
        var parent = this._parent;
        if (!!(parent && !parent.removed && parent.removeChild)) {
            parent.removeChild(this, true)
        }
        var child = this._children.start();
        while (child) {
            if (child && child.remove) {
                child.remove()
            }
            child = this._children.next()
        }
        this._children.destroy();
        this.div.hydraObject = null;
        Utils.nullObject(this)
    }
});
Class(function Hydra() {
    var _this = this;
    var _inter, _pool;
    var _readyCallbacks = [];
    this.READY = false;
    this.HASH = window.location.hash.slice(1);
    this.LOCAL = !window._BUILT_ && (location.hostname.indexOf("local") > -1 || location.hostname.split(".")[0] == "10" || location.hostname.split(".")[0] == "192");
    (function() {
        initLoad()
    })();

    function initLoad() {
        if (!document || !window) {
            return setTimeout(initLoad, 1)
        }
        if (window._NODE_) {
            _this.addEvent = "addEventListener";
            _this.removeEvent = "removeEventListener";
            return setTimeout(loaded, 1)
        }
        if (window.addEventListener) {
            _this.addEvent = "addEventListener";
            _this.removeEvent = "removeEventListener";
            window.addEventListener("load", loaded, false)
        } else {
            _this.addEvent = "attachEvent";
            _this.removeEvent = "detachEvent";
            window.attachEvent("onload", loaded)
        }
    }

    function loaded() {
        if (window.removeEventListener) {
            window.removeEventListener("load", loaded, false)
        }
        for (var i = 0; i < _readyCallbacks.length; i++) {
            _readyCallbacks[i]()
        }
        _readyCallbacks = null;
        _this.READY = true;
        if (window.Main) {
            Hydra.Main = new window.Main()
        }
    }
    this.development = function(flag, array) {
        var matchArray = function(prop) {
            if (!array) {
                return false
            }
            for (var i = 0; i < array.length; i++) {
                if (prop.strpos(array[i])) {
                    return true
                }
            }
            return false
        };
        clearInterval(_inter);
        if (flag) {
            _inter = setInterval(function() {
                for (var prop in window) {
                    if (prop.strpos("webkit")) {
                        continue
                    }
                    var obj = window[prop];
                    if (typeof obj !== "function" && prop.length > 2) {
                        if (prop.strpos("_ga") || prop.strpos("_typeface_js") || matchArray(prop)) {
                            continue
                        }
                        var char1 = prop.charAt(0);
                        var char2 = prop.charAt(1);
                        if (char1 == "_" || char1 == "$") {
                            if (char2 !== char2.toUpperCase()) {
                                console.log(window[prop]);
                                throw "Hydra Warning:: " + prop + " leaking into global scope"
                            }
                        }
                    }
                }
            }, 1000)
        }
    };
    this.getArguments = function(value) {
        var saved = this.arguments;
        var args = [];
        for (var i = 1; i < saved.length; i++) {
            if (saved[i] !== null) {
                args.push(saved[i])
            }
        }
        return args
    };
    this.getClassName = function(obj) {
        return obj.constructor.name || obj.constructor.toString().match(/function ([^\(]+)/)[1]
    };
    this.ready = function(callback) {
        if (this.READY) {
            return callback()
        }
        _readyCallbacks.push(callback)
    };
    this.$ = function(selector, type, exists) {
        return new HydraObject(selector, type, exists)
    };
    this.__triggerReady = function() {
        loaded()
    };
    this.INTERFACES = {};
    this.HTML = {};
    this.JSON = {};
    this.SVG = {};
    this.$.fn = HydraObject.prototype;
    window.$ = this.$;
    window.ready = this.ready
}, "Static");
Hydra.ready(function() {
    window.__window = $(window);
    window.__document = $(document);
    window.__body = $(document.getElementsByTagName("body")[0]);
    window.Stage = __body.create("#Stage");
    Stage.size("100%");
    Stage.__useFragment = true;
    Stage.width = document.body.clientWidth || document.documentElement.offsetWidth || window.innerWidth;
    Stage.height = document.body.clientHeight || document.documentElement.offsetHeight || window.innerHeight;
    (function() {
        var _time = Date.now();
        var _last;
        setTimeout(function() {
            var list = ["hidden", "msHidden", "webkitHidden"];
            var hidden, eventName;
            (function() {
                for (var key in list) {
                    if (document[list[key]] !== "undefined") {
                        hidden = list[key];
                        switch (hidden) {
                            case "hidden":
                                eventName = "visibilitychange";
                                break;
                            case "msHidden":
                                eventName = "msvisibilitychange";
                                break;
                            case "webkitHidden":
                                eventName = "webkitvisibilitychange";
                                break
                        }
                        return
                    }
                }
            })();
            if (typeof document[hidden] === "undefined") {
                if (Device.browser.ie) {
                    document.onfocus = onfocus;
                    document.onblur = onblur
                } else {
                    window.onfocus = onfocus;
                    window.onblur = onblur
                }
            } else {
                document.addEventListener(eventName, function() {
                    var time = Date.now();
                    if (time - _time > 10) {
                        if (document[hidden] === false) {
                            onfocus()
                        } else {
                            onblur()
                        }
                    }
                    _time = time
                })
            }
        }, 250);

        function onfocus() {
            if (_last != "focus") {
                HydraEvents._fireEvent(HydraEvents.BROWSER_FOCUS, {
                    type: "focus"
                })
            }
            _last = "focus"
        }

        function onblur() {
            if (_last != "blur") {
                HydraEvents._fireEvent(HydraEvents.BROWSER_FOCUS, {
                    type: "blur"
                })
            }
            _last = "blur"
        }
    })();
    window.onresize = function() {
        if (!Device.mobile) {
            Stage.width = document.body.clientWidth || document.documentElement.offsetWidth || window.innerWidth;
            Stage.height = document.body.clientHeight || document.documentElement.offsetHeight || window.innerHeight;
            HydraEvents._fireEvent(HydraEvents.RESIZE)
        }
    }
});
(function() {
    $.fn.text = function(text) {
        if (typeof text !== "undefined") {
            if (this.__cacheText != text) {
                this.div.textContent = text
            }
            this.__cacheText = text;
            return this
        } else {
            return this.div.textContent
        }
    };
    $.fn.html = function(text, force) {
        if (text && !text.strpos("<") && !force) {
            return this.text(text)
        }
        if (typeof text !== "undefined") {
            this.div.innerHTML = text;
            return this
        } else {
            return this.div.innerHTML
        }
    };
    $.fn.hide = function() {
        this.div.style.display = "none";
        return this
    };
    $.fn.show = function() {
        this.div.style.display = "";
        return this
    };
    $.fn.visible = function() {
        this.div.style.visibility = "visible";
        return this
    };
    $.fn.invisible = function() {
        this.div.style.visibility = "hidden";
        return this
    };
    $.fn.setZ = function(z) {
        this.div.style.zIndex = z;
        return this
    };
    $.fn.clearAlpha = function() {
        this.div.style.opacity = "";
        return this
    };
    $.fn.size = function(w, h, noScale) {
        if (typeof w === "string") {
            if (typeof h === "undefined") {
                h = "100%"
            } else {
                if (typeof h !== "string") {
                    h = h + "px"
                }
            }
            this.div.style.width = w;
            this.div.style.height = h
        } else {
            this.div.style.width = w + "px";
            this.div.style.height = h + "px";
            if (!noScale) {
                this.div.style.backgroundSize = w + "px " + h + "px"
            }
        }
        this.width = w;
        this.height = h;
        return this
    };
    $.fn.mouseEnabled = function(bool) {
        this.div.style.pointerEvents = bool ? "auto" : "none";
        return this
    };
    $.fn.fontStyle = function(family, size, color, style) {
        var font = {};
        if (family) {
            font.fontFamily = family
        }
        if (size) {
            font.fontSize = size
        }
        if (color) {
            font.color = color
        }
        if (style) {
            font.fontStyle = style
        }
        this.css(font);
        return this
    };
    $.fn.bg = function(src, x, y, repeat) {
        if (!src) {
            return this
        }
        if (src.strpos(".")) {
            src = Images.getPath(src)
        }
        if (!src.strpos(".")) {
            this.div.style.backgroundColor = src
        } else {
            this.div.style.backgroundImage = "url(" + src + ")"
        }
        if (typeof x !== "undefined") {
            x = typeof x == "number" ? x + "px" : x;
            y = typeof y == "number" ? y + "px" : y;
            this.div.style.backgroundPosition = x + " " + y
        }
        if (repeat) {
            this.div.style.backgroundSize = "";
            this.div.style.backgroundRepeat = repeat
        }
        if (x == "cover" || x == "contain") {
            this.div.style.backgroundSize = x;
            this.div.style.backgroundPosition = typeof y != "undefined" ? y + " " + repeat : "center"
        }
        return this
    };
    $.fn.center = function(x, y, noPos) {
        var css = {};
        if (typeof x === "undefined") {
            css.left = "50%";
            css.top = "50%";
            css.marginLeft = -this.width / 2;
            css.marginTop = -this.height / 2
        } else {
            if (x) {
                css.left = "50%";
                css.marginLeft = -this.width / 2
            }
            if (y) {
                css.top = "50%";
                css.marginTop = -this.height / 2
            }
        }
        if (noPos) {
            delete css.left;
            delete css.top
        }
        this.css(css);
        return this
    };
    $.fn.mask = function(arg, x, y, w, h) {
        this.div.style[CSS.prefix("Mask")] = (arg.strpos(".") ? "url(" + arg + ")" : arg) + " no-repeat";
        return this
    };
    $.fn.blendMode = function(mode, bg) {
        if (bg) {
            this.div.style["background-blend-mode"] = mode
        } else {
            this.div.style["mix-blend-mode"] = mode
        }
        return this
    };
    $.fn.css = function(obj, value) {
        if (typeof value == "boolean") {
            skip = value;
            value = null
        }
        if (typeof obj !== "object") {
            if (!value) {
                var style = this.div.style[obj];
                if (typeof style !== "number") {
                    if (style.strpos("px")) {
                        style = Number(style.slice(0, -2))
                    }
                    if (obj == "opacity") {
                        style = !isNaN(Number(this.div.style.opacity)) ? Number(this.div.style.opacity) : 1
                    }
                }
                if (!style) {
                    style = 0
                }
                return style
            } else {
                this.div.style[obj] = value;
                return this
            }
        }
        TweenManager.clearCSSTween(this);
        for (var type in obj) {
            var val = obj[type];
            if (!(typeof val === "string" || typeof val === "number")) {
                continue
            }
            if (typeof val !== "string" && type != "opacity" && type != "zIndex") {
                val += "px"
            }
            this.div.style[type] = val
        }
        return this
    };
    $.fn.transform = function(props) {
        if (this.multiTween && this.cssTweens && this._cssTweens.length > 1 && this.__transformTime && Render.TIME - this.__transformTime < 15) {
            return
        }
        this.__transformTime = Render.TIME;
        TweenManager.clearCSSTween(this);
        if (Device.tween.css2d) {
            if (!props) {
                props = this
            } else {
                for (var key in props) {
                    if (typeof props[key] === "number") {
                        this[key] = props[key]
                    }
                }
            }
            var transformString;
            if (!this._matrix) {
                transformString = TweenManager.parseTransform(props)
            } else {
                if (this._matrix.type == "matrix2") {
                    this._matrix.setTRS(this.x, this.y, this.rotation, this.scaleX || this.scale, this.scaleY || this.scale)
                } else {
                    this._matrix.setTRS(this.x, this.y, this.z, this.rotationX, this.rotationY, this.rotationZ, this.scaleX || this.scale, this.scaleY || this.scale, this.scaleZ || this.scale)
                }
                transformString = this._matrix.getCSS()
            }
            if (this.__transformCache != transformString) {
                this.div.style[Device.styles.vendorTransform] = transformString;
                this.__transformCache = transformString
            }
        }
        return this
    };
    $.fn.useMatrix3D = function() {
        this._matrix = new Matrix4();
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.rotationX = 0;
        this.rotationY = 0;
        this.rotationZ = 0;
        this.scale = 1;
        return this
    };
    $.fn.useMatrix2D = function() {
        this._matrix = new Matrix2();
        this.x = 0;
        this.y = 0;
        this.rotation = 0;
        this.scale = 1;
        return this
    };
    $.fn.willChange = function(props) {
        if (typeof props === "boolean") {
            if (props === true) {
                this._willChangeLock = true
            } else {
                this._willChangeLock = false
            }
        } else {
            if (this._willChangeLock) {
                return
            }
        }
        var string = typeof props === "string";
        if ((!this._willChange || string) && typeof props !== "null") {
            this._willChange = true;
            this.div.style["will-change"] = string ? props : Device.transformProperty + ", opacity"
        } else {
            this._willChange = false;
            this.div.style["will-change"] = ""
        }
    };
    $.fn.backfaceVisibility = function(visible) {
        if (visible) {
            this.div.style[CSS.prefix("BackfaceVisibility")] = "visible"
        } else {
            this.div.style[CSS.prefix("BackfaceVisibility")] = "hidden"
        }
    };
    $.fn.enable3D = function(perspective, x, y) {
        this.div.style[CSS.prefix("TransformStyle")] = "preserve-3d";
        if (perspective) {
            this.div.style[CSS.prefix("Perspective")] = perspective + "px"
        }
        if (typeof x !== "undefined") {
            x = typeof x === "number" ? x + "px" : x;
            y = typeof y === "number" ? y + "px" : y;
            this.div.style[CSS.prefix("PerspectiveOrigin")] = x + " " + y
        }
        return this
    };
    $.fn.disable3D = function() {
        this.div.style[CSS.prefix("TransformStyle")] = "";
        this.div.style[CSS.prefix("Perspective")] = "";
        return this
    };
    $.fn.transformPoint = function(x, y, z) {
        var origin = "";
        if (typeof x !== "undefined") {
            origin += (typeof x === "number" ? x + "px " : x + " ")
        }
        if (typeof y !== "undefined") {
            origin += (typeof y === "number" ? y + "px " : y + " ")
        }
        if (typeof z !== "undefined") {
            origin += (typeof z === "number" ? z + "px" : z)
        }
        this.div.style[CSS.prefix("TransformOrigin")] = origin;
        return this
    };
    $.fn.tween = function(props, time, ease, delay, callback, manual) {
        if (typeof delay === "boolean") {
            manual = delay;
            delay = 0;
            callback = null
        } else {
            if (typeof delay === "function") {
                callback = delay;
                delay = 0
            }
        }
        if (typeof callback === "boolean") {
            manual = callback;
            callback = null
        }
        if (!delay) {
            delay = 0
        }
        return TweenManager._detectTween(this, props, time, ease, delay, callback, manual)
    };
    $.fn.clearTransform = function() {
        if (typeof this.x === "number") {
            this.x = 0
        }
        if (typeof this.y === "number") {
            this.y = 0
        }
        if (typeof this.z === "number") {
            this.z = 0
        }
        if (typeof this.scale === "number") {
            this.scale = 1
        }
        if (typeof this.scaleX === "number") {
            this.scaleX = 1
        }
        if (typeof this.scaleY === "number") {
            this.scaleY = 1
        }
        if (typeof this.rotation === "number") {
            this.rotation = 0
        }
        if (typeof this.rotationX === "number") {
            this.rotationX = 0
        }
        if (typeof this.rotationY === "number") {
            this.rotationY = 0
        }
        if (typeof this.rotationZ === "number") {
            this.rotationZ = 0
        }
        if (typeof this.skewX === "number") {
            this.skewX = 0
        }
        if (typeof this.skewY === "number") {
            this.skewY = 0
        }
        this.div.style[Device.styles.vendorTransform] = "";
        return this
    };
    $.fn.stopTween = function() {
        if (this._cssTween) {
            this._cssTween.stop()
        }
        if (this._mathTween) {
            this._mathTween.stop()
        }
        return this
    };
    $.fn.keypress = function(callback) {
        this.div.onkeypress = function(e) {
            e = e || window.event;
            e.code = e.keyCode ? e.keyCode : e.charCode;
            if (callback) {
                callback(e)
            }
        }
    };
    $.fn.keydown = function(callback) {
        this.div.onkeydown = function(e) {
            e = e || window.event;
            e.code = e.keyCode;
            if (callback) {
                callback(e)
            }
        }
    };
    $.fn.keyup = function(callback) {
        this.div.onkeyup = function(e) {
            e = e || window.event;
            e.code = e.keyCode;
            if (callback) {
                callback(e)
            }
        }
    };
    $.fn.attr = function(attr, value) {
        if (attr && value) {
            if (value == "") {
                this.div.removeAttribute(attr)
            } else {
                this.div.setAttribute(attr, value)
            }
        } else {
            if (attr) {
                return this.div.getAttribute(attr)
            }
        }
        return this
    };
    $.fn.val = function(value) {
        if (typeof value === "undefined") {
            return this.div.value
        } else {
            this.div.value = value
        }
        return this
    };
    $.fn.change = function(callback) {
        var _this = this;
        if (this._type == "select") {
            this.div.onchange = function() {
                callback({
                    object: _this,
                    value: _this.div.value || ""
                })
            }
        }
    };
    $.fn.svgSymbol = function(id, width, height) {
        var config = SVG.getSymbolConfig(id);
        var svgHTML = '<svg viewBox="0 0 ' + config.width + " " + config.height + '" width="' + width + '" height="' + height + '"><use xlink:href="#' + config.id + '" x="0" y="0" /></svg>';
        this.html(svgHTML, true)
    }
})();
(function() {
    var windowsPointer = !!window.MSGesture;
    var translateEvent = function(evt) {
        if (Hydra.addEvent == "attachEvent") {
            switch (evt) {
                case "click":
                    return "onclick";
                    break;
                case "mouseover":
                    return "onmouseover";
                    break;
                case "mouseout":
                    return "onmouseleave";
                    break;
                case "mousedown":
                    return "onmousedown";
                    break;
                case "mouseup":
                    return "onmouseup";
                    break;
                case "mousemove":
                    return "onmousemove";
                    break
            }
        }
        if (windowsPointer) {
            switch (evt) {
                case "touchstart":
                    return "pointerdown";
                    break;
                case "touchmove":
                    return "MSGestureChange";
                    break;
                case "touchend":
                    return "pointerup";
                    break
            }
        }
        return evt
    };
    $.fn.click = function(callback) {
        var _this = this;

        function click(e) {
            if (!_this.div) {
                return false
            }
            if (Mouse._preventClicks) {
                return false
            }
            e.object = _this.div.className == "hit" ? _this.parent() : _this;
            e.action = "click";
            if (!e.pageX) {
                e.pageX = e.clientX;
                e.pageY = e.clientY
            }
            if (callback) {
                callback(e)
            }
            if (Mouse.autoPreventClicks) {
                Mouse.preventClicks()
            }
        }
        this.div[Hydra.addEvent](translateEvent("click"), click, true);
        this.div.style.cursor = "pointer";
        return this
    };
    $.fn.hover = function(callback) {
        var _this = this;
        var _over = false;
        var _time;

        function hover(e) {
            if (!_this.div) {
                return false
            }
            var time = Date.now();
            var original = e.toElement || e.relatedTarget;
            if (_time && (time - _time) < 5) {
                _time = time;
                return false
            }
            _time = time;
            e.object = _this.div.className == "hit" ? _this.parent() : _this;
            switch (e.type) {
                case "mouseout":
                    e.action = "out";
                    break;
                case "mouseleave":
                    e.action = "out";
                    break;
                default:
                    e.action = "over";
                    break
            }
            if (_over) {
                if (Mouse._preventClicks) {
                    return false
                }
                if (e.action == "over") {
                    return false
                }
                if (e.action == "out") {
                    if (isAChild(_this.div, original)) {
                        return false
                    }
                }
                _over = false
            } else {
                if (e.action == "out") {
                    return false
                }
                _over = true
            }
            if (!e.pageX) {
                e.pageX = e.clientX;
                e.pageY = e.clientY
            }
            if (callback) {
                callback(e)
            }
        }

        function isAChild(div, object) {
            var len = div.children.length - 1;
            for (var i = len; i > -1; i--) {
                if (object == div.children[i]) {
                    return true
                }
            }
            for (i = len; i > -1; i--) {
                if (isAChild(div.children[i], object)) {
                    return true
                }
            }
        }
        this.div[Hydra.addEvent](translateEvent("mouseover"), hover, true);
        this.div[Hydra.addEvent](translateEvent("mouseout"), hover, true);
        return this
    };
    $.fn.press = function(callback) {
        var _this = this;

        function press(e) {
            if (!_this.div) {
                return false
            }
            e.object = _this.div.className == "hit" ? _this.parent() : _this;
            switch (e.type) {
                case "mousedown":
                    e.action = "down";
                    break;
                default:
                    e.action = "up";
                    break
            }
            if (!e.pageX) {
                e.pageX = e.clientX;
                e.pageY = e.clientY
            }
            if (callback) {
                callback(e)
            }
        }
        this.div[Hydra.addEvent](translateEvent("mousedown"), press, true);
        this.div[Hydra.addEvent](translateEvent("mouseup"), press, true);
        return this
    };
    $.fn.bind = function(evt, callback) {
        if (!this._events) {
            this._events = {}
        }
        if (windowsPointer && this == __window) {
            return Stage.bind(evt, callback)
        }
        if (evt == "touchstart") {
            if (!Device.mobile) {
                evt = "mousedown"
            }
        } else {
            if (evt == "touchmove") {
                if (!Device.mobile) {
                    evt = "mousemove"
                }
                if (windowsPointer && !this.div.msGesture) {
                    this.div.msGesture = new MSGesture();
                    this.div.msGesture.target = this.div
                }
            } else {
                if (evt == "touchend") {
                    if (!Device.mobile) {
                        evt = "mouseup"
                    }
                }
            }
        }
        this._events["bind_" + evt] = this._events["bind_" + evt] || [];
        var _events = this._events["bind_" + evt];
        var e = {};
        var target = this.div;
        e.callback = callback;
        e.target = this.div;
        _events.push(e);

        function touchEvent(e) {
            if (windowsPointer && target.msGesture && evt == "touchstart") {
                target.msGesture.addPointer(e.pointerId)
            }
            var touch = Utils.touchEvent(e);
            if (windowsPointer) {
                var windowsEvt = e;
                e = {};
                e.x = Number(windowsEvt.pageX || windowsEvt.clientX);
                e.y = Number(windowsEvt.pageY || windowsEvt.clientY);
                e.target = windowsEvt.target;
                e.currentTarget = windowsEvt.currentTarget;
                e.path = [];
                var node = e.target;
                while (node) {
                    e.path.push(node);
                    node = node.parentElement || null
                }
                e.windowsPointer = true
            } else {
                e.x = touch.x;
                e.y = touch.y
            }
            for (var i = 0; i < _events.length; i++) {
                var ev = _events[i];
                if (ev.target == e.currentTarget) {
                    ev.callback(e)
                }
            }
        }
        if (!this._events["fn_" + evt]) {
            this._events["fn_" + evt] = touchEvent;
            this.div[Hydra.addEvent](translateEvent(evt), touchEvent, true)
        }
        return this
    };
    $.fn.unbind = function(evt, callback) {
        if (!this._events) {
            this._events = {}
        }
        if (windowsPointer && this == __window) {
            return Stage.unbind(evt, callback)
        }
        if (evt == "touchstart") {
            if (!Device.mobile) {
                evt = "mousedown"
            }
        } else {
            if (evt == "touchmove") {
                if (!Device.mobile) {
                    evt = "mousemove"
                }
            } else {
                if (evt == "touchend") {
                    if (!Device.mobile) {
                        evt = "mouseup"
                    }
                }
            }
        }
        var _events = this._events["bind_" + evt];
        if (!_events) {
            return this
        }
        for (var i = 0; i < _events.length; i++) {
            var ev = _events[i];
            if (ev.callback == callback) {
                _events.splice(i, 1)
            }
        }
        if (this._events["fn_" + evt] && !_events.length) {
            this.div[Hydra.removeEvent](translateEvent(evt), this._events["fn_" + evt], true);
            this._events["fn_" + evt] = null
        }
        return this
    };
    $.fn.interact = function(overCallback, clickCallback) {
        if (!this.hit) {
            this.hit = $(".hit");
            this.hit.css({
                width: "100%",
                height: "100%",
                zIndex: 99999,
                top: 0,
                left: 0,
                position: "absolute"
            });
            this.addChild(this.hit)
        }
        if (!Device.mobile) {
            this.hit.hover(overCallback).click(clickCallback)
        } else {
            this.hit.touchClick(overCallback, clickCallback)
        }
    };
    $.fn.touchSwipe = function(callback, distance) {
        if (!window.addEventListener) {
            return this
        }
        var _this = this;
        var _distance = distance || 75;
        var _startX, _startY;
        var _moving = false;
        var _move = {};
        if (Device.mobile) {
            this.div.addEventListener(translateEvent("touchstart"), touchStart);
            this.div.addEventListener(translateEvent("touchend"), touchEnd);
            this.div.addEventListener(translateEvent("touchcancel"), touchEnd)
        }

        function touchStart(e) {
            var touch = Utils.touchEvent(e);
            if (!_this.div) {
                return false
            }
            if (e.touches.length == 1) {
                _startX = touch.x;
                _startY = touch.y;
                _moving = true;
                _this.div.addEventListener(translateEvent("touchmove"), touchMove)
            }
        }

        function touchMove(e) {
            if (!_this.div) {
                return false
            }
            if (_moving) {
                var touch = Utils.touchEvent(e);
                var dx = _startX - touch.x;
                var dy = _startY - touch.y;
                _move.direction = null;
                _move.moving = null;
                _move.x = null;
                _move.y = null;
                _move.evt = e;
                if (Math.abs(dx) >= _distance) {
                    touchEnd();
                    if (dx > 0) {
                        _move.direction = "left"
                    } else {
                        _move.direction = "right"
                    }
                } else {
                    if (Math.abs(dy) >= _distance) {
                        touchEnd();
                        if (dy > 0) {
                            _move.direction = "up"
                        } else {
                            _move.direction = "down"
                        }
                    } else {
                        _move.moving = true;
                        _move.x = dx;
                        _move.y = dy
                    }
                }
                if (callback) {
                    callback(_move, e)
                }
            }
        }

        function touchEnd(e) {
            if (!_this.div) {
                return false
            }
            _startX = _startY = _moving = false;
            _this.div.removeEventListener(translateEvent("touchmove"), touchMove)
        }
        return this
    };
    $.fn.touchClick = function(hover, click) {
        if (!window.addEventListener) {
            return this
        }
        var _this = this;
        var _time, _move;
        var _start = {};
        var _touch = {};
        if (Device.mobile) {
            this.div.addEventListener(translateEvent("touchmove"), touchMove, false);
            this.div.addEventListener(translateEvent("touchstart"), touchStart, false);
            this.div.addEventListener(translateEvent("touchend"), touchEnd, false)
        }

        function touchMove(e) {
            if (!_this.div) {
                return false
            }
            _touch = Utils.touchEvent(e);
            if (Utils.findDistance(_start, _touch) > 5) {
                _move = true
            } else {
                _move = false
            }
        }

        function setTouch(e) {
            var touch = Utils.touchEvent(e);
            e.touchX = touch.x;
            e.touchY = touch.y;
            _start.x = e.touchX;
            _start.y = e.touchY
        }

        function touchStart(e) {
            if (!_this.div) {
                return false
            }
            _time = Date.now();
            e.action = "over";
            e.object = _this.div.className == "hit" ? _this.parent() : _this;
            setTouch(e);
            if (hover && !_move) {
                hover(e)
            }
        }

        function touchEnd(e) {
            if (!_this.div) {
                return false
            }
            var time = Date.now();
            var clicked = false;
            e.object = _this.div.className == "hit" ? _this.parent() : _this;
            setTouch(e);
            if (_time && time - _time < 750) {
                if (Mouse._preventClicks) {
                    return false
                }
                if (click && !_move) {
                    clicked = true;
                    e.action = "click";
                    if (click && !_move) {
                        click(e)
                    }
                    if (Mouse.autoPreventClicks) {
                        Mouse.preventClicks()
                    }
                }
            }
            if (hover) {
                e.action = "out";
                if (!Mouse._preventFire) {
                    hover(e)
                }
            }
            _move = false
        }
        return this
    }
})();
Class(function MVC() {
    Inherit(this, Events);
    var _setters = {};
    var _active = {};
    var _timers = [];
    this.classes = {};

    function defineSetter(_this, prop) {
        _setters[prop] = {};
        Object.defineProperty(_this, prop, {
            set: function(v) {
                if (_setters[prop] && _setters[prop].s) {
                    _setters[prop].s.call(_this, v)
                }
                v = null
            },
            get: function() {
                if (_setters[prop] && _setters[prop].g) {
                    return _setters[prop].g.apply(_this)
                }
            }
        })
    }
    this.set = function(prop, callback) {
        if (!_setters[prop]) {
            defineSetter(this, prop)
        }
        _setters[prop].s = callback
    };
    this.get = function(prop, callback) {
        if (!_setters[prop]) {
            defineSetter(this, prop)
        }
        _setters[prop].g = callback
    };
    this.delayedCall = function(callback, time, params) {
        var _this = this;
        var timer = Timer.create(function() {
            if (_this.destroy) {
                callback(params)
            }
            _this = callback = null
        }, time || 0);
        _timers.push(timer);
        if (_timers.length > 20) {
            _timers.shift()
        }
        return timer
    };
    this.initClass = function(clss, a, b, c, d, e, f, g) {
        var name = Utils.timestamp();
        if (window.Hydra) {
            Hydra.arguments = arguments
        }
        var child = new clss(a, b, c, d, e, f, g);
        if (window.Hydra) {
            Hydra.arguments = null
        }
        child.parent = this;
        if (child.destroy) {
            this.classes[name] = child;
            this.classes[name].__id = name
        }
        var lastArg = arguments[arguments.length - 1];
        if (Array.isArray(lastArg) && lastArg.length == 1 && lastArg[0] instanceof HydraObject) {
            lastArg[0].addChild(child)
        } else {
            if (this.element && lastArg !== null) {
                this.element.addChild(child)
            }
        }
        return child
    };
    this.destroy = function() {
        if (this.onDestroy) {
            this.onDestroy()
        }
        for (var i in this.classes) {
            var clss = this.classes[i];
            if (clss && clss.destroy) {
                clss.destroy()
            }
        }
        this.clearTimers && this.clearTimers();
        this.classes = null;
        if (this.events) {
            this.events = this.events.destroy()
        }
        if (this.element && this.element.remove) {
            this.element = this.container = this.element.remove()
        }
        if (this.parent && this.parent.__destroyChild) {
            this.parent.__destroyChild(this.__id)
        }
        return Utils.nullObject(this)
    };
    this.clearTimers = function() {
        for (i = 0; i < _timers.length; i++) {
            clearTimeout(_timers[i])
        }
        _timers.length = 0
    };
    this.active = function(name, value, time) {
        if (typeof value !== "undefined") {
            _active[name] = value;
            if (time) {
                this.delayedCall(function() {
                    _active[name] = !_active[name]
                }, time)
            }
        } else {
            return _active[name]
        }
    };
    this.__destroyChild = function(name) {
        delete this.classes[name]
    }
});
Class(function Model(name) {
    Inherit(this, MVC);
    var _storage = {};
    var _data = 0;
    var _triggered = 0;
    var _callbacks;
    this.push = function(name, val) {
        _storage[name] = val
    };
    this.pull = function(name) {
        return _storage[name]
    };
    this.registerData = function() {
        _data++
    };
    this.triggerData = function() {
        _triggered++;
        if (_triggered == _data) {
            _callbacks && _callbacks.forEach(function(c) {
                c()
            });
            _callbacks = null
        }
    };
    this.onReady = function(callback) {
        if (_callbacks === null) {
            return callback()
        }
        if (!_callbacks) {
            _callbacks = []
        }
        _callbacks.push(callback)
    };
    this.initWithData = function(data) {
        this.STATIC_DATA = data;
        for (var key in this) {
            var model = this[key];
            var init = false;
            for (var i in data) {
                if (i.toLowerCase().replace(/-/g, "") == key.toLowerCase()) {
                    init = true;
                    if (model.init) {
                        model.init(data[i])
                    }
                }
            }
            if (!init && model.init) {
                model.init()
            }
        }
    };
    this.loadData = function(url, callback) {
        var _this = this;
        XHR.get(url + "?" + Utils.timestamp(), function(d) {
            defer(function() {
                _this.initWithData(d);
                callback(d)
            })
        })
    };
    this.Class = function(model) {
        var name = model.toString().match(/function ([^\(]+)/)[1];
        this[name] = new model()
    }
});
Class(function View(_child) {
    Inherit(this, MVC);
    var _resize;
    var name = Hydra.getClassName(_child);
    this.element = $("." + name);
    this.element.__useFragment = true;
    this.css = function(obj) {
        this.element.css(obj);
        return this
    };
    this.transform = function(obj) {
        this.element.transform(obj || this);
        return this
    };
    this.tween = function(props, time, ease, delay, callback, manual) {
        return this.element.tween(props, time, ease, delay, callback, manual)
    };
    var inter = Hydra.INTERFACES[name] || Hydra.INTERFACES[name + "UI"];
    if (inter) {
        this.ui = {};
        var params = Hydra.getArguments();
        params.push(_child);
        _resize = this.element.append(inter, params);
        var append = this.element.__append;
        for (var key in append) {
            this.ui[key] = append[key]
        }
        if (_resize) {
            this.resize = function() {
                _resize.apply(this.ui, arguments)
            }
        }
    }
    this.__call = function() {
        this.events.scope(this)
    }
});
Class(function Controller(name) {
    Inherit(this, MVC);
    name = Hydra.getClassName(name);
    this.element = this.container = $("#" + name);
    this.element.__useFragment = true;
    this.css = function(obj) {
        this.container.css(obj)
    }
});
Class(function Component() {
    Inherit(this, MVC);
    this.__call = function() {
        this.events.scope(this);
        delete this.__call
    }
});
Class(function Utils() {
    var _this = this;
    if (typeof Float32Array == "undefined") {
        Float32Array = Array
    }

    function rand(min, max) {
        return lerp(Math.random(), min, max)
    }

    function lerp(ratio, start, end) {
        return start + (end - start) * ratio
    }
    this.doRandom = function(min, max) {
        return Math.round(rand(min - 0.5, max + 0.5))
    };
    this.headsTails = function(heads, tails) {
        return !_this.doRandom(0, 1) ? heads : tails
    };
    this.toDegrees = function(rad) {
        return rad * (180 / Math.PI)
    };
    this.toRadians = function(deg) {
        return deg * (Math.PI / 180)
    };
    this.findDistance = function(p1, p2) {
        var dx = p2.x - p1.x;
        var dy = p2.y - p1.y;
        return Math.sqrt(dx * dx + dy * dy)
    };
    this.timestamp = function() {
        var num = Date.now() + _this.doRandom(0, 99999);
        return num.toString()
    };
    this.hitTestObject = function(obj1, obj2) {
        var x1 = obj1.x,
            y1 = obj1.y,
            w = obj1.width,
            h = obj1.height;
        var xp1 = obj2.x,
            yp1 = obj2.y,
            wp = obj2.width,
            hp = obj2.height;
        var x2 = x1 + w,
            y2 = y1 + h,
            xp2 = xp1 + wp,
            yp2 = yp1 + hp;
        if (xp1 >= x1 && xp1 <= x2) {
            if (yp1 >= y1 && yp1 <= y2) {
                return true
            } else {
                if (y1 >= yp1 && y1 <= yp2) {
                    return true
                }
            }
        } else {
            if (x1 >= xp1 && x1 <= xp2) {
                if (yp1 >= y1 && yp1 <= y2) {
                    return true
                } else {
                    if (y1 >= yp1 && y1 <= yp2) {
                        return true
                    }
                }
            }
        }
        return false
    };
    this.randomColor = function() {
        var color = "#" + Math.floor(Math.random() * 16777215).toString(16);
        if (color.length < 7) {
            color = this.randomColor()
        }
        return color
    };
    this.touchEvent = function(e) {
        var touchEvent = {};
        touchEvent.x = 0;
        touchEvent.y = 0;
        if (e.windowsPointer) {
            return e
        }
        if (!e) {
            return touchEvent
        }
        if (Device.mobile && (e.touches || e.changedTouches)) {
            if (e.touches.length) {
                touchEvent.x = e.touches[0].pageX;
                touchEvent.y = e.touches[0].pageY - Mobile.scrollTop
            } else {
                touchEvent.x = e.changedTouches[0].pageX;
                touchEvent.y = e.changedTouches[0].pageY - Mobile.scrollTop
            }
        } else {
            touchEvent.x = e.pageX;
            touchEvent.y = e.pageY
        }
        if (Mobile.orientationSet && Mobile.orientation !== Mobile.orientationSet) {
            if (window.orientation == 90 || window.orientation === 0) {
                var x = touchEvent.y;
                touchEvent.y = touchEvent.x;
                touchEvent.x = Stage.width - x
            }
            if (window.orientation == -90 || window.orientation === 180) {
                var y = touchEvent.x;
                touchEvent.x = touchEvent.y;
                touchEvent.y = Stage.height - y
            }
        }
        return touchEvent
    };
    this.clamp = function(num, min, max) {
        return Math.min(Math.max(num, min), max)
    };
    this.constrain = function(num, min, max) {
        return Math.min(Math.max(num, Math.min(min, max)), Math.max(min, max))
    };
    this.nullObject = function(object) {
        if (object.destroy || object.div) {
            for (var key in object) {
                if (typeof object[key] !== "undefined") {
                    object[key] = null
                }
            }
        }
        return null
    };
    this.convertRange = this.range = function(oldValue, oldMin, oldMax, newMin, newMax, clamped) {
        var oldRange = (oldMax - oldMin);
        var newRange = (newMax - newMin);
        var newValue = (((oldValue - oldMin) * newRange) / oldRange) + newMin;
        if (clamped) {
            return _this.clamp(newValue, Math.min(newMin, newMax), Math.max(newMin, newMax))
        }
        return newValue
    };
    this.cloneObject = function(obj) {
        return JSON.parse(JSON.stringify(obj))
    };
    this.mergeObject = function() {
        var obj = {};
        for (var i = 0; i < arguments.length; i++) {
            var o = arguments[i];
            for (var key in o) {
                obj[key] = o[key]
            }
        }
        return obj
    };
    this.numberWithCommas = function(num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
    };
    this.query = function(key) {
        return decodeURI(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURI(key).replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"))
    };
    String.prototype.strpos = function(str) {
        if (Array.isArray(str)) {
            for (var i = 0; i < str.length; i++) {
                if (this.indexOf(str[i]) > -1) {
                    return true
                }
            }
            return false
        } else {
            return this.indexOf(str) != -1
        }
    };
    String.prototype.clip = function(num, end) {
        return this.length > num ? this.slice(0, num) + end : this
    };
    String.prototype.capitalize = function() {
        return this.charAt(0).toUpperCase() + this.slice(1)
    };
    Array.prototype.findAndRemove = function(reference) {
        if (!this.indexOf) {
            return
        }
        var index = this.indexOf(reference);
        if (index > -1) {
            return this.splice(index, 1)
        }
    }
}, "Static");
Class(function CSS() {
    var _this = this;
    var _obj, _style, _needsUpdate;
    Hydra.ready(function() {
        _style = "";
        _obj = document.createElement("style");
        _obj.type = "text/css";
        document.getElementsByTagName("head")[0].appendChild(_obj)
    });

    function objToCSS(key) {
        var match = key.match(/[A-Z]/);
        var camelIndex = match ? match.index : null;
        if (camelIndex) {
            var start = key.slice(0, camelIndex);
            var end = key.slice(camelIndex);
            key = start + "-" + end.toLowerCase()
        }
        return key
    }

    function cssToObj(key) {
        var match = key.match(/\-/);
        var camelIndex = match ? match.index : null;
        if (camelIndex) {
            var start = key.slice(0, camelIndex);
            var end = key.slice(camelIndex).slice(1);
            var letter = end.charAt(0);
            end = end.slice(1);
            end = letter.toUpperCase() + end;
            key = start + end
        }
        return key
    }

    function setHTML() {
        _obj.innerHTML = _style;
        _needsUpdate = false
    }
    this._read = function() {
        return _style
    };
    this._write = function(css) {
        _style = css;
        if (!_needsUpdate) {
            _needsUpdate = true;
            Render.nextFrame(setHTML)
        }
    };
    this._toCSS = objToCSS;
    this.style = function(selector, obj) {
        var s = selector + " {";
        for (var key in obj) {
            var prop = objToCSS(key);
            var val = obj[key];
            if (typeof val !== "string" && key != "opacity") {
                val += "px"
            }
            s += prop + ":" + val + "!important;"
        }
        s += "}";
        _obj.innerHTML += s
    };
    this.get = function(selector, prop) {
        var values = new Object();
        var string = _obj.innerHTML.split(selector + " {");
        for (var i = 0; i < string.length; i++) {
            var str = string[i];
            if (!str.length) {
                continue
            }
            var split = str.split("!important;");
            for (var j in split) {
                if (split[j].strpos(":")) {
                    var fsplit = split[j].split(":");
                    if (fsplit[1].slice(-2) == "px") {
                        fsplit[1] = Number(fsplit[1].slice(0, -2))
                    }
                    values[cssToObj(fsplit[0])] = fsplit[1]
                }
            }
        }
        if (!prop) {
            return values
        } else {
            return values[prop]
        }
    };
    this.textSize = function($obj) {
        var $clone = $obj.clone();
        $clone.css({
            position: "relative",
            cssFloat: "left",
            styleFloat: "left",
            marginTop: -99999,
            width: "",
            height: ""
        });
        __body.addChild($clone);
        var width = $clone.div.offsetWidth;
        var height = $clone.div.offsetHeight;
        $clone.remove();
        return {
            width: width,
            height: height
        }
    };
    this.prefix = function(style) {
        return Device.styles.vendor == "" ? style.charAt(0).toLowerCase() + style.slice(1) : Device.styles.vendor + style
    }
}, "Static");
Class(function Device() {
    var _this = this;
    var _tagDiv;
    this.agent = navigator.userAgent.toLowerCase();
    this.detect = function(array) {
        if (typeof array === "string") {
            array = [array]
        }
        for (var i = 0; i < array.length; i++) {
            if (this.agent.strpos(array[i])) {
                return true
            }
        }
        return false
    };
    var prefix = (function() {
        var pre = "";
        if (!window._NODE_) {
            var styles = window.getComputedStyle(document.documentElement, "");
            pre = (Array.prototype.slice.call(styles).join("").match(/-(moz|webkit|ms)-/) || (styles.OLink === "" && ["", "o"]))[1];
            var dom = ("WebKit|Moz|MS|O").match(new RegExp("(" + pre + ")", "i"))[1]
        } else {
            pre = "webkit"
        }
        var IE = _this.detect("trident");
        return {
            unprefixed: IE && !_this.detect("msie 9"),
            dom: dom,
            lowercase: pre,
            css: "-" + pre + "-",
            js: (IE ? pre[0] : pre[0].toUpperCase()) + pre.substr(1)
        }
    })();

    function checkForTag(prop) {
        var div = _tagDiv || document.createElement("div"),
            vendors = "Khtml ms O Moz Webkit".split(" "),
            len = vendors.length;
        _tagDiv = div;
        if (prop in div.style) {
            return true
        }
        prop = prop.replace(/^[a-z]/, function(val) {
            return val.toUpperCase()
        });
        while (len--) {
            if (vendors[len] + prop in div.style) {
                return true
            }
        }
        return false
    }
    this.mobile = !window._NODE_ && (!!(("ontouchstart" in window) || ("onpointerdown" in window)) && this.detect(["ios", "iphone", "ipad", "windows", "android", "blackberry"])) ? {} : false;
    if (this.mobile && this.detect("windows") && !this.detect("touch")) {
        this.mobile = false
    }
    if (this.mobile) {
        this.mobile.tablet = Math.max(screen.width, screen.height) > 800;
        this.mobile.phone = !this.mobile.tablet
    }
    this.browser = {};
    this.browser.ie = (function() {
        if (_this.detect("msie")) {
            return true
        }
        if (_this.detect("trident") && _this.detect("rv:")) {
            return true
        }
        if (_this.detect("windows") && _this.detect("edge")) {
            return true
        }
    })();
    this.browser.chrome = !this.browser.ie && this.detect("chrome");
    this.browser.safari = !this.browser.chrome && !this.browser.ie && this.detect("safari");
    this.browser.firefox = this.detect("firefox");
    this.browser.version = (function() {
        try {
            if (_this.browser.chrome) {
                return Number(_this.agent.split("chrome/")[1].split(".")[0])
            }
            if (_this.browser.firefox) {
                return Number(_this.agent.split("firefox/")[1].split(".")[0])
            }
            if (_this.browser.safari) {
                return Number(_this.agent.split("version/")[1].split(".")[0].charAt(0))
            }
            if (_this.browser.ie) {
                if (_this.detect("msie")) {
                    return Number(_this.agent.split("msie ")[1].split(".")[0])
                }
                if (_this.detect("rv:")) {
                    return Number(_this.agent.split("rv:")[1].split(".")[0])
                }
                return Number(_this.agent.split("edge/")[1].split(".")[0])
            }
        } catch (e) {
            return -1
        }
    })();
    this.vendor = prefix.css;
    this.transformProperty = (function() {
        switch (prefix.lowercase) {
            case "moz":
                return "-moz-transform";
                break;
            case "webkit":
                return "-webkit-transform";
                break;
            case "o":
                return "-o-transform";
                break;
            case "ms":
                return "-ms-transform";
                break;
            default:
                return "transform";
                break
        }
    })();
    this.system = {};
    this.system.retina = window.devicePixelRatio > 1;
    this.system.webworker = typeof window.Worker !== "undefined";
    this.system.offline = typeof window.applicationCache !== "undefined";
    if (!window._NODE_) {
        this.system.geolocation = typeof navigator.geolocation !== "undefined";
        this.system.pushstate = typeof window.history.pushState !== "undefined"
    }
    this.system.webcam = !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
    this.system.language = window.navigator.userLanguage || window.navigator.language;
    this.system.webaudio = typeof window.AudioContext !== "undefined";
    try {
        this.system.localStorage = typeof window.localStorage !== "undefined"
    } catch (e) {
        this.system.localStorage = false
    }
    this.system.fullscreen = typeof document[prefix.lowercase + "CancelFullScreen"] !== "undefined";
    this.system.os = (function() {
        if (_this.detect("mac os")) {
            return "mac"
        } else {
            if (_this.detect("windows nt 6.3")) {
                return "windows8.1"
            } else {
                if (_this.detect("windows nt 6.2")) {
                    return "windows8"
                } else {
                    if (_this.detect("windows nt 6.1")) {
                        return "windows7"
                    } else {
                        if (_this.detect("windows nt 6.0")) {
                            return "windowsvista"
                        } else {
                            if (_this.detect("windows nt 5.1")) {
                                return "windowsxp"
                            } else {
                                if (_this.detect("windows")) {
                                    return "windows"
                                } else {
                                    if (_this.detect("linux")) {
                                        return "linux"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return "undetected"
    })();
    this.pixelRatio = window.devicePixelRatio;
    this.media = {};
    this.media.audio = (function() {
        if (!!document.createElement("audio").canPlayType) {
            return _this.detect(["firefox", "opera"]) ? "ogg" : "mp3"
        } else {
            return false
        }
    })();
    this.media.video = (function() {
        var vid = document.createElement("video");
        if (!!vid.canPlayType) {
            if (Device.mobile) {
                return "mp4"
            }
            if (_this.browser.chrome) {
                return "webm"
            }
            if (_this.browser.firefox || _this.browser.opera) {
                if (vid.canPlayType('video/webm; codecs="vorbis,vp8"')) {
                    return "webm"
                }
                return "ogv"
            }
            return "mp4"
        } else {
            return false
        }
    })();
    this.graphics = {};
    this.graphics.webgl = (function() {
        try {
            var gl;
            var names = ["webgl", "experimental-webgl", "webkit-3d", "moz-webgl"];
            var canvas = document.createElement("canvas");
            for (var i = 0; i < names.length; i++) {
                gl = canvas.getContext(names[i]);
                if (gl) {
                    break
                }
            }
            var info = gl.getExtension("WEBGL_debug_renderer_info");
            var output = {};
            if (info) {
                var gpu = info.UNMASKED_RENDERER_WEBGL;
                output.gpu = gl.getParameter(gpu).toLowerCase()
            }
            output.renderer = gl.getParameter(gl.RENDERER).toLowerCase();
            output.version = gl.getParameter(gl.VERSION).toLowerCase();
            output.glsl = gl.getParameter(gl.SHADING_LANGUAGE_VERSION).toLowerCase();
            output.extensions = gl.getSupportedExtensions();
            output.detect = function(matches) {
                if (output.gpu && output.gpu.toLowerCase().strpos(matches)) {
                    return true
                }
                if (output.version && output.version.toLowerCase().strpos(matches)) {
                    return true
                }
                for (var i = 0; i < output.extensions.length; i++) {
                    if (output.extensions[i].strpos(matches)) {
                        return true
                    }
                }
                return false
            };
            return output
        } catch (e) {
            return false
        }
    })();
    this.graphics.canvas = (function() {
        var canvas = document.createElement("canvas");
        return canvas.getContext ? true : false
    })();
    this.styles = {};
    this.styles.filter = checkForTag("filter");
    this.styles.blendMode = checkForTag("mix-blend-mode");
    this.styles.vendor = prefix.unprefixed ? "" : prefix.js;
    this.styles.vendorTransition = this.styles.vendor.length ? this.styles.vendor + "Transition" : "transition";
    this.styles.vendorTransform = this.styles.vendor.length ? this.styles.vendor + "Transform" : "transform";
    this.tween = {};
    this.tween.transition = checkForTag("transition");
    this.tween.css2d = checkForTag("transform");
    this.tween.css3d = checkForTag("perspective");
    this.tween.complete = (function() {
        if (prefix.unprefixed) {
            return "transitionend"
        }
        return prefix.lowercase + "TransitionEnd"
    })();
    this.test = function(name, test) {
        this[name] = test()
    };
    this.detectGPU = function(matches) {
        var gpu = _this.graphics.webgl;
        if (gpu.gpu && gpu.gpu.strpos(matches)) {
            return true
        }
        if (gpu.version && gpu.version.strpos(matches)) {
            return true
        }
        return false
    };

    function checkFullscreen() {
        if (!_this.getFullscreen()) {
            HydraEvents._fireEvent(HydraEvents.FULLSCREEN, {
                fullscreen: false
            });
            Render.stop(checkFullscreen)
        }
    }
    this.openFullscreen = function(obj) {
        obj = obj || __body;
        if (obj && _this.system.fullscreen) {
            if (obj == __body) {
                obj.css({
                    top: 0
                })
            }
            obj.div[prefix.lowercase + "RequestFullScreen"]();
            HydraEvents._fireEvent(HydraEvents.FULLSCREEN, {
                fullscreen: true
            });
            Render.start(checkFullscreen, 10)
        }
    };
    this.closeFullscreen = function() {
        if (_this.system.fullscreen) {
            document[prefix.lowercase + "CancelFullScreen"]()
        }
        Render.stop(checkFullscreen)
    };
    this.getFullscreen = function() {
        if (_this.browser.firefox) {
            return document.mozFullScreen
        }
        return document[prefix.lowercase + "IsFullScreen"]
    }
}, "Static");
Class(function DynamicObject(_properties) {
    var prototype = DynamicObject.prototype;
    if (_properties) {
        for (var key in _properties) {
            this[key] = _properties[key]
        }
    }
    this._tweens = {};
    if (typeof prototype.tween !== "undefined") {
        return
    }
    prototype.tween = function(properties, time, ease, delay, update, complete) {
        if (typeof delay !== "number") {
            complete = update;
            update = delay;
            delay = 0
        }
        if (!this.multiTween) {
            this.stopTween()
        }
        if (typeof complete !== "function") {
            complete = null
        }
        if (typeof update !== "function") {
            update = null
        }
        this._tween = TweenManager.tween(this, properties, time, ease, delay, complete, update);
        return this._tween
    };
    prototype.stopTween = function(tween) {
        var _tween = tween || this._tween;
        if (_tween && _tween.stop) {
            _tween.stop()
        }
    };
    prototype.pause = function() {
        var _tween = this._tween;
        if (_tween && _tween.pause) {
            _tween.pause()
        }
    };
    prototype.resume = function() {
        var _tween = this._tween;
        if (_tween && _tween.resume) {
            _tween.resume()
        }
    };
    prototype.copy = function(pool) {
        var c = pool && pool.get ? pool.get() : new DynamicObject();
        for (var key in this) {
            if (typeof this[key] === "number") {
                c[key] = this[key]
            }
        }
        return c
    };
    prototype.copyFrom = function(obj) {
        for (var key in obj) {
            if (typeof obj[key] == "number") {
                this[key] = obj[key]
            }
        }
    };
    prototype.copyTo = function(obj) {
        for (var key in obj) {
            if (typeof this[key] == "number") {
                obj[key] = this[key]
            }
        }
    };
    prototype.clear = function() {
        for (var key in this) {
            if (typeof this[key] !== "function") {
                delete this[key]
            }
        }
        return this
    }
});
Class(function ObjectPool(_type, _number) {
    Inherit(this, Component);
    var _this = this;
    var _pool = [];
    (function() {
        if (_type) {
            _number = _number || 10;
            _type = _type || Object;
            for (var i = 0; i < _number; i++) {
                _pool.push(new _type())
            }
        }
    })();
    this.get = function() {
        return _pool.shift()
    };
    this.empty = function() {
        _pool.length = 0
    };
    this.put = function(obj) {
        if (obj) {
            _pool.push(obj)
        }
    };
    this.insert = function(array) {
        if (typeof array.push === "undefined") {
            array = [array]
        }
        for (var i = 0; i < array.length; i++) {
            _pool.push(array[i])
        }
    };
    this.onDestroy = function() {
        for (var i = 0; i < _pool.length; i++) {
            if (_pool[i].destroy) {
                _pool[i].destroy()
            }
        }
        _pool = null
    }
});
Class(function LinkedList() {
    var prototype = LinkedList.prototype;
    this.length = 0;
    this.first = null;
    this.last = null;
    this.current = null;
    this.prev = null;
    if (typeof prototype.push !== "undefined") {
        return
    }
    prototype.push = function(obj) {
        if (!this.first) {
            this.first = obj;
            this.last = obj;
            obj.__prev = obj;
            obj.__next = obj
        } else {
            obj.__next = this.first;
            obj.__prev = this.last;
            this.last.__next = obj;
            this.last = obj
        }
        this.length++
    };
    prototype.remove = function(obj) {
        if (!obj || !obj.__next) {
            return
        }
        if (this.length <= 1) {
            this.empty()
        } else {
            if (obj == this.first) {
                this.first = obj.__next;
                this.last.__next = this.first;
                this.first.__prev = this.last
            } else {
                if (obj == this.last) {
                    this.last = obj.__prev;
                    this.last.__next = this.first;
                    this.first.__prev = this.last
                } else {
                    obj.__prev.__next = obj.__next;
                    obj.__next.__prev = obj.__prev
                }
            }
            this.length--
        }
        obj.__prev = null;
        obj.__next = null
    };
    prototype.empty = function() {
        this.first = null;
        this.last = null;
        this.current = null;
        this.prev = null;
        this.length = 0
    };
    prototype.start = function() {
        this.current = this.first;
        this.prev = this.current;
        return this.current
    };
    prototype.next = function() {
        if (!this.current) {
            return
        }
        this.current = this.current.__next;
        if (this.length == 1 || this.prev.__next == this.first) {
            return
        }
        this.prev = this.current;
        return this.current
    };
    prototype.destroy = function() {
        Utils.nullObject(this);
        return null
    }
});
Class(function Pact() {
    var _this = this;
    Namespace(this);
    (function() {})();
    this.create = function() {
        return new _this.Broadcaster(arguments)
    };
    this.batch = function() {
        return new _this.Batch()
    }
}, "Static");
Pact.Class(function Broadcaster(_arguments) {
    var _this = this;
    var _success, _error, _destroy;
    var _fired;
    var _callbacks = [];
    this.id = Utils.timestamp();
    this._fire = this.fire = function() {
        if (_fired) {
            return
        }
        _fired = true;
        var args = arguments;
        var fired = false;
        Render.nextFrame(function() {
            if (_destroy) {
                return
            }
            if (_error || _success) {
                var arg0 = args[0];
                var arg1 = args[1];
                if (arg0 instanceof Error) {
                    if (_error) {
                        _error.apply(_this, [arg0])
                    }
                    fired = true
                } else {
                    if (arg1 instanceof Error) {
                        if (_error) {
                            _error.apply(_this, [arg1])
                        }
                        fired = true
                    } else {
                        if (!arg0 && arg1 && _success) {
                            _success.apply(_this, [arg1]);
                            fired = true
                        }
                        if (!arg1 && arg0 && _success) {
                            _success.apply(_this, [arg0]);
                            fired = true
                        }
                    }
                }
            }
            if (!fired && _callbacks.length) {
                var callback = _callbacks.shift();
                if (_callbacks.length) {
                    var argList = [];
                    for (var i = 0; i < args.length; i++) {
                        argList.push(args[i])
                    }
                    args = argList;
                    args.push(_callbacks[0])
                }
                callback.apply(_this, args);
                if (_callbacks.length) {
                    _fired = false
                }
            }
        })
    };
    this.exec = function() {
        if (_destroy) {
            return
        }
        exec(arguments);
        return this
    };
    this.then = function(callback) {
        _callbacks.push(callback);
        return this
    };
    this.error = function(error) {
        _error = error;
        return this
    };
    this.success = function(success) {
        _success = success;
        return this
    };
    this.destroy = function() {
        _destroy = true
    };

    function exec(argz) {
        if (_destroy) {
            return
        }
        var args = [];
        var fn = argz[0];
        for (var i = 1; i < argz.length; i++) {
            args.push(argz[i])
        }
        args.push(_this._fire);
        fn.apply(fn, args)
    }
    if (_arguments.length) {
        exec(_arguments)
    }
});
Pact.Class(function Batch() {
    Inherit(this, Events);
    var _this = this;
    var _count = 0;
    var _complete = [];
    var _success = [];
    var _error = [];
    var _emitters = [];
    this.push = function(emitter) {
        emitter.then(thenHandler).error(errorHandler).success(successHandler);
        _emitters.push(emitter)
    };
    this.timeout = function() {
        _this.events.fire(HydraEvents.COMPLETE, {
            complete: _complete,
            success: _success,
            error: _error
        })
    };

    function successHandler() {
        this.data = arguments;
        _success.push(this);
        checkComplete();
        _this.events.fire(HydraEvents.UPDATE)
    }

    function errorHandler() {
        this.data = arguments;
        _error.push(this);
        checkComplete();
        _this.events.fire(HydraEvents.UPDATE)
    }

    function thenHandler() {
        this.data = arguments;
        _complete.push(this);
        checkComplete();
        _this.events.fire(HydraEvents.UPDATE)
    }

    function checkComplete() {
        _count++;
        if (_count == _emitters.length) {
            _this.events.fire(HydraEvents.COMPLETE, {
                complete: _complete,
                success: _success,
                error: _error
            })
        }
    }
});
Class(function Mouse() {
    var _this = this;
    var _capturing;
    this.x = 0;
    this.y = 0;
    this.lastX = 0;
    this.lastY = 0;
    this.moveX = 0;
    this.moveY = 0;
    this.autoPreventClicks = false;

    function moved(e) {
        _this.lastX = _this.x;
        _this.lastY = _this.y;
        _this.ready = true;
        if (e.windowsPointer) {
            _this.x = e.x;
            _this.y = e.y
        } else {
            var convert = Utils.touchEvent(e);
            _this.x = convert.x;
            _this.y = convert.y
        }
        _this.moveX = _this.x - _this.lastX;
        _this.moveY = _this.y - _this.lastY;
        defer(resetMove)
    }
    this.capture = function(x, y) {
        if (_capturing) {
            return false
        }
        _capturing = true;
        _this.x = x || 0;
        _this.y = y || 0;
        if (!Device.mobile) {
            __window.bind("mousemove", moved)
        } else {
            __window.bind("touchmove", moved);
            __window.bind("touchstart", moved)
        }
    };
    this.stop = function() {
        if (!_capturing) {
            return false
        }
        _capturing = false;
        _this.x = 0;
        _this.y = 0;
        if (!Device.mobile) {
            __window.unbind("mousemove", moved)
        } else {
            __window.unbind("touchmove", moved);
            __window.unbind("touchstart", moved)
        }
    };
    this.preventClicks = function() {
        _this._preventClicks = true;
        Timer.create(function() {
            _this._preventClicks = false
        }, 300)
    };
    this.preventFireAfterClick = function() {
        _this._preventFire = true
    };

    function resetMove() {
        _this.moveX = 0;
        _this.moveY = 0
    }
}, "Static");
Class(function Render() {
    var _this = this;
    var _timer, _last, _timerName;
    var _render = [];
    var _time = Date.now();
    var _list0 = new LinkedList();
    var _list1 = new LinkedList();
    var _list = _list0;
    var _timeSinceRender = 0;
    this.TIME = Date.now();
    this.TARGET_FPS = 60;
    (function() {
        if (!THREAD) {
            requestAnimationFrame(render);
            Hydra.ready(addListeners)
        }
    })();

    function render() {
        if (_list.length) {
            fireCallbacks()
        }
        var t = Date.now();
        var timeSinceLoad = t - _time;
        var diff = 0;
        var fps = 60;
        if (_last) {
            diff = t - _last;
            fps = 1000 / diff
        }
        _last = t;
        _this.FPS = fps;
        _this.TIME = t;
        _this.DELTA = diff;
        _this.TSL = timeSinceLoad;
        for (var i = _render.length - 1; i > -1; i--) {
            var callback = _render[i];
            if (!callback) {
                continue
            }
            if (callback.fps) {
                _timeSinceRender += diff > 200 ? 0 : diff;
                if (_timeSinceRender < (1000 / callback.fps)) {
                    continue
                }
                _timeSinceRender -= (1000 / callback.fps)
            }
            callback(t, timeSinceLoad, diff, fps, callback.frameCount++)
        }
        if (!THREAD) {
            requestAnimationFrame(render)
        }
    }

    function fireCallbacks() {
        var list = _list;
        _list = _list == _list0 ? _list1 : _list0;
        var callback = list.start();
        while (callback) {
            var last = callback;
            callback();
            callback = list.next();
            last.__prev = last.__next = last = null
        }
        list.empty()
    }

    function addListeners() {
        HydraEvents._addEvent(HydraEvents.BROWSER_FOCUS, focus, _this)
    }

    function focus(e) {
        if (e.type == "focus") {
            _last = Date.now()
        }
    }
    this.startRender = this.start = function(callback, fps) {
        var allowed = true;
        var count = _render.length - 1;
        if (this.TARGET_FPS < 60) {
            fps = this.TARGET_FPS
        }
        if (typeof fps == "number") {
            callback.fps = fps
        }
        callback.frameCount = 0;
        if (_render.indexOf(callback) == -1) {
            _render.push(callback)
        }
    };
    this.stopRender = this.stop = function(callback) {
        var i = _render.indexOf(callback);
        if (i > -1) {
            _render.splice(i, 1)
        }
    };
    this.startTimer = function(name) {
        _timerName = name || "Timer";
        if (console.time && !window._NODE_) {
            console.time(_timerName)
        } else {
            _timer = Date.now()
        }
    };
    this.stopTimer = function() {
        if (console.time && !window._NODE_) {
            console.timeEnd(_timerName)
        } else {
            console.log("Render " + _timerName + ": " + (Date.now() - _timer))
        }
    };
    this.nextFrame = function(callback) {
        _list.push(callback)
    };
    this.setupTween = function(callback) {
        _this.nextFrame(function() {
            _this.nextFrame(callback)
        })
    };
    this.tick = function() {
        render()
    };
    this.onIdle = function(callback, max) {
        if (window.requestIdleCallback && false) {
            if (max) {
                max = {
                    timeout: max
                }
            }
            return window.requestIdleCallback(callback, max)
        } else {
            var start = _this.TIME;
            return defer(function() {
                callback({
                    didTimeout: false,
                    timeRemaining: function() {
                        return Math.max(0, 50 - (_this.TIME - start))
                    }
                })
            })
        }
    };
    window.defer = this.nextFrame;
    window.nextFrame = this.setupTween;
    window.onIdle = this.onIdle
}, "Static");
Class(function HydraEvents() {
    var _events = [];
    var _e = {};
    this.BROWSER_FOCUS = "hydra_focus";
    this.HASH_UPDATE = "hydra_hash_update";
    this.COMPLETE = "hydra_complete";
    this.PROGRESS = "hydra_progress";
    this.UPDATE = "hydra_update";
    this.LOADED = "hydra_loaded";
    this.END = "hydra_end";
    this.FAIL = "hydra_fail";
    this.SELECT = "hydra_select";
    this.ERROR = "hydra_error";
    this.READY = "hydra_ready";
    this.RESIZE = "hydra_resize";
    this.CLICK = "hydra_click";
    this.HOVER = "hydra_hover";
    this.MESSAGE = "hydra_message";
    this.ORIENTATION = "orientation";
    this.BACKGROUND = "background";
    this.BACK = "hydra_back";
    this.PREVIOUS = "hydra_previous";
    this.NEXT = "hydra_next";
    this.RELOAD = "hydra_reload";
    this.FULLSCREEN = "hydra_fullscreen";
    this._checkDefinition = function(evt) {
        if (typeof evt == "undefined") {
            throw "Undefined event"
        }
    };
    this._addEvent = function(e, callback, object) {
        if (this._checkDefinition) {
            this._checkDefinition(e)
        }
        var add = new Object();
        add.evt = e;
        add.object = object;
        add.callback = callback;
        _events.push(add)
    };
    this._removeEvent = function(eventString, callback) {
        if (this._checkDefinition) {
            this._checkDefinition(eventString)
        }
        defer(function() {
            for (var i = _events.length - 1; i > -1; i--) {
                if (_events[i].evt == eventString && _events[i].callback == callback) {
                    _events[i] = null;
                    _events.splice(i, 1)
                }
            }
        })
    };
    this._destroyEvents = function(object) {
        for (var i = _events.length - 1; i > -1; i--) {
            if (_events[i].object == object) {
                _events[i] = null;
                _events.splice(i, 1)
            }
        }
    };
    this._fireEvent = function(eventString, obj) {
        if (this._checkDefinition) {
            this._checkDefinition(eventString)
        }
        var fire = true;
        obj = obj || _e;
        obj.cancel = function() {
            fire = false
        };
        for (var i = 0; i < _events.length; i++) {
            if (_events[i].evt == eventString) {
                if (fire) {
                    _events[i].callback(obj)
                } else {
                    return false
                }
            }
        }
    };
    this._consoleEvents = function() {
        console.log(_events)
    };
    this.createLocalEmitter = function(child) {
        var events = new HydraEvents();
        child.on = events._addEvent;
        child.off = events._removeEvent;
        child.fire = events._fireEvent
    }
}, "Static");
Class(function Events(_this) {
    this.events = {};
    var _events = {};
    var _e = {};
    this.events.subscribe = function(evt, callback) {
        HydraEvents._addEvent(evt, !!callback._fire ? callback._fire : callback, _this);
        return callback
    };
    this.events.unsubscribe = function(evt, callback) {
        HydraEvents._removeEvent(evt, !!callback._fire ? callback._fire : callback)
    };
    this.events.fire = function(evt, obj, skip) {
        obj = obj || _e;
        HydraEvents._checkDefinition(evt);
        if (_events[evt]) {
            obj.target = obj.target || _this;
            _events[evt](obj);
            obj.target = null
        } else {
            if (!skip) {
                HydraEvents._fireEvent(evt, obj)
            }
        }
    };
    this.events.add = function(evt, callback) {
        HydraEvents._checkDefinition(evt);
        _events[evt] = !!callback._fire ? callback._fire : callback;
        return callback
    };
    this.events.remove = function(evt) {
        HydraEvents._checkDefinition(evt);
        if (_events[evt]) {
            delete _events[evt]
        }
    };
    this.events.bubble = function(object, evt) {
        HydraEvents._checkDefinition(evt);
        var _this = this;
        object.events.add(evt, function(e) {
            _this.fire(evt, e)
        })
    };
    this.events.scope = function(ref) {
        _this = ref
    };
    this.events.destroy = function() {
        HydraEvents._destroyEvents(_this);
        _events = null;
        _this = null;
        return null
    }
});
Class(function Dispatch() {
    var _this = this;
    var _callbacks = {};

    function empty() {}
    this.register = function(object, method) {
        defer(function() {
            _callbacks[Hydra.getClassName(object) + "-" + method] = object[method]
        })
    };
    this.find = function(object, method, args) {
        var path = object.toString().match(/function ([^\(]+)/)[1] + "-" + method;
        if (_callbacks[path]) {
            return _callbacks[path]
        } else {
            delete _callbacks[path];
            return empty
        }
    }
}, "static");
Class(function Mobile() {
    Inherit(this, Component);
    var _this = this;
    var _lastTime;
    var _cancelScroll = true;
    var _scrollTarget = {};
    var _hideNav, _iMax, _iFull, _iLock, _iLast, _orientationPrevent, _type;
    this.sleepTime = 10000;
    this.scrollTop = 0;
    this.autoResizeReload = true;
    Mobile.ScreenLock;
    if (Device.mobile) {
        for (var b in Device.browser) {
            Device.browser[b] = false
        }
        setInterval(checkTime, 250);
        this.phone = Device.mobile.phone;
        this.tablet = Device.mobile.tablet;
        this.orientation = window.innerWidth > window.innerHeight ? "landscape" : "portrait";
        this.os = (function() {
            if (Device.detect("windows", "iemobile")) {
                return "Windows"
            }
            if (Device.detect(["ipad", "iphone"])) {
                return "iOS"
            }
            if (Device.detect(["android", "kindle"])) {
                return "Android"
            }
            if (Device.detect("blackberry")) {
                return "Blackberry"
            }
            return "Unknown"
        })();
        this.version = (function() {
            try {
                if (_this.os == "iOS") {
                    var num = Device.agent.split("os ")[1].split("_");
                    var main = num[0];
                    var sub = num[1].split(" ")[0];
                    return Number(main + "." + sub)
                }
                if (_this.os == "Android") {
                    var version = Device.agent.split("android ")[1].split(";")[0];
                    if (version.length > 3) {
                        version = version.slice(0, -2)
                    }
                    if (version.charAt(version.length - 1) == ".") {
                        version = version.slice(0, -1)
                    }
                    return Number(version)
                }
                if (_this.os == "Windows") {
                    if (Device.agent.strpos("rv:11")) {
                        return 11
                    }
                    return Number(Device.agent.split("windows phone ")[1].split(";")[0])
                }
            } catch (e) {}
            return -1
        })();
        this.browser = (function() {
            if (_this.os == "iOS") {
                if (Device.detect(["twitter", "fbios"])) {
                    return "Social"
                }
                if (Device.detect("crios")) {
                    return "Chrome"
                }
                if (Device.detect("safari")) {
                    return "Safari"
                }
                return "Unknown"
            }
            if (_this.os == "Android") {
                if (Device.detect(["twitter", "fb", "facebook"])) {
                    return "Social"
                }
                if (Device.detect("chrome")) {
                    return "Chrome"
                }
                if (Device.detect("firefox")) {
                    return "Firefox"
                }
                return "Browser"
            }
            if (_this.os == "Windows") {
                return "IE"
            }
            return "Unknown"
        })();
        Hydra.ready(function() {
            window.addEventListener("orientationchange", orientationChange);
            window.onresize = resizeHandler;
            if (_this.browser == "Safari" && (!_this.NativeCore || !_this.NativeCore.active)) {
                document.body.scrollTop = 0;
                __body.css({
                    height: "101%"
                })
            }
            setHeight();
            _this.orientation = Stage.width > Stage.height ? "landscape" : "portrait";
            if (!(_this.NativeCore && _this.NativeCore.active)) {
                window.addEventListener("touchstart", touchStart)
            } else {
                Stage.css({
                    overflow: "hidden"
                })
            }
            determineType();
            _type = _this.phone ? "phone" : "tablet"
        });

        function determineType() {
            Device.mobile.tablet = (function() {
                if (Stage.width > Stage.height) {
                    return document.body.clientWidth > 800
                } else {
                    return document.body.clientHeight > 800
                }
            })();
            Device.mobile.phone = !Device.mobile.tablet;
            _this.phone = Device.mobile.phone;
            _this.tablet = Device.mobile.tablet
        }

        function setHeight() {
            Stage.width = document.body.clientWidth;
            Stage.height = document.body.clientHeight;
            if (_this.browser == "Social" && _this.os == "iOS") {
                Stage.width = window.innerWidth;
                Stage.height = window.innerHeight
            }
        }

        function resizeHandler() {
            clearTimeout(_this.fireResize);
            if (!_this.allowScroll) {
                document.body.scrollTop = 0
            }
            _this.fireResize = _this.delayedCall(function() {
                setHeight();
                determineType();
                var type = _this.phone ? "phone" : "tablet";
                if (_this.os == "iOS" && type != _type && _this.autoResizeReload) {
                    window.location.reload()
                }
                _this.orientation = window.innerWidth > window.innerHeight ? "landscape" : "portrait";
                _this.events.fire(HydraEvents.RESIZE)
            }, 32)
        }

        function orientationChange() {
            _this.events.fire(HydraEvents.ORIENTATION);
            if (_this.tablet && _this.browser == "Chrome" && _iMax) {
                _iMax = document.body.clientHeight
            }
            if (_this.phone && _iMax) {
                _iMax = Stage.height;
                if (_this.orientation == "portrait" && _this.browser == "Safari") {
                    _iFull = false;
                    document.body.scrollTop = 0;
                    checkHeight(true);
                    _orientationPrevent = true;
                    _this.delayedCall(function() {
                        _orientationPrevent = false
                    }, 100)
                }
            }
        }

        function touchStart(e) {
            if (_this.disableScrollManagemenet) {
                return
            }
            var touch = Utils.touchEvent(e);
            var target = e.target;
            var inputElement = target.nodeName == "INPUT" || target.nodeName == "TEXTAREA" || target.nodeName == "SELECT" || target.nodeName == "A";
            if (_this.allowScroll || inputElement) {
                return
            }
            if (_iMax) {
                if (!_iFull) {
                    return
                }
                if (_this.browser == "Chrome" && touch.y < 50) {
                    e.stopPropagation();
                    return
                }
            }
            if (_cancelScroll) {
                return e.preventDefault()
            }
            var prevent = true;
            target = e.target;
            while (target.parentNode) {
                if (target._scrollParent) {
                    prevent = false;
                    _scrollTarget.target = target;
                    _scrollTarget.y = touch.y;
                    target.hydraObject.__preventY = touch.y
                }
                target = target.parentNode
            }
            if (prevent) {
                e.preventDefault()
            }
        }
    }

    function checkTime() {
        var time = Date.now();
        if (_lastTime) {
            if (time - _lastTime > _this.sleepTime) {
                _this.events.fire(HydraEvents.BACKGROUND)
            }
        }
        _lastTime = time
    }

    function initIOSFullscreen() {
        _hideNav = true;
        _cancelScroll = false;
        _iMax = Stage.height;
        __body.css({
            height: Stage.height * 3
        });
        Stage.css({
            position: "fixed"
        });
        __window.bind("scroll", scrollHandler);
        setInterval(checkHeight, 1000)
    }

    function scrollHandler(e) {
        if (_orientationPrevent) {
            return
        }
        Stage.width = document.body.clientWidth;
        Stage.height = document.body.clientHeight;
        _this.scrollTop = document.body.scrollTop;
        if (Stage.height != _iLast) {
            _this.events.fire(HydraEvents.RESIZE)
        }
        _iLast = Stage.height;
        if (_this.scrollTop > 20) {
            if (!_iFull) {
                _this.events.fire(HydraEvents.FULLSCREEN, {
                    fullscreen: true
                })
            }
            _iFull = true;
            clearTimeout(_this.changeHeight);
            _this.changeHeight = _this.delayedCall(function() {
                _iMax = Stage.height
            }, 100)
        }
        checkHeight()
    }

    function checkHeight(force) {
        if ((document.body.clientHeight < _iMax && _iFull) || force) {
            Stage.height = document.body.clientHeight;
            _iFull = false;
            _iMax = Stage.height;
            document.body.scrollTop = 0;
            resizeHandler();
            _this.events.fire(HydraEvents.FULLSCREEN, {
                fullscreen: false
            })
        }
    }
    this.Class = window.Class;
    this.fullscreen = function() {
        if (_this.NativeCore && _this.NativeCore.active) {
            return
        }
        if (_this.os == "Android") {
            __window.bind("touchend", function() {
                Device.openFullscreen()
            });
            if (_this.orientationSet) {
                _this.events.fire(HydraEvents.RESIZE)
            }
            return true
        } else {
            if (_this.os == "iOS" && _this.version >= 7) {
                if (_this.browser == "Chrome" || _this.browser == "Safari") {
                    initIOSFullscreen();
                    return true
                }
            }
        }
        return false
    };
    this.overflowScroll = function($object, dir) {
        if (!Device.mobile) {
            return false
        }
        var x = !!dir.x;
        var y = !!dir.y;
        var overflow = {
            "-webkit-overflow-scrolling": "touch"
        };
        if ((!x && !y) || (x && y)) {
            overflow.overflow = "scroll"
        }
        if (!x && y) {
            overflow.overflowY = "scroll";
            overflow.overflowX = "hidden"
        }
        if (x && !y) {
            overflow.overflowX = "scroll";
            overflow.overflowY = "hidden"
        }
        $object.css(overflow);
        $object.div._scrollParent = true;
        _cancelScroll = false;
        $object.div._preventEvent = function(e) {
            if ($object.maxScroll) {
                var touch = Utils.touchEvent(e);
                var delta = touch.y - $object.__preventY < 0 ? 1 : -1;
                if ($object.div.scrollTop < 2) {
                    if (delta == -1) {
                        e.preventDefault()
                    } else {
                        e.stopPropagation()
                    }
                } else {
                    if ($object.div.scrollTop > $object.maxScroll - 2) {
                        if (delta == 1) {
                            e.preventDefault()
                        } else {
                            e.stopPropagation()
                        }
                    }
                }
            } else {
                e.stopPropagation()
            }
        };
        if (!_this.isNative()) {
            $object.div.addEventListener("touchmove", $object.div._preventEvent)
        }
    };
    this.removeOverflowScroll = function($object) {
        $object.css({
            overflow: "hidden",
            overflowX: "",
            overflowY: "",
            "-webkit-overflow-scrolling": ""
        });
        $object.div.removeEventListener("touchmove", $object.div._preventEvent)
    };
    this.setOrientation = function(type) {
        if (_this.System && _this.NativeCore.active) {
            _this.System.orientation = _this.System[type.toUpperCase()];
            return
        }
        if (Device.mobile) {
            _this.ScreenLock.lock(type)
        }
        _this.orientationSet = type
    };
    this.vibrate = function(time) {
        navigator.vibrate && navigator.vibrate(time)
    };
    this.isNative = function() {
        return _this.NativeCore && _this.NativeCore.active
    }
}, "Static");
Class(function Modules() {
    var _this = this;
    var _modules = {};
    (function() {
        defer(exec)
    })();

    function exec() {
        for (var m in _modules) {
            for (var key in _modules[m]) {
                var module = _modules[m][key];
                if (module._ready) {
                    continue
                }
                module._ready = true;
                if (module.exec) {
                    module.exec()
                }
            }
        }
    }

    function requireModule(root, path) {
        var module = _modules[root][path];
        if (!module._ready) {
            module._ready = true;
            if (module.exec) {
                module.exec()
            }
        }
        return module
    }
    this.push = function(module) {};
    this.Module = function(module) {
        var m = new module();
        var name = module.toString().slice(0, 100).match(/function ([^\(]+)/);
        if (name) {
            m._ready = true;
            name = name[1];
            _modules[name] = {
                index: m
            }
        } else {
            if (!_modules[m.module]) {
                _modules[m.module] = {}
            }
            _modules[m.module][m.path] = m
        }
    };
    this.require = function(path) {
        var root;
        if (!path.strpos("/")) {
            root = path;
            path = "index"
        } else {
            root = path.split("/")[0];
            path = path.replace(root + "/", "")
        }
        return requireModule(root, path).exports
    };
    window.Module = this.Module;
    if (!window._NODE_) {
        window.requireNative = window.require;
        window.require = this.require
    }
}, "Static");
Class(function Timer() {
    var _this = this;
    var _clearTimeout;
    var _callbacks = [];
    var _completed = [];
    var _pool = new ObjectPool(Object, 100);
    (function() {
        Render.start(loop)
    })();

    function loop(t, tsl, delta) {
        var len = _completed.length;
        for (var i = 0; i < len; i++) {
            var obj = _completed[i];
            obj.callback = null;
            _callbacks.findAndRemove(obj);
            _pool.put(obj)
        }
        if (len > 0) {
            _completed.length = 0
        }
        if (delta > 250) {
            return
        }
        len = _callbacks.length;
        for (var i = 0; i < len; i++) {
            var obj = _callbacks[i];
            if (!obj) {
                continue
            }
            if (obj.frames) {
                ++obj.current;
                if (obj.current >= obj.frames) {
                    obj.callback();
                    _completed.push(obj)
                }
            }
            if (obj.time) {
                obj.current += delta;
                if (obj.current >= obj.time) {
                    obj.callback();
                    _completed.push(obj)
                }
            }
        }
    }

    function find(ref) {
        for (var i = _callbacks.length - 1; i > -1; i--) {
            var c = _callbacks[i];
            if (c.ref == ref) {
                return c
            }
        }
    }
    _clearTimeout = window.clearTimeout;
    window.clearTimeout = function(ref) {
        var c = find(ref);
        if (c) {
            _callbacks.findAndRemove(c)
        } else {
            _clearTimeout(ref)
        }
    };
    this.create = function(callback, time) {
        if (window._NODE_) {
            return setTimeout(callback, time)
        }
        if (time <= 0) {
            return callback()
        }
        var obj = _pool.get() || {};
        obj.time = time;
        obj.current = 0;
        obj.ref = Utils.timestamp();
        obj.callback = callback;
        _callbacks.push(obj);
        return obj.ref
    };
    this.waitFrames = function(callback, frames) {
        var obj = _pool.get() | {};
        obj.frames = frames;
        obj.current = 0;
        obj.callback = callback;
        _callbacks.push(obj)
    }
}, "static");
Class(function Color(_value) {
    Inherit(this, Component);
    var _this = this;
    var _hsl, _array;
    this.r = 1;
    this.g = 1;
    this.b = 1;
    (function() {
        set(_value)
    })();

    function set(value) {
        if (value instanceof Color) {
            copy(value)
        } else {
            if (typeof value === "number") {
                setHex(value)
            } else {
                if (Array.isArray(value)) {
                    setRGB(value)
                } else {
                    setHex(Number("0x" + value.slice(1)))
                }
            }
        }
    }

    function copy(color) {
        _this.r = color.r;
        _this.g = color.g;
        _this.b = color.b
    }

    function setHex(hex) {
        hex = Math.floor(hex);
        _this.r = (hex >> 16 & 255) / 255;
        _this.g = (hex >> 8 & 255) / 255;
        _this.b = (hex & 255) / 255
    }

    function setRGB(values) {
        _this.r = values[0];
        _this.g = values[1];
        _this.b = values[2]
    }

    function hue2rgb(p, q, t) {
        if (t < 0) {
            t += 1
        }
        if (t > 1) {
            t -= 1
        }
        if (t < 1 / 6) {
            return p + (q - p) * 6 * t
        }
        if (t < 1 / 2) {
            return q
        }
        if (t < 2 / 3) {
            return p + (q - p) * 6 * (2 / 3 - t)
        }
        return p
    }
    this.set = function(value) {
        set(value);
        return this
    };
    this.setRGB = function(r, g, b) {
        this.r = r;
        this.g = g;
        this.b = b;
        return this
    };
    this.setHSL = function(h, s, l) {
        if (s === 0) {
            this.r = this.g = this.b = l
        } else {
            var p = l <= 0.5 ? l * (1 + s) : l + s - (l * s);
            var q = (2 * l) - p;
            this.r = hue2rgb(q, p, h + 1 / 3);
            this.g = hue2rgb(q, p, h);
            this.b = hue2rgb(q, p, h - 1 / 3)
        }
        return this
    };
    this.offsetHSL = function(h, s, l) {
        var hsl = this.getHSL();
        hsl.h += h;
        hsl.s += s;
        hsl.l += l;
        this.setHSL(hsl.h, hsl.s, hsl.l);
        return this
    };
    this.getStyle = function() {
        return "rgb(" + ((this.r * 255) | 0) + "," + ((this.g * 255) | 0) + "," + ((this.b * 255) | 0) + ")"
    };
    this.getHex = function() {
        return (this.r * 255) << 16 ^ (this.g * 255) << 8 ^ (this.b * 255) << 0
    };
    this.getHexString = function() {
        return "#" + ("000000" + this.getHex().toString(16)).slice(-6)
    };
    this.getHSL = function() {
        _hsl = _hsl || {
            h: 0,
            s: 0,
            l: 0
        };
        var hsl = _hsl;
        var r = this.r,
            g = this.g,
            b = this.b;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var hue, saturation;
        var lightness = (min + max) / 2;
        if (min === max) {
            hue = 0;
            saturation = 0
        } else {
            var delta = max - min;
            saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
            switch (max) {
                case r:
                    hue = (g - b) / delta + (g < b ? 6 : 0);
                    break;
                case g:
                    hue = (b - r) / delta + 2;
                    break;
                case b:
                    hue = (r - g) / delta + 4;
                    break
            }
            hue /= 6
        }
        hsl.h = hue;
        hsl.s = saturation;
        hsl.l = lightness;
        return hsl
    };
    this.add = function(color) {
        this.r += color.r;
        this.g += color.g;
        this.b += color.b
    };
    this.mix = function(color, percent) {
        this.r = this.r * (1 - percent) + (color.r * percent);
        this.g = this.g * (1 - percent) + (color.g * percent);
        this.b = this.b * (1 - percent) + (color.b * percent)
    };
    this.addScalar = function(s) {
        this.r += s;
        this.g += s;
        this.b += s
    };
    this.multiply = function(color) {
        this.r *= color.r;
        this.g *= color.g;
        this.b *= color.b
    };
    this.multiplyScalar = function(s) {
        this.r *= s;
        this.g *= s;
        this.b *= s
    };
    this.clone = function() {
        return new Color([this.r, this.g, this.b])
    };
    this.toArray = function() {
        if (!_array) {
            _array = []
        }
        _array[0] = this.r;
        _array[1] = this.g;
        _array[2] = this.b;
        return _array
    }
});
Class(function Noise() {
    var module = this;

    function Grad(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z
    }
    Grad.prototype.dot2 = function(x, y) {
        return this.x * x + this.y * y
    };
    Grad.prototype.dot3 = function(x, y, z) {
        return this.x * x + this.y * y + this.z * z
    };
    var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];
    var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];
    var perm = new Array(512);
    var gradP = new Array(512);
    module.seed = function(seed) {
        if (seed > 0 && seed < 1) {
            seed *= 65536
        }
        seed = Math.floor(seed);
        if (seed < 256) {
            seed |= seed << 8
        }
        for (var i = 0; i < 256; i++) {
            var v;
            if (i & 1) {
                v = p[i] ^ (seed & 255)
            } else {
                v = p[i] ^ ((seed >> 8) & 255)
            }
            perm[i] = perm[i + 256] = v;
            gradP[i] = gradP[i + 256] = grad3[v % 12]
        }
    };
    module.seed(0);
    var F2 = 0.5 * (Math.sqrt(3) - 1);
    var G2 = (3 - Math.sqrt(3)) / 6;
    var F3 = 1 / 3;
    var G3 = 1 / 6;
    module.simplex2 = function(xin, yin) {
        var n0, n1, n2;
        var s = (xin + yin) * F2;
        var i = Math.floor(xin + s);
        var j = Math.floor(yin + s);
        var t = (i + j) * G2;
        var x0 = xin - i + t;
        var y0 = yin - j + t;
        var i1, j1;
        if (x0 > y0) {
            i1 = 1;
            j1 = 0
        } else {
            i1 = 0;
            j1 = 1
        }
        var x1 = x0 - i1 + G2;
        var y1 = y0 - j1 + G2;
        var x2 = x0 - 1 + 2 * G2;
        var y2 = y0 - 1 + 2 * G2;
        i &= 255;
        j &= 255;
        var gi0 = gradP[i + perm[j]];
        var gi1 = gradP[i + i1 + perm[j + j1]];
        var gi2 = gradP[i + 1 + perm[j + 1]];
        var t0 = 0.5 - x0 * x0 - y0 * y0;
        if (t0 < 0) {
            n0 = 0
        } else {
            t0 *= t0;
            n0 = t0 * t0 * gi0.dot2(x0, y0)
        }
        var t1 = 0.5 - x1 * x1 - y1 * y1;
        if (t1 < 0) {
            n1 = 0
        } else {
            t1 *= t1;
            n1 = t1 * t1 * gi1.dot2(x1, y1)
        }
        var t2 = 0.5 - x2 * x2 - y2 * y2;
        if (t2 < 0) {
            n2 = 0
        } else {
            t2 *= t2;
            n2 = t2 * t2 * gi2.dot2(x2, y2)
        }
        return 70 * (n0 + n1 + n2)
    };
    module.simplex3 = function(xin, yin, zin) {
        var n0, n1, n2, n3;
        var s = (xin + yin + zin) * F3;
        var i = Math.floor(xin + s);
        var j = Math.floor(yin + s);
        var k = Math.floor(zin + s);
        var t = (i + j + k) * G3;
        var x0 = xin - i + t;
        var y0 = yin - j + t;
        var z0 = zin - k + t;
        var i1, j1, k1;
        var i2, j2, k2;
        if (x0 >= y0) {
            if (y0 >= z0) {
                i1 = 1;
                j1 = 0;
                k1 = 0;
                i2 = 1;
                j2 = 1;
                k2 = 0
            } else {
                if (x0 >= z0) {
                    i1 = 1;
                    j1 = 0;
                    k1 = 0;
                    i2 = 1;
                    j2 = 0;
                    k2 = 1
                } else {
                    i1 = 0;
                    j1 = 0;
                    k1 = 1;
                    i2 = 1;
                    j2 = 0;
                    k2 = 1
                }
            }
        } else {
            if (y0 < z0) {
                i1 = 0;
                j1 = 0;
                k1 = 1;
                i2 = 0;
                j2 = 1;
                k2 = 1
            } else {
                if (x0 < z0) {
                    i1 = 0;
                    j1 = 1;
                    k1 = 0;
                    i2 = 0;
                    j2 = 1;
                    k2 = 1
                } else {
                    i1 = 0;
                    j1 = 1;
                    k1 = 0;
                    i2 = 1;
                    j2 = 1;
                    k2 = 0
                }
            }
        }
        var x1 = x0 - i1 + G3;
        var y1 = y0 - j1 + G3;
        var z1 = z0 - k1 + G3;
        var x2 = x0 - i2 + 2 * G3;
        var y2 = y0 - j2 + 2 * G3;
        var z2 = z0 - k2 + 2 * G3;
        var x3 = x0 - 1 + 3 * G3;
        var y3 = y0 - 1 + 3 * G3;
        var z3 = z0 - 1 + 3 * G3;
        i &= 255;
        j &= 255;
        k &= 255;
        var gi0 = gradP[i + perm[j + perm[k]]];
        var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];
        var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];
        var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];
        var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
        if (t0 < 0) {
            n0 = 0
        } else {
            t0 *= t0;
            n0 = t0 * t0 * gi0.dot3(x0, y0, z0)
        }
        var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
        if (t1 < 0) {
            n1 = 0
        } else {
            t1 *= t1;
            n1 = t1 * t1 * gi1.dot3(x1, y1, z1)
        }
        var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
        if (t2 < 0) {
            n2 = 0
        } else {
            t2 *= t2;
            n2 = t2 * t2 * gi2.dot3(x2, y2, z2)
        }
        var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
        if (t3 < 0) {
            n3 = 0
        } else {
            t3 *= t3;
            n3 = t3 * t3 * gi3.dot3(x3, y3, z3)
        }
        return 32 * (n0 + n1 + n2 + n3)
    };

    function fade(t) {
        return t * t * t * (t * (t * 6 - 15) + 10)
    }

    function lerp(a, b, t) {
        return (1 - t) * a + t * b
    }
    module.perlin = function(x) {
        return module.perlin2(x, 0)
    };
    module.perlin2 = function(x, y) {
        var X = Math.floor(x),
            Y = Math.floor(y);
        x = x - X;
        y = y - Y;
        X = X & 255;
        Y = Y & 255;
        var n00 = gradP[X + perm[Y]].dot2(x, y);
        var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);
        var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);
        var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);
        var u = fade(x);
        return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y))
    };
    module.perlin3 = function(x, y, z) {
        var X = Math.floor(x),
            Y = Math.floor(y),
            Z = Math.floor(z);
        x = x - X;
        y = y - Y;
        z = z - Z;
        X = X & 255;
        Y = Y & 255;
        Z = Z & 255;
        var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);
        var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);
        var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);
        var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);
        var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);
        var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);
        var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);
        var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);
        var u = fade(x);
        var v = fade(y);
        var w = fade(z);
        return lerp(lerp(lerp(n000, n100, u), lerp(n001, n101, u), w), lerp(lerp(n010, n110, u), lerp(n011, n111, u), w), v)
    }
}, "Static");
Class(function Matrix2() {
    var _this = this;
    var prototype = Matrix2.prototype;
    var a11, a12, a13, a21, a22, a23, a31, a32, a33;
    var b11, b12, b13, b21, b22, b23, b31, b32, b33;
    this.type = "matrix2";
    this.data = new Float32Array(9);
    (function() {
        identity()
    })();

    function identity(d) {
        d = d || _this.data;
        d[0] = 1, d[1] = 0, d[2] = 0;
        d[3] = 0, d[4] = 1, d[5] = 0;
        d[6] = 0, d[7] = 0, d[8] = 1
    }

    function noE(n) {
        n = Math.abs(n) < 0.000001 ? 0 : n;
        return n
    }
    if (typeof prototype.identity !== "undefined") {
        return
    }
    prototype.identity = function(d) {
        identity(d);
        return this
    };
    prototype.transformVector = function(v) {
        var d = this.data;
        var x = v.x;
        var y = v.y;
        v.x = d[0] * x + d[1] * y + d[2];
        v.y = d[3] * x + d[4] * y + d[5];
        return v
    };
    prototype.setTranslation = function(tx, ty, m) {
        var d = m || this.data;
        d[0] = 1, d[1] = 0, d[2] = tx;
        d[3] = 0, d[4] = 1, d[5] = ty;
        d[6] = 0, d[7] = 0, d[8] = 1;
        return this
    };
    prototype.getTranslation = function(v) {
        var d = this.data;
        v = v || new Vector2();
        v.x = d[2];
        v.y = d[5];
        return v
    };
    prototype.setScale = function(sx, sy, m) {
        var d = m || this.data;
        d[0] = sx, d[1] = 0, d[2] = 0;
        d[3] = 0, d[4] = sy, d[5] = 0;
        d[6] = 0, d[7] = 0, d[8] = 1;
        return this
    };
    prototype.setShear = function(sx, sy, m) {
        var d = m || this.data;
        d[0] = 1, d[1] = sx, d[2] = 0;
        d[3] = sy, d[4] = 1, d[5] = 0;
        d[6] = 0, d[7] = 0, d[8] = 1;
        return this
    };
    prototype.setRotation = function(a, m) {
        var d = m || this.data;
        var r0 = Math.cos(a);
        var r1 = Math.sin(a);
        d[0] = r0, d[1] = -r1, d[2] = 0;
        d[3] = r1, d[4] = r0, d[5] = 0;
        d[6] = 0, d[7] = 0, d[8] = 1;
        return this
    };
    prototype.setTRS = function(tx, ty, a, sx, sy) {
        var d = this.data;
        var r0 = Math.cos(a);
        var r1 = Math.sin(a);
        d[0] = r0 * sx, d[1] = -r1 * sy, d[2] = tx;
        d[3] = r1 * sx, d[4] = r0 * sy, d[5] = ty;
        d[6] = 0, d[7] = 0, d[8] = 1;
        return this
    };
    prototype.translate = function(tx, ty) {
        this.identity(Matrix2.__TEMP__);
        this.setTranslation(tx, ty, Matrix2.__TEMP__);
        return this.multiply(Matrix2.__TEMP__)
    };
    prototype.rotate = function(a) {
        this.identity(Matrix2.__TEMP__);
        this.setTranslation(a, Matrix2.__TEMP__);
        return this.multiply(Matrix2.__TEMP__)
    };
    prototype.scale = function(sx, sy) {
        this.identity(Matrix2.__TEMP__);
        this.setScale(sx, sy, Matrix2.__TEMP__);
        return this.multiply(Matrix2.__TEMP__)
    };
    prototype.shear = function(sx, sy) {
        this.identity(Matrix2.__TEMP__);
        this.setRotation(sx, sy, Matrix2.__TEMP__);
        return this.multiply(Matrix2.__TEMP__)
    };
    prototype.multiply = function(m) {
        var a = this.data;
        var b = m.data || m;
        a11 = a[0], a12 = a[1], a13 = a[2];
        a21 = a[3], a22 = a[4], a23 = a[5];
        a31 = a[6], a32 = a[7], a33 = a[8];
        b11 = b[0], b12 = b[1], b13 = b[2];
        b21 = b[3], b22 = b[4], b23 = b[5];
        b31 = b[6], b32 = b[7], b33 = b[8];
        a[0] = a11 * b11 + a12 * b21 + a13 * b31;
        a[1] = a11 * b12 + a12 * b22 + a13 * b32;
        a[2] = a11 * b13 + a12 * b23 + a13 * b33;
        a[3] = a21 * b11 + a22 * b21 + a23 * b31;
        a[4] = a21 * b12 + a22 * b22 + a23 * b32;
        a[5] = a21 * b13 + a22 * b23 + a23 * b33;
        return this
    };
    prototype.inverse = function(m) {
        m = m || this;
        var a = m.data;
        var b = this.data;
        a11 = a[0], a12 = a[1], a13 = a[2];
        a21 = a[3], a22 = a[4], a23 = a[5];
        a31 = a[6], a32 = a[7], a33 = a[8];
        var det = m.determinant();
        if (Math.abs(det) < 1e-7) {}
        var invdet = 1 / det;
        b[0] = (a22 * a33 - a32 * a23) * invdet;
        b[1] = (a13 * a32 - a12 * a33) * invdet;
        b[2] = (a12 * a23 - a13 * a22) * invdet;
        b[3] = (a23 * a31 - a21 * a33) * invdet;
        b[4] = (a11 * a33 - a13 * a31) * invdet;
        b[5] = (a21 * a13 - a11 * a23) * invdet;
        b[6] = (a21 * a32 - a31 * a22) * invdet;
        b[7] = (a31 * a12 - a11 * a32) * invdet;
        b[8] = (a11 * a22 - a21 * a12) * invdet;
        return m
    };
    prototype.determinant = function() {
        var a = this.data;
        a11 = a[0], a12 = a[1], a13 = a[2];
        a21 = a[3], a22 = a[4], a23 = a[5];
        a31 = a[6], a32 = a[7], a33 = a[8];
        return a11 * (a22 * a33 - a32 * a23) - a12 * (a21 * a33 - a23 * a31) + a13 * (a21 * a32 * a22 * a31)
    };
    prototype.copyTo = function(m) {
        var a = this.data;
        var b = m.data || m;
        b[0] = a[0], b[1] = a[1], b[2] = a[2];
        b[3] = a[3], b[4] = a[4], b[5] = a[5];
        b[6] = a[6], b[7] = a[7], b[8] = a[8];
        return m
    };
    prototype.copyFrom = function(m) {
        var a = this.data;
        var b = m.data || m;
        b[0] = a[0], b[1] = a[1], b[2] = a[2];
        b[3] = a[3], b[4] = a[4], b[5] = a[5];
        b[6] = a[6], b[7] = a[7], b[8] = a[8];
        return this
    };
    prototype.getCSS = function(force2D) {
        var d = this.data;
        if (Device.tween.css3d && !force2D) {
            return "matrix3d(" + noE(d[0]) + ", " + noE(d[3]) + ", 0, 0, " + noE(d[1]) + ", " + noE(d[4]) + ", 0, 0, 0, 0, 1, 0, " + noE(d[2]) + ", " + noE(d[5]) + ", 0, 1)"
        } else {
            return "matrix(" + noE(d[0]) + ", " + noE(d[3]) + ", " + noE(d[1]) + ", " + noE(d[4]) + ", " + noE(d[2]) + ", " + noE(d[5]) + ")"
        }
    }
}, function() {
    Matrix2.__TEMP__ = new Matrix2().data
});
Class(function Matrix4() {
    var _this = this;
    var prototype = Matrix4.prototype;
    this.type = "matrix4";
    this.data = new Float32Array(16);
    (function() {
        identity()
    })();

    function identity(m) {
        var d = m || _this.data;
        d[0] = 1, d[4] = 0, d[8] = 0, d[12] = 0;
        d[1] = 0, d[5] = 1, d[9] = 0, d[13] = 0;
        d[2] = 0, d[6] = 0, d[10] = 1, d[14] = 0;
        d[3] = 0, d[7] = 0, d[11] = 0, d[15] = 1
    }

    function noE(n) {
        return Math.abs(n) < 0.000001 ? 0 : n
    }
    if (typeof prototype.identity !== "undefined") {
        return
    }
    prototype.identity = function() {
        identity();
        return this
    };
    prototype.transformVector = function(v, pv) {
        var d = this.data;
        var x = v.x,
            y = v.y,
            z = v.z,
            w = v.w;
        pv = pv || v;
        pv.x = d[0] * x + d[4] * y + d[8] * z + d[12] * w;
        pv.y = d[1] * x + d[5] * y + d[9] * z + d[13] * w;
        pv.z = d[2] * x + d[6] * y + d[10] * z + d[14] * w;
        return pv
    };
    prototype.multiply = function(m, d) {
        var a = this.data;
        var b = m.data || m;
        var a00, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15;
        var b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, b12, b13, b14, b15;
        a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        a04 = a[4], a05 = a[5], a06 = a[6], a07 = a[7];
        a08 = a[8], a09 = a[9], a10 = a[10], a11 = a[11];
        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
        b00 = b[0], b01 = b[1], b02 = b[2], b03 = b[3];
        b04 = b[4], b05 = b[5], b06 = b[6], b07 = b[7];
        b08 = b[8], b09 = b[9], b10 = b[10], b11 = b[11];
        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        a[0] = a00 * b00 + a04 * b01 + a08 * b02 + a12 * b03;
        a[1] = a01 * b00 + a05 * b01 + a09 * b02 + a13 * b03;
        a[2] = a02 * b00 + a06 * b01 + a10 * b02 + a14 * b03;
        a[3] = a03 * b00 + a07 * b01 + a11 * b02 + a15 * b03;
        a[4] = a00 * b04 + a04 * b05 + a08 * b06 + a12 * b07;
        a[5] = a01 * b04 + a05 * b05 + a09 * b06 + a13 * b07;
        a[6] = a02 * b04 + a06 * b05 + a10 * b06 + a14 * b07;
        a[7] = a03 * b04 + a07 * b05 + a11 * b06 + a15 * b07;
        a[8] = a00 * b08 + a04 * b09 + a08 * b10 + a12 * b11;
        a[9] = a01 * b08 + a05 * b09 + a09 * b10 + a13 * b11;
        a[10] = a02 * b08 + a06 * b09 + a10 * b10 + a14 * b11;
        a[11] = a03 * b08 + a07 * b09 + a11 * b10 + a15 * b11;
        a[12] = a00 * b12 + a04 * b13 + a08 * b14 + a12 * b15;
        a[13] = a01 * b12 + a05 * b13 + a09 * b14 + a13 * b15;
        a[14] = a02 * b12 + a06 * b13 + a10 * b14 + a14 * b15;
        a[15] = a03 * b12 + a07 * b13 + a11 * b14 + a15 * b15;
        return this
    };
    prototype.setTRS = function(tx, ty, tz, rx, ry, rz, sx, sy, sz, m) {
        m = m || this;
        var d = m.data;
        identity(m);
        var six = Math.sin(rx);
        var cox = Math.cos(rx);
        var siy = Math.sin(ry);
        var coy = Math.cos(ry);
        var siz = Math.sin(rz);
        var coz = Math.cos(rz);
        d[0] = (coy * coz + siy * six * siz) * sx;
        d[1] = (-coy * siz + siy * six * coz) * sx;
        d[2] = siy * cox * sx;
        d[4] = siz * cox * sy;
        d[5] = coz * cox * sy;
        d[6] = -six * sy;
        d[8] = (-siy * coz + coy * six * siz) * sz;
        d[9] = (siz * siy + coy * six * coz) * sz;
        d[10] = coy * cox * sz;
        d[12] = tx;
        d[13] = ty;
        d[14] = tz;
        return m
    };
    prototype.setScale = function(sx, sy, sz, m) {
        m = m || this;
        var d = m.data || m;
        identity(m);
        d[0] = sx, d[5] = sy, d[10] = sz;
        return m
    };
    prototype.setTranslation = function(tx, ty, tz, m) {
        m = m || this;
        var d = m.data || m;
        identity(m);
        d[12] = tx, d[13] = ty, d[14] = tz;
        return m
    };
    prototype.setRotation = function(rx, ry, rz, m) {
        m = m || this;
        var d = m.data || m;
        identity(m);
        var sx = Math.sin(rx);
        var cx = Math.cos(rx);
        var sy = Math.sin(ry);
        var cy = Math.cos(ry);
        var sz = Math.sin(rz);
        var cz = Math.cos(rz);
        d[0] = cy * cz + sy * sx * sz;
        d[1] = -cy * sz + sy * sx * cz;
        d[2] = sy * cx;
        d[4] = sz * cx;
        d[5] = cz * cx;
        d[6] = -sx;
        d[8] = -sy * cz + cy * sx * sz;
        d[9] = sz * sy + cy * sx * cz;
        d[10] = cy * cx;
        return m
    };
    prototype.setLookAt = function(eye, center, up, m) {
        m = m || this;
        var d = m.data || m;
        var f = D3.m4v31;
        var s = D3.m4v32;
        var u = D3.m4v33;
        f.subVectors(center, eye).normalize();
        s.cross(f, up).normalize();
        u.cross(s, f);
        d[0] = s.x;
        d[1] = u.x;
        d[2] = -f.x;
        d[3] = 0;
        d[4] = s.y;
        d[5] = u.y;
        d[6] = -f.y;
        d[7] = 0;
        d[8] = s.z;
        d[9] = u.z;
        d[10] = -f.z;
        d[11] = 0;
        d[12] = 0;
        d[13] = 0;
        d[14] = 0;
        d[15] = 1;
        this.translate(-eye.x, -eye.y, -eye.z);
        return this
    };
    prototype.setPerspective = function(fovy, aspect, near, far, m) {
        var e, rd, s, ct;
        if (near === far || aspect === 0) {
            throw "null frustum"
        }
        if (near <= 0) {
            throw "near <= 0"
        }
        if (far <= 0) {
            throw "far <= 0"
        }
        fovy = Math.PI * fovy / 180 / 2;
        s = Math.sin(fovy);
        if (s === 0) {
            throw "null frustum"
        }
        rd = 1 / (far - near);
        ct = Math.cos(fovy) / s;
        e = m ? (m.data || m) : this.data;
        e[0] = ct / aspect;
        e[1] = 0;
        e[2] = 0;
        e[3] = 0;
        e[4] = 0;
        e[5] = ct;
        e[6] = 0;
        e[7] = 0;
        e[8] = 0;
        e[9] = 0;
        e[10] = -(far + near) * rd;
        e[11] = -1;
        e[12] = 0;
        e[13] = 0;
        e[14] = -2 * near * far * rd;
        e[15] = 0
    };
    prototype.setRotationFromQuaternion = function(q) {
        var d = this.data;
        var x = q.x,
            y = q.y,
            z = q.z,
            w = q.w;
        var x2 = x + x,
            y2 = y + y,
            z2 = z + z;
        var xx = x * x2,
            xy = x * y2,
            xz = x * z2;
        var yy = y * y2,
            yz = y * z2,
            zz = z * z2;
        var wx = w * x2,
            wy = w * y2,
            wz = w * z2;
        d[0] = 1 - (yy + zz);
        d[4] = xy - wz;
        d[8] = xz + wy;
        d[1] = xy + wz;
        d[5] = 1 - (xx + zz);
        d[9] = yz - wx;
        d[2] = xz - wy;
        d[6] = yz + wx;
        d[10] = 1 - (xx + yy);
        d[3] = 0;
        d[7] = 0;
        d[11] = 0;
        d[12] = 0;
        d[13] = 0;
        d[14] = 0;
        d[15] = 1;
        return this
    }, prototype.perspective = function(fov, aspect, near, far) {
        this.setPerspective(fov, aspect, near, far, Matrix4.__TEMP__);
        return this.multiply(Matrix4.__TEMP__)
    };
    prototype.lookAt = function(eye, center, up) {
        this.setLookAt(eye, center, up, Matrix4.__TEMP__);
        return this.multiply(Matrix4.__TEMP__)
    };
    prototype.translate = function(tx, ty, tz) {
        this.setTranslation(tx, ty, tz, Matrix4.__TEMP__);
        return this.multiply(Matrix4.__TEMP__)
    };
    prototype.rotate = function(rx, ry, rz) {
        this.setRotation(rx, ry, rz, Matrix4.__TEMP__);
        return this.multiply(Matrix4.__TEMP__)
    };
    prototype.scale = function(sx, sy, sz) {
        this.setScale(sx, sy, sz, Matrix4.__TEMP__);
        return this.multiply(Matrix4.__TEMP__)
    };
    prototype.copyTo = function(m) {
        var a = this.data;
        var b = m.data || m;
        for (var i = 0; i < 16; i++) {
            b[i] = a[i]
        }
    };
    prototype.copyFrom = function(m) {
        var a = this.data;
        var b = m.data || m;
        for (var i = 0; i < 16; i++) {
            a[i] = b[i]
        }
        return this
    };
    prototype.copyRotationTo = function(m) {
        var a = this.data;
        var b = m.data || m;
        b[0] = a[0];
        b[1] = a[1];
        b[2] = a[2];
        b[3] = a[4];
        b[4] = a[5];
        b[5] = a[6];
        b[6] = a[8];
        b[7] = a[9];
        b[8] = a[10];
        return m
    };
    prototype.copyPosition = function(m) {
        var to = this.data;
        var from = m.data || m;
        to[12] = from[12];
        to[13] = from[13];
        to[14] = from[14];
        return this
    };
    prototype.getCSS = function() {
        var d = this.data;
        return "matrix3d(" + noE(d[0]) + "," + noE(d[1]) + "," + noE(d[2]) + "," + noE(d[3]) + "," + noE(d[4]) + "," + noE(d[5]) + "," + noE(d[6]) + "," + noE(d[7]) + "," + noE(d[8]) + "," + noE(d[9]) + "," + noE(d[10]) + "," + noE(d[11]) + "," + noE(d[12]) + "," + noE(d[13]) + "," + noE(d[14]) + "," + noE(d[15]) + ")"
    };
    prototype.extractPosition = function(v) {
        v = v || new Vector3();
        var d = this.data;
        v.set(d[12], d[13], d[14]);
        return v
    };
    prototype.determinant = function() {
        var d = this.data;
        return d[0] * (d[5] * d[10] - d[9] * d[6]) + d[4] * (d[9] * d[2] - d[1] * d[10]) + d[8] * (d[1] * d[6] - d[5] * d[2])
    };
    prototype.inverse = function(m) {
        var d = this.data;
        var a = (m) ? m.data || m : this.data;
        var det = this.determinant();
        if (Math.abs(det) < 0.0001) {
            console.warn("Attempt to inverse a singular Matrix4. ", this.data);
            console.trace();
            return m
        }
        var d0 = d[0],
            d4 = d[4],
            d8 = d[8],
            d12 = d[12],
            d1 = d[1],
            d5 = d[5],
            d9 = d[9],
            d13 = d[13],
            d2 = d[2],
            d6 = d[6],
            d10 = d[10],
            d14 = d[14];
        det = 1 / det;
        a[0] = (d5 * d10 - d9 * d6) * det;
        a[1] = (d8 * d6 - d4 * d10) * det;
        a[2] = (d4 * d9 - d8 * d5) * det;
        a[4] = (d9 * d2 - d1 * d10) * det;
        a[5] = (d0 * d10 - d8 * d2) * det;
        a[6] = (d8 * d1 - d0 * d9) * det;
        a[8] = (d1 * d6 - d5 * d2) * det;
        a[9] = (d4 * d2 - d0 * d6) * det;
        a[10] = (d0 * d5 - d4 * d1) * det;
        a[12] = -(d12 * a[0] + d13 * a[4] + d14 * a[8]);
        a[13] = -(d12 * a[1] + d13 * a[5] + d14 * a[9]);
        a[14] = -(d12 * a[2] + d13 * a[6] + d14 * a[10]);
        return m
    };
    prototype.transpose = function(m) {
        var d = this.data;
        var a = m ? m.data || m : this.data;
        var d0 = d[0],
            d4 = d[4],
            d8 = d[8],
            d1 = d[1],
            d5 = d[5],
            d9 = d[9],
            d2 = d[2],
            d6 = d[6],
            d10 = d[10];
        a[0] = d0;
        a[1] = d4;
        a[2] = d8;
        a[4] = d1;
        a[5] = d5;
        a[6] = d9;
        a[8] = d2;
        a[9] = d6;
        a[10] = d10
    }
}, function() {
    Matrix4.__TEMP__ = new Matrix4().data
});
Class(function Vector2(_x, _y) {
    var _this = this;
    var prototype = Vector2.prototype;
    this.x = typeof _x == "number" ? _x : 0;
    this.y = typeof _y == "number" ? _y : 0;
    this.type = "vector2";
    if (typeof prototype.set !== "undefined") {
        return
    }
    prototype.set = function(x, y) {
        this.x = x;
        this.y = y;
        return this
    };
    prototype.clear = function() {
        this.x = 0;
        this.y = 0;
        return this
    };
    prototype.copyTo = function(v) {
        v.x = this.x;
        v.y = this.y;
        return this
    };
    prototype.copyFrom = prototype.copy = function(v) {
        this.x = v.x;
        this.y = v.y;
        return this
    };
    prototype.addVectors = function(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        return this
    };
    prototype.subVectors = function(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        return this
    };
    prototype.multiplyVectors = function(a, b) {
        this.x = a.x * b.x;
        this.y = a.y * b.y;
        return this
    };
    prototype.add = function(v) {
        this.x += v.x;
        this.y += v.y;
        return this
    };
    prototype.sub = function(v) {
        this.x -= v.x;
        this.y -= v.y;
        return this
    };
    prototype.multiply = function(v) {
        this.x *= v;
        this.y *= v;
        return this
    };
    prototype.divide = function(v) {
        this.x /= v;
        this.y /= v;
        return this
    };
    prototype.lengthSq = function() {
        return (this.x * this.x + this.y * this.y) || 0.00001
    };
    prototype.length = function() {
        return Math.sqrt(this.lengthSq())
    };
    prototype.setLength = function(length) {
        this.normalize().multiply(length);
        return this
    };
    prototype.normalize = function() {
        var length = this.length();
        this.x /= length;
        this.y /= length;
        return this
    };
    prototype.perpendicular = function(a, b) {
        var tx = this.x;
        var ty = this.y;
        this.x = -ty;
        this.y = tx;
        return this
    };
    prototype.lerp = function(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        return this
    };
    prototype.interp = function(v, alpha, ease) {
        var a = 0;
        var f = TweenManager.Interpolation.convertEase(ease);
        var calc = Vector2.__TEMP__;
        calc.subVectors(this, v);
        var dist = Utils.clamp(Utils.range(calc.lengthSq(), 0, (5000 * 5000), 1, 0), 0, 1) * (alpha / 10);
        if (typeof f === "function") {
            a = f(dist)
        } else {
            a = TweenManager.Interpolation.solve(f, dist)
        }
        this.x += (v.x - this.x) * a;
        this.y += (v.y - this.y) * a
    };
    prototype.setAngleRadius = function(a, r) {
        this.x = Math.cos(a) * r;
        this.y = Math.sin(a) * r;
        return this
    };
    prototype.addAngleRadius = function(a, r) {
        this.x += Math.cos(a) * r;
        this.y += Math.sin(a) * r;
        return this
    };
    prototype.clone = function() {
        return new Vector2(this.x, this.y)
    };
    prototype.dot = function(a, b) {
        b = b || this;
        return (a.x * b.x + a.y * b.y)
    };
    prototype.distanceTo = function(v, noSq) {
        var dx = this.x - v.x;
        var dy = this.y - v.y;
        if (!noSq) {
            return Math.sqrt(dx * dx + dy * dy)
        }
        return dx * dx + dy * dy
    };
    prototype.solveAngle = function(a, b) {
        if (!b) {
            b = this
        }
        return Math.atan2(a.y - b.y, a.x - b.x)
    };
    prototype.equals = function(v) {
        return this.x == v.x && this.y == v.y
    };
    prototype.console = function() {
        console.log(this.x, this.y)
    };
    prototype.toString = function(split) {
        split = split || " ";
        return this.x + split + this.y
    }
}, function() {
    Vector2.__TEMP__ = new Vector2()
});
Class(function Vector3(_x, _y, _z, _w) {
    var _this = this;
    var prototype = Vector3.prototype;
    this.x = typeof _x === "number" ? _x : 0;
    this.y = typeof _y === "number" ? _y : 0;
    this.z = typeof _z === "number" ? _z : 0;
    this.w = typeof _w === "number" ? _w : 1;
    this.type = "vector3";
    if (typeof prototype.set !== "undefined") {
        return
    }
    prototype.set = function(x, y, z, w) {
        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;
        this.w = w || 1;
        return this
    };
    prototype.clear = function() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 1;
        return this
    };
    prototype.copyTo = function(p) {
        p.x = this.x;
        p.y = this.y;
        p.z = this.z;
        p.w = this.w;
        return p
    };
    prototype.copyFrom = prototype.copy = function(p) {
        this.x = p.x || 0;
        this.y = p.y || 0;
        this.z = p.z || 0;
        this.w = p.w || 1;
        return this
    };
    prototype.lengthSq = function() {
        return this.x * this.x + this.y * this.y + this.z * this.z
    };
    prototype.length = function() {
        return Math.sqrt(this.lengthSq())
    };
    prototype.normalize = function() {
        var m = 1 / this.length();
        this.set(this.x * m, this.y * m, this.z * m);
        return this
    };
    prototype.setLength = function(length) {
        this.normalize().multiply(length);
        return this
    };
    prototype.addVectors = function(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        return this
    };
    prototype.subVectors = function(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        return this
    };
    prototype.multiplyVectors = function(a, b) {
        this.x = a.x * b.x;
        this.y = a.y * b.y;
        this.z = a.z * b.z;
        return this
    };
    prototype.add = function(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        return this
    };
    prototype.sub = function(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        return this
    };
    prototype.multiply = function(v) {
        this.x *= v;
        this.y *= v;
        this.z *= v;
        return this
    };
    prototype.divide = function(v) {
        this.x /= v;
        this.y /= v;
        this.z /= v;
        return this
    };
    prototype.limit = function(max) {
        if (this.length() > max) {
            this.normalize();
            this.multiply(max)
        }
    };
    prototype.heading2D = function() {
        var angle = Math.atan2(-this.y, this.x);
        return -angle
    };
    prototype.lerp = function(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        this.z += (v.z - this.z) * alpha;
        return this
    };
    prototype.deltaLerp = function(v, alpha, delta) {
        delta = delta || 1;
        for (var i = 0; i < delta; i++) {
            var f = alpha;
            this.x += ((v.x - this.x) * alpha);
            this.y += ((v.y - this.y) * alpha);
            this.z += ((v.z - this.z) * alpha)
        }
        return this
    };
    prototype.interp = function(v, alpha, ease, dist) {
        if (!Vector3.__TEMP__) {
            Vector3.__TEMP__ = new Vector3()
        }
        dist = dist || 5000;
        var a = 0;
        var f = TweenManager.Interpolation.convertEase(ease);
        var calc = Vector3.__TEMP__;
        calc.subVectors(this, v);
        var dist = Utils.clamp(Utils.range(calc.lengthSq(), 0, (dist * dist), 1, 0), 0, 1) * (alpha / 10);
        if (typeof f === "function") {
            a = f(dist)
        } else {
            a = TweenManager.Interpolation.solve(f, dist)
        }
        this.x += (v.x - this.x) * a;
        this.y += (v.y - this.y) * a;
        this.z += (v.z - this.z) * a
    };
    prototype.setAngleRadius = function(a, r) {
        this.x = Math.cos(a) * r;
        this.y = Math.sin(a) * r;
        this.z = Math.sin(a) * r;
        return this
    };
    prototype.addAngleRadius = function(a, r) {
        this.x += Math.cos(a) * r;
        this.y += Math.sin(a) * r;
        this.z += Math.sin(a) * r;
        return this
    };
    prototype.dot = function(a, b) {
        b = b || this;
        return a.x * b.x + a.y * b.y + a.z * b.z
    };
    prototype.clone = function() {
        return new Vector3(this.x, this.y, this.z)
    };
    prototype.cross = function(a, b) {
        if (!b) {
            b = this
        }
        var x = a.y * b.z - a.z * b.y;
        var y = a.z * b.x - a.x * b.z;
        var z = a.x * b.y - a.y * b.x;
        this.set(x, y, z, this.w);
        return this
    };
    prototype.distanceTo = function(v, noSq) {
        var dx = this.x - v.x;
        var dy = this.y - v.y;
        var dz = this.z - v.z;
        if (!noSq) {
            return Math.sqrt(dx * dx + dy * dy + dz * dz)
        }
        return dx * dx + dy * dy + dz * dz
    };
    prototype.solveAngle = function(a, b) {
        if (!b) {
            b = this
        }
        return Math.acos(a.dot(b) / ((a.length() * b.length()) || 0.00001))
    };
    prototype.equals = function(v) {
        return this.x == v.x && this.y == v.y && this.z == v.z
    };
    prototype.console = function() {
        console.log(this.x, this.y, this.z)
    };
    prototype.toString = function(split) {
        split = split || " ";
        return this.x + split + this.y + split + this.z
    }
}, function() {
    Vector3.__TEMP__ = new Vector3()
});
Mobile.Class(function Accelerometer() {
    var _this = this;
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.heading = 0;
    this.rotationRate = {};
    this.toRadians = Math.PI / 180;
    HydraEvents.createLocalEmitter(this);

    function updateAccel(e) {
        switch (window.orientation) {
            case 0:
                _this.x = -e.acceleration.x;
                _this.y = e.acceleration.y;
                _this.z = e.acceleration.z;
                if (e.rotationRate) {
                    _this.rotationRate.alpha = e.rotationRate.beta * _this.toRadians;
                    _this.rotationRate.beta = -e.rotationRate.alpha * _this.toRadians;
                    _this.rotationRate.gamma = e.rotationRate.gamma * _this.toRadians
                }
                break;
            case 180:
                _this.x = e.acceleration.x;
                _this.y = -e.acceleration.y;
                _this.z = e.acceleration.z;
                if (e.rotationRate) {
                    _this.rotationRate.alpha = -e.rotationRate.beta * _this.toRadians;
                    _this.rotationRate.beta = e.rotationRate.alpha * _this.toRadians;
                    _this.rotationRate.gamma = e.rotationRate.gamma * _this.toRadians
                }
                break;
            case 90:
                _this.x = e.acceleration.y;
                _this.y = e.acceleration.x;
                _this.z = e.acceleration.z;
                if (e.rotationRate) {
                    _this.rotationRate.alpha = e.rotationRate.alpha * _this.toRadians;
                    _this.rotationRate.beta = e.rotationRate.beta * _this.toRadians;
                    _this.rotationRate.gamma = e.rotationRate.gamma * _this.toRadians
                }
                break;
            case -90:
                _this.x = -e.acceleration.y;
                _this.y = -e.acceleration.x;
                _this.z = e.acceleration.z;
                if (e.rotationRate) {
                    _this.rotationRate.alpha = -e.rotationRate.alpha * _this.toRadians;
                    _this.rotationRate.beta = -e.rotationRate.beta * _this.toRadians;
                    _this.rotationRate.gamma = e.rotationRate.gamma * _this.toRadians
                }
                break
        }
        _this.fire("motion", null)
    }

    function updateOrientation(e) {
        for (var key in e) {
            if (key.toLowerCase().strpos("heading")) {
                _this.heading = e[key]
            }
        }
        switch (window.orientation) {
            case 0:
                _this.alpha = e.beta * _this.toRadians;
                _this.beta = -e.alpha * _this.toRadians;
                _this.gamma = e.gamma * _this.toRadians;
                break;
            case 180:
                _this.alpha = -e.beta * _this.toRadians;
                _this.beta = e.alpha * _this.toRadians;
                _this.gamma = e.gamma * _this.toRadians;
                break;
            case 90:
                _this.alpha = e.alpha * _this.toRadians;
                _this.beta = e.beta * _this.toRadians;
                _this.gamma = e.gamma * _this.toRadians;
                break;
            case -90:
                _this.alpha = -e.alpha * _this.toRadians;
                _this.beta = -e.beta * _this.toRadians;
                _this.gamma = e.gamma * _this.toRadians;
                break
        }
        _this.tilt = e.beta * _this.toRadians;
        _this.yaw = e.alpha * _this.toRadians;
        _this.roll = -e.gamma * _this.toRadians;
        if (Mobile.os == "Android") {
            _this.heading = compassHeading(e.alpha, e.beta, e.gamma)
        }
        _this.fire("orientation", null)
    }

    function compassHeading(alpha, beta, gamma) {
        var degtorad = Math.PI / 180;
        var _x = beta ? beta * degtorad : 0;
        var _y = gamma ? gamma * degtorad : 0;
        var _z = alpha ? alpha * degtorad : 0;
        var cX = Math.cos(_x);
        var cY = Math.cos(_y);
        var cZ = Math.cos(_z);
        var sX = Math.sin(_x);
        var sY = Math.sin(_y);
        var sZ = Math.sin(_z);
        var Vx = -cZ * sY - sZ * sX * cY;
        var Vy = -sZ * sY + cZ * sX * cY;
        var compassHeading = Math.atan(Vx / Vy);
        if (Vy < 0) {
            compassHeading += Math.PI
        } else {
            if (Vx < 0) {
                compassHeading += 2 * Math.PI
            }
        }
        return compassHeading * (180 / Math.PI)
    }
    this.capture = function() {
        if (!this.active) {
            this.active = true;
            window.ondevicemotion = updateAccel;
            window.addEventListener("deviceorientation", updateOrientation)
        }
    };
    this.stop = function() {
        this.active = false;
        window.ondevicemotion = null;
        _this.x = _this.y = _this.z = 0;
        window.removeEventListener("deviceorientation", updateOrientation)
    }
}, "Static");
Mobile.Class(function ScreenLock() {
    Inherit(this, Component);
    var _this = this;
    var _lockedNodes = [];
    (function() {
        addListeners()
    })();

    function addListeners() {
        _this.events.subscribe(HydraEvents.RESIZE, orientationChange)
    }

    function orientationChange() {
        var width = document.body.clientWidth;
        var height = document.body.clientHeight;
        _lockedNodes.forEach(function(e) {
            if (Device.getFullscreen() && window.screen && window.screen.orientation.lock) {
                window.screen.orientation.lock("portrait");
                e.object.size(width, height);
                e.object.div.style.transformOrigin = "";
                e.object.div.style.transform = "";
                return
            }
            if (width < height) {
                e.object.size(width, height);
                e.object.div.style.transformOrigin = "";
                e.object.div.style.transform = ""
            } else {
                var w = width;
                var h = height;
                width = Math.max(w, h);
                height = Math.min(w, h);
                e.object.size(height, width);
                e.object.div.style.transformOrigin = "0% 0%";
                if (window.orientation == -90 || window.orientation == 180) {
                    e.object.div.style.transform = "translateX(" + width + "px) rotate(90deg)"
                } else {
                    e.object.div.style.transform = "translateY(" + height + "px) rotate(-90deg)"
                }
            }
        })
    }
    this.lock = function(orientation) {
        _lockedNodes.push({
            object: Stage,
            orientation: orientation
        });
        orientationChange()
    };
    this.unlock = function() {
        var obj = Stage;
        _lockedNodes.every(function(o, i) {
            if (o.object == obj) {
                _lockedNodes.splice(i, 1);
                return false
            }
            return true
        })
    };
    this.forceOrientationChange = orientationChange
}, "static");
Class(function Interaction() {
    Namespace(this)
}, "static");
Interaction.Class(function Input(_object) {
    Inherit(this, Component);
    var _this = this;
    var _hold = new Vector2();
    var _diff = new Vector2();
    var _lastMove = new Vector2();
    var _delta = Render.TIME;
    var _lastTime = Render.TIME;
    this.velocity = new Vector2();
    (function() {
        if (_object instanceof HydraObject) {
            addListeners()
        }
    })();

    function addListeners() {
        if (_object == Stage || _object == __window) {
            Interaction.Input.bind("touchstart", touchStart)
        } else {
            _object.bind("touchstart", touchStart)
        }
        Interaction.Input.bind("touchmove", touchMove);
        Interaction.Input.bind("touchend", touchEnd)
    }

    function touchStart(e) {
        _this.touching = true;
        _this.velocity.clear();
        _hold.copyFrom(e);
        if (_this.onStart) {
            defer(function() {
                if (_this.onStart) {
                    _this.onStart(e)
                }
            })
        }
    }

    function touchMove(e) {
        if (!_this.touching) {
            return
        }
        _diff.subVectors(e, _hold);
        _delta = (Render.TIME - _lastTime) || 0.01;
        if (_delta >= 16) {
            _this.velocity.subVectors(e, _lastMove);
            _this.velocity.divide(_delta);
            _lastTime = Render.TIME;
            _lastMove.copyFrom(e)
        }
        if (_this.onUpdate) {
            defer(function() {
                if (_this.onUpdate) {
                    _this.onUpdate(_diff, e)
                }
            })
        }
    }

    function touchEnd(e) {
        if (!_this.touching) {
            return
        }
        _this.touching = false;
        if (_this.onEnd) {
            defer(function() {
                if (_this.onEnd) {
                    _this.onEnd(e)
                }
            })
        }
    }
    this.attach = function(object) {
        if (_object instanceof HydraObject) {
            _object.unbind("touchstart", touchStart)
        }
        _object = object;
        addListeners()
    };
    this.touchStart = function(e) {
        touchStart({
            x: Mouse.x,
            y: Mouse.y
        })
    };
    this.end = this.touchEnd = function() {
        touchEnd()
    };
    this.destroy = function() {
        Interaction.Input.unbind("touchmove", touchMove);
        Interaction.Input.unbind("touchstart", touchStart);
        Interaction.Input.unbind("touchend", touchEnd);
        _object && _object.unbind && _object.unbind("touchstart", touchStart);
        return this._destroy()
    }
}, function() {
    var _events = {
        touchstart: [],
        touchmove: [],
        touchend: []
    };
    var _bound;

    function bind() {
        _bound = true;
        __window.bind("touchstart", touchStart);
        __window.bind("touchmove", touchMove);
        __window.bind("touchend", touchEnd);
        __window.bind("touchcancel", touchEnd);
        __window.bind("contextmenu", touchEnd)
    }

    function touchMove(e) {
        _events.touchmove.forEach(function(callback) {
            callback(e)
        })
    }

    function touchStart(e) {
        _events.touchstart.forEach(function(callback) {
            callback(e)
        })
    }

    function touchEnd(e) {
        _events.touchend.forEach(function(callback) {
            callback(e)
        })
    }
    Interaction.Input.bind = function(evt, callback) {
        _events[evt].push(callback);
        if (!_bound) {
            bind()
        }
    };
    Interaction.Input.unbind = function(evt, callback) {
        _events[evt].findAndRemove(callback)
    }
});
Class(function ParticlePhysics(_integrator) {
    Inherit(this, Component);
    var _this = this;
    _integrator = _integrator || new EulerIntegrator();
    var _timestep = 1 / 60;
    var _time = 0;
    var _step = 0;
    var _clock = null;
    var _buffer = 0;
    var _toDelete = [];
    this.friction = 1;
    this.maxSteps = 1;
    this.emitters = new LinkedList();
    this.initializers = new LinkedList();
    this.behaviors = new LinkedList();
    this.particles = new LinkedList();
    this.springs = new LinkedList();

    function init(p) {
        var i = _this.initializers.start();
        while (i) {
            i(p);
            i = _this.initializers.next()
        }
    }

    function updateSprings(dt) {
        var s = _this.springs.start();
        while (s) {
            s.update(dt);
            s = _this.springs.next()
        }
    }

    function deleteParticles() {
        for (var i = _toDelete.length - 1; i > -1; i--) {
            var particle = _toDelete[i];
            _this.particles.remove(particle);
            particle.system = null
        }
        _toDelete.length = 0
    }

    function updateParticles(dt) {
        var index = 0;
        var p = _this.particles.start();
        while (p) {
            if (!p.disabled) {
                var b = _this.behaviors.start();
                while (b) {
                    b.applyBehavior(p, dt, index);
                    b = _this.behaviors.next()
                }
                if (p.behaviors.length) {
                    p.update(dt, index)
                }
            }
            index++;
            p = _this.particles.next()
        }
    }

    function integrate(dt) {
        updateParticles(dt);
        if (_this.springs.length) {
            updateSprings(dt)
        }
        if (!_this.skipIntegration) {
            _integrator.integrate(_this.particles, dt, _this.friction)
        }
    }
    this.addEmitter = function(emitter) {
        if (!(emitter instanceof Emitter)) {
            throw "Emitter must be Emitter"
        }
        this.emitters.push(emitter);
        emitter.parent = emitter.system = this
    };
    this.removeEmitter = function(emitter) {
        if (!(emitter instanceof Emitter)) {
            throw "Emitter must be Emitter"
        }
        this.emitters.remove(emitter);
        emitter.parent = emitter.system = null
    };
    this.addInitializer = function(init) {
        if (typeof init !== "function") {
            throw "Initializer must be a function"
        }
        this.initializers.push(init)
    };
    this.removeInitializer = function(init) {
        this.initializers.remove(init)
    };
    this.addBehavior = function(b) {
        this.behaviors.push(b);
        b.system = this
    };
    this.removeBehavior = function(b) {
        this.behaviors.remove(b)
    };
    this.addParticle = function(p) {
        if (!_integrator.type) {
            if (typeof p.pos.z === "number") {
                _integrator.type = "3D"
            } else {
                _integrator.type = "2D"
            }
        }
        p.system = this;
        this.particles.push(p);
        if (this.initializers.length) {
            init(p)
        }
    };
    this.removeParticle = function(p) {
        p.system = null;
        _toDelete.push(p)
    };
    this.addSpring = function(s) {
        s.system = this;
        this.springs.push(s)
    };
    this.removeSpring = function(s) {
        s.system = null;
        this.springs.remove(s)
    };
    this.update = function(force) {
        if (!_clock) {
            _clock = THREAD ? Date.now() : Render.TIME
        }
        var time = THREAD ? Date.now() : Render.TIME;
        var delta = time - _clock;
        if (!force && delta <= 0) {
            return
        }
        delta *= 0.001;
        _clock = time;
        _buffer += delta;
        if (!force) {
            var i = 0;
            while (_buffer >= _timestep && i++ < _this.maxSteps) {
                integrate(_timestep);
                _buffer -= _timestep;
                _time += _timestep
            }
        } else {
            integrate(0.016)
        }
        _step = Date.now() - time;
        if (_toDelete.length) {
            deleteParticles()
        }
    }
});
Class(function Particle(_pos, _mass, _radius) {
    var _this = this;
    var _vel, _acc, _old;
    var prototype = Particle.prototype;
    this.mass = _mass || 1;
    this.massInv = 1 / this.mass;
    this.radius = _radius || 1;
    this.radiusSq = this.radius * this.radius;
    this.behaviors = new LinkedList();
    this.fixed = false;
    (function() {
        initVectors()
    })();

    function initVectors() {
        var Vector = typeof _pos.z === "number" ? Vector3 : Vector2;
        _pos = _pos || new Vector();
        _vel = new Vector();
        _acc = new Vector();
        _old = {};
        _old.pos = new Vector();
        _old.acc = new Vector();
        _old.vel = new Vector();
        _old.pos.copyFrom(_pos);
        _this.pos = _this.position = _pos;
        _this.vel = _this.velocity = _vel;
        _this.acc = _this.acceleration = _acc;
        _this.old = _old
    }
    this.moveTo = function(pos) {
        _pos.copyFrom(pos);
        _old.pos.copyFrom(_pos);
        _acc.clear();
        _vel.clear()
    };
    if (typeof prototype.setMass !== "undefined") {
        return
    }
    prototype.setMass = function(mass) {
        this.mass = mass || 1;
        this.massInv = 1 / this.mass
    };
    prototype.setRadius = function(radius) {
        this.radius = radius;
        this.radiusSq = radius * radius
    };
    prototype.update = function(dt) {
        if (!this.behaviors.length) {
            return
        }
        var b = this.behaviors.start();
        while (b) {
            b.applyBehavior(this, dt);
            b = this.behaviors.next()
        }
    };
    prototype.applyForce = function(force) {
        this.acc.add(force)
    };
    prototype.addBehavior = function(behavior) {
        if (!behavior || typeof behavior.applyBehavior === "undefined") {
            throw "Behavior must have applyBehavior method"
        }
        this.behaviors.push(behavior)
    };
    prototype.removeBehavior = function(behavior) {
        if (!behavior || typeof behavior.applyBehavior === "undefined") {
            throw "Behavior must have applyBehavior method"
        }
        this.behaviors.remove(behavior)
    }
});
Class(function EulerIntegrator() {
    Inherit(this, Component);
    var _this = this;
    var _vel, _accel;
    this.useDeltaTime = false;
    (function() {})();

    function createVectors() {
        var Vector = _this.type == "3D" ? Vector3 : Vector2;
        _vel = new Vector();
        _accel = new Vector()
    }
    this.integrate = function(particles, dt, drag) {
        if (!_vel) {
            createVectors()
        }
        var dtSq = dt * dt;
        var p = particles.start();
        while (p) {
            if (!p.fixed && !p.disabled) {
                p.old.pos.copyFrom(p.pos);
                p.acc.multiply(p.massInv);
                _vel.copyFrom(p.vel);
                _accel.copyFrom(p.acc);
                if (this.useDeltaTime) {
                    p.pos.add(_vel.multiply(dt)).add(_accel.multiply(0.5 * dtSq));
                    p.vel.add(p.acc.multiply(dt))
                } else {
                    p.pos.add(_vel).add(_accel.multiply(0.5));
                    p.vel.add(p.acc)
                }
                if (drag) {
                    p.vel.multiply(drag)
                }
                p.acc.clear()
            }
            if (p.saveTo) {
                p.pos.copyTo(p.saveTo)
            }
            p = particles.next()
        }
    }
});
Class(function Force(_force) {
    Inherit(this, Component);
    var _this = this;
    this.force = _force;
    if (!_force) {
        throw "Force requires parameter Vector"
    }
    this.applyBehavior = function(p, dt) {
        p.acc.add(_force)
    }
});
Class(function Emitter(_position, _startNumber) {
    Inherit(this, Component);
    var _this = this;
    var _pool;
    var _total = 0;
    var Vector = _position.type == "vector3" ? Vector3 : Vector2;
    this.initializers = [];
    this.position = _position;
    this.autoEmit = 1;
    (function() {
        initObjectPool();
        if (_startNumber != 0) {
            addParticles(_startNumber || 100)
        }
    })();

    function initObjectPool() {
        _pool = _this.initClass(ObjectPool)
    }

    function addParticles(total) {
        _total += total;
        var particles = [];
        for (var i = 0; i < total; i++) {
            particles.push(new Particle())
        }
        _pool.insert(particles)
    }
    this.addInitializer = function(callback) {
        if (typeof callback !== "function") {
            throw "Initializer must be a function"
        }
        this.initializers.push(callback)
    };
    this.removeInitializer = function(callback) {
        var index = this.initializers.indexOf(callback);
        if (index > -1) {
            this.initializers.splice(index, 1)
        }
    };
    this.emit = function(num) {
        if (!this.parent) {
            throw "Emitter needs to be added to a System"
        }
        num = num || this.autoEmit;
        for (var i = 0; i < num; i++) {
            var p = _pool.get();
            if (!p) {
                return
            }
            p.moveTo(this.position);
            p.emitter = this;
            if (!p.system) {
                this.parent.addParticle(p)
            }
            for (var j = 0; j < this.initializers.length; j++) {
                this.initializers[j](p)
            }
        }
    };
    this.remove = function(particle) {
        _pool.put(particle);
        _this.parent.removeParticle(particle)
    };
    this.addToPool = function(particle) {
        _pool.put(particle)
    }
});
Class(function SplitTextfield() {
    var _style = {
        display: "block",
        position: "relative",
        padding: 0,
        margin: 0,
        cssFloat: "left",
        styleFloat: "left",
        width: "auto",
        height: "auto"
    };

    function splitLetter($obj) {
        var _array = [];
        var text = $obj.div.innerHTML;
        var split = text.split("");
        $obj.div.innerHTML = "";
        for (var i = 0; i < split.length; i++) {
            if (split[i] == " ") {
                split[i] = "&nbsp;"
            }
            var letter = $("t", "span");
            letter.html(split[i], true).css(_style);
            _array.push(letter);
            $obj.addChild(letter)
        }
        return _array
    }

    function splitWord($obj) {
        var _array = [];
        var text = $obj.div.innerHTML;
        var split = text.split(" ");
        $obj.empty();
        for (var i = 0; i < split.length; i++) {
            var word = $("t", "span");
            var empty = $("t", "span");
            word.html(split[i]).css(_style);
            empty.html("&nbsp", true).css(_style);
            _array.push(word);
            _array.push(empty);
            $obj.addChild(word);
            $obj.addChild(empty)
        }
        return _array
    }
    this.split = function($obj, by) {
        if (by == "word") {
            return splitWord($obj)
        } else {
            return splitLetter($obj)
        }
    }
}, "Static");
Class(function CSSAnimation() {
    Inherit(this, Component);
    var _this = this;
    var _name = "a" + Utils.timestamp();
    var _frames, _timer, _started;
    var _duration = 1000;
    var _ease = "linear";
    var _delay = 0;
    var _loop = false;
    var _count = 1;
    var _steps = null;
    var _applyTo = [];
    (function() {})();

    function complete() {
        _this.playing = false;
        if (_this.events) {
            _this.events.fire(HydraEvents.COMPLETE, null, true)
        }
    }

    function updateCSS() {
        var css = CSS._read();
        var id = "/*" + _name + "*/";
        var keyframe = "@" + Device.vendor + "keyframes " + _name + " {\n";
        var string = id + keyframe;
        if (css.strpos(_name)) {
            var split = css.split(id);
            css = css.replace(id + split[1] + id, "")
        }
        var steps = _frames.length - 1;
        var perc = Math.round(100 / steps);
        var total = 0;
        for (var i = 0; i < _frames.length; i++) {
            var frame = _frames[i];
            if (i == _frames.length - 1) {
                total = 100
            }
            string += (frame.percent || total) + "% {\n";
            var hasTransform = false;
            var transforms = {};
            var styles = {};
            for (var key in frame) {
                if (TweenManager.checkTransform(key)) {
                    transforms[key] = frame[key];
                    hasTransform = true
                } else {
                    styles[key] = frame[key]
                }
            }
            if (hasTransform) {
                string += Device.vendor + "transform: " + TweenManager.parseTransform(transforms) + ";"
            }
            for (key in styles) {
                var val = styles[key];
                if (typeof val !== "string" && key != "opacity" && key != "zIndex") {
                    val += "px"
                }
                string += CSS._toCSS(key) + ": " + val + ";"
            }
            string += "\n}\n";
            total += perc
        }
        string += "}" + id;
        css += string;
        CSS._write(css)
    }

    function destroy() {
        var css = CSS._read();
        var id = "/*" + _name + "*/";
        if (css.strpos(_name)) {
            var split = css.split(id);
            css = css.replace(id + split[1] + id, "")
        }
        CSS._write(css)
    }

    function applyTo(callback) {
        for (var i = _applyTo.length - 1; i > -1; i--) {
            callback(_applyTo[i])
        }
    }
    this.set("frames", function(frames) {
        _frames = frames;
        updateCSS()
    });
    this.set("steps", function(steps) {
        _steps = steps;
        if (_this.playing) {
            applyTo(function($obj) {
                $obj.div.style[CSS.prefix("AnimationTimingFunction")] = "steps(" + steps + ")"
            })
        }
    });
    this.set("duration", function(duration) {
        _duration = Math.round(duration);
        if (_this.playing) {
            applyTo(function($obj) {
                $obj.div.style[CSS.prefix("AnimationDuration")] = _this.duration + "ms"
            })
        }
    });
    this.get("duration", function() {
        return _duration
    });
    this.set("ease", function(ease) {
        _ease = ease;
        if (_this.playing) {
            applyTo(function($obj) {
                $obj.div.style[CSS.prefix("AnimationTimingFunction")] = TweenManager.getEase(_ease)
            })
        }
    });
    this.get("ease", function() {
        return _ease
    });
    this.set("loop", function(loop) {
        _loop = loop;
        if (_this.playing) {
            applyTo(function($obj) {
                $obj.div.style[CSS.prefix("AnimationIterationCount")] = _loop ? "infinite" : _count
            })
        }
    });
    this.get("loop", function() {
        return _loop
    });
    this.set("count", function(count) {
        _count = count;
        if (_this.playing) {
            applyTo(function($obj) {
                $obj.div.style[CSS.prefix("AnimationIterationCount")] = _loop ? "infinite" : _count
            })
        }
    });
    this.get("count", function() {
        return _count
    });
    this.set("delay", function(delay) {
        _delay = delay;
        if (_this.playing) {
            applyTo(function($obj) {
                $obj.div.style[CSS.prefix("AnimationDelay")] = _delay + "ms"
            })
        }
    });
    this.get("delay", function() {
        return _delay
    });
    this.play = function() {
        applyTo(function($obj) {
            defer(function() {
                $obj.div.style[CSS.prefix("Animation")] = _name + " " + _this.duration + "ms " + (_steps ? "steps(" + _steps + ")" : TweenManager.getEase(_ease)) + " " + (_loop ? "infinite" : _count);
                $obj.div.style[CSS.prefix("AnimationPlayState")] = "running"
            })
        });
        _this.playing = true;
        clearTimeout(_timer);
        if (!_this.loop) {
            _started = Date.now();
            _timer = _this.delayedCall(complete, _count * _duration)
        }
    };
    this.pause = function() {
        _this.playing = false;
        clearTimeout(_timer);
        applyTo(function($obj) {
            $obj.div.style[CSS.prefix("AnimationPlayState")] = "paused"
        })
    };
    this.stop = function() {
        _this.playing = false;
        clearTimeout(_timer);
        applyTo(function($obj) {
            $obj.div.style[CSS.prefix("AnimationName")] = ""
        })
    };
    this.applyTo = function($obj) {
        _applyTo.push($obj);
        if (_this.playing) {
            defer(function() {
                $obj.div.style[CSS.prefix("Animation")] = _name + " " + _this.duration + "ms " + (_steps ? "steps(" + _steps + ")" : TweenManager.getEase(_ease)) + " " + (_loop ? "infinite" : _count);
                $obj.div.style[CSS.prefix("AnimationPlayState")] = "running"
            })
        }
    };
    this.remove = function($obj) {
        $obj.div.style[CSS.prefix("AnimationName")] = "";
        var i = _applyTo.indexOf($obj);
        if (i > -1) {
            _applyTo.splice(i, 1)
        }
    };
    this.destroy = function() {
        this.stop();
        _frames = null;
        destroy();
        return this._destroy()
    }
});
Class(function Canvas(_width, _height, _retina) {
    Inherit(this, Component);
    var _this = this;
    var _interactive, _over, _down, _local, _imgData;
    this.children = [];
    this.offset = {
        x: 0,
        y: 0
    };
    this.retina = _retina;
    (function() {
        if (_retina instanceof HydraObject) {
            initAsBackground(_retina)
        } else {
            initAsElement()
        }
        _this.width = _width;
        _this.height = _height;
        _this.context._matrix = new Matrix2();
        resize(_width, _height, _retina)
    })();

    function initAsBackground() {
        var id = "c" + Utils.timestamp();
        _this.context = document.getCSSCanvasContext("2d", id, _width, _height);
        _this.background = "-" + Device.styles.vendor.toLowerCase() + "-canvas(" + id + ")";
        _retina.css({
            backgroundImage: _this.background
        });
        _retina = null
    }

    function initAsElement() {
        _this.div = document.createElement("canvas");
        _this.context = _this.div.getContext("2d");
        _this.object = $(_this.div)
    }

    function resize(w, h, retina) {
        var ratio = retina && Device.system.retina ? 2 : 1;
        if (_this.div) {
            _this.div.width = w * ratio;
            _this.div.height = h * ratio
        }
        _this.width = w;
        _this.height = h;
        _this.scale = ratio;
        if (_this.object) {
            _this.object.size(_this.width, _this.height)
        }
        if (Device.system.retina && retina) {
            _this.context.scale(ratio, ratio);
            _this.div.style.width = w + "px";
            _this.div.style.height = h + "px"
        }
    }

    function findHit(e) {
        e = Utils.touchEvent(e);
        e.x -= _this.offset.x;
        e.y -= _this.offset.y;
        e.width = 1;
        e.height = 1;
        for (var i = _this.children.length - 1; i > -1; i--) {
            var hit = _this.children[i].hit(e);
            if (hit) {
                return hit
            }
        }
        return false
    }

    function touchStart(e) {
        var hit = findHit(e);
        if (!hit) {
            return _this.interacting = false
        }
        _this.interacting = true;
        _down = hit;
        if (Device.mobile) {
            hit.events.fire(HydraEvents.HOVER, {
                action: "over"
            }, true);
            hit.__time = Date.now()
        }
    }

    function touchMove(e) {
        var hit = findHit(e);
        if (hit) {
            _this.interacting = true
        } else {
            _this.interacting = false
        }
        if (!Device.mobile) {
            if (hit && _over) {
                if (hit != _over) {
                    _over.events.fire(HydraEvents.HOVER, {
                        action: "out"
                    }, true);
                    hit.events.fire(HydraEvents.HOVER, {
                        action: "over"
                    }, true);
                    _over = hit
                }
            } else {
                if (hit && !_over) {
                    _over = hit;
                    hit.events.fire(HydraEvents.HOVER, {
                        action: "over"
                    }, true)
                } else {
                    if (!hit && _over) {
                        if (_over) {
                            _over.events.fire(HydraEvents.HOVER, {
                                action: "out"
                            }, true)
                        }
                        _over = null
                    }
                }
            }
        }
    }

    function touchEnd(e) {
        var hit = findHit(e);
        if (hit) {
            _this.interacting = true
        } else {
            _this.interacting = false
        }
        if (!_down && !hit) {
            return
        }
        if (!Device.mobile) {
            if (hit && hit == _down) {
                hit.events.fire(HydraEvents.CLICK, {
                    action: "click"
                }, true)
            }
        } else {
            if (_down) {
                _down.events.fire(HydraEvents.HOVER, {
                    action: "out"
                }, true)
            }
            if (hit == _down) {
                if (Date.now() - _down.__time < 750) {
                    hit.events.fire(HydraEvents.CLICK, {
                        action: "click"
                    }, true)
                }
            }
        }
        _down = null
    }
    this.set("interactive", function(val) {
        if (!_interactive && val) {
            Stage.bind("touchstart", touchStart);
            Stage.bind("touchmove", touchMove);
            Stage.bind("touchend", touchEnd)
        } else {
            if (_interactive && !val) {
                Stage.unbind("touchstart", touchStart);
                Stage.unbind("touchmove", touchMove);
                Stage.unbind("touchend", touchEnd)
            }
        }
        _interactive = val
    });
    this.get("interactive", function() {
        return _interactive
    });
    this.toDataURL = function(type, quality) {
        return _this.div.toDataURL(type, quality)
    };
    this.sort = function() {
        _objects.sort(function(a, b) {
            return a.z - b.z
        })
    };
    this.render = function(noClear) {
        if (!(typeof noClear === "boolean" && noClear)) {
            _this.clear()
        }
        var len = _this.children.length;
        for (var i = 0; i < len; i++) {
            _this.children[i].render()
        }
    };
    this.clear = function() {
        _this.context.clearRect(0, 0, _this.div.width, _this.div.height)
    };
    this.add = function(display) {
        display.setCanvas(this);
        display._parent = this;
        this.children.push(display);
        display._z = this.children.length
    };
    this.remove = function(display) {
        display._canvas = null;
        display._parent = null;
        var i = this.children.indexOf(display);
        if (i > -1) {
            this.children.splice(i, 1)
        }
    };
    this.destroy = function() {
        if (_interactive) {
            Stage.unbind("touchstart", touchStart);
            Stage.unbind("touchmove", touchMove);
            Stage.unbind("touchend", touchEnd)
        }
        this.stopRender();
        for (var i = 0; i < this.children.length; i++) {
            if (this.children[i].destroy) {
                this.children[i].destroy()
            }
        }
        return this._destroy()
    };
    this.startRender = function() {
        Render.startRender(_this.render)
    };
    this.stopRender = function() {
        Render.stopRender(_this.render)
    };
    this.getImageData = function(x, y, w, h) {
        this.imageData = this.context.getImageData(x || 0, y || 0, w || this.width, h || this.height);
        return this.imageData
    };
    this.getPixel = function(x, y, dirty) {
        if (!this.imageData || dirty) {
            _this.getImageData(0, 0, _this.width, _this.height)
        }
        if (!_imgData) {
            _imgData = {}
        }
        var index = (x + y * _this.width) * 4;
        var pixels = this.imageData.data;
        _imgData.r = pixels[index];
        _imgData.g = pixels[index + 1];
        _imgData.b = pixels[index + 2];
        _imgData.a = pixels[index + 3];
        return _imgData
    };
    this.texture = function(src) {
        var img = new Image();
        img.src = src;
        return img
    };
    this.localizeMouse = function() {
        _local = _local || {};
        _local.x = Mouse.x - _this.offset.x;
        _local.y = Mouse.y - _this.offset.y;
        return _local
    };
    this.size = resize
});
Class(function CanvasTexture(_texture, _w, _h, _force) {
    Inherit(this, CanvasObject);
    var _this = this;
    var _mask;
    this.width = _w || 0;
    this.height = _h || 0;
    (function() {
        initTexture()
    })();

    function initTexture() {
        if (typeof _texture === "string") {
            _texture = CanvasTexture.createImage(_texture, _force);
            if (_texture.width > 0) {
                setDimensions()
            } else {
                _texture.onload = setDimensions
            }
        } else {
            setDimensions()
        }
        _this.texture = _texture
    }

    function setDimensions() {
        if (_this.onload) {
            _this.onload()
        }
        if (!_this.width && !_this.height) {
            _this.width = _texture.width / (_this._canvas && _this._canvas.retina ? 2 : 1);
            _this.height = _texture.height / (_this._canvas && _this._canvas.retina ? 2 : 1)
        }
    }
    this.set("texture", function(img) {
        _texture = img
    });
    this.draw = function(override) {
        var context = this._canvas.context;
        if (this.isMask() && !override) {
            return false
        }
        if (_texture) {
            this.startDraw(this.anchor.tx, this.anchor.ty, override);
            context.drawImage(_texture, -this.anchor.tx, -this.anchor.ty, this.width, this.height);
            this.endDraw()
        }
        if (_mask) {
            context.globalCompositeOperation = "source-in";
            _mask.render(true);
            context.globalCompositeOperation = "source-over"
        }
    };
    this.mask = function(object) {
        if (!object) {
            return _mask = null
        }
        if (!this._parent) {
            throw "CanvasTexture :: Must add to parent before masking."
        }
        var siblings = this._parent.children;
        var canMask = false;
        for (var i = 0; i < siblings.length; i++) {
            if (object == siblings[i]) {
                canMask = true
            }
        }
        if (canMask) {
            _mask = object;
            object.masked = this
        } else {
            throw "CanvasGraphics :: Can only mask a sibling"
        }
    }
}, function() {
    var _images = {};
    CanvasTexture.createImage = function(src, force) {
        if (!_images[src] || force) {
            var img = Images.createImg(src);
            if (force) {
                return img
            }
            _images[src] = img
        }
        return _images[src]
    }
});
Class(function CanvasGraphics(_w, _h) {
    Inherit(this, CanvasObject);
    var _this = this;
    var _props = {};
    var _draw = [];
    var _pool, _mask;
    this.width = _w || 0;
    this.height = _h || 0;
    (function() {
        initArrayPool()
    })();

    function setProperties(context) {
        for (var key in _props) {
            var val = _props[key];
            if (val instanceof Color) {
                context[key] = val.getHexString()
            } else {
                context[key] = val
            }
        }
    }

    function initArrayPool() {
        _pool = new ObjectPool(Array, 25)
    }

    function draw() {
        var array = _pool.get() || [];
        for (var i = 0; i < arguments.length; i++) {
            array[i] = arguments[i]
        }
        _draw.push(array)
    }
    this.set("strokeStyle", function(val) {
        _props.strokeStyle = val
    });
    this.get("strokeStyle", function() {
        return _props.strokeStyle
    });
    this.set("fillStyle", function(val) {
        _props.fillStyle = val
    });
    this.get("fillStyle", function() {
        return _props.fillStyle
    });
    this.set("lineWidth", function(val) {
        _props.lineWidth = val
    });
    this.get("lineWidth", function() {
        return _props.lineWidth
    });
    this.set("lineWidth", function(val) {
        _props.lineWidth = val
    });
    this.get("lineWidth", function() {
        return _props.lineWidth
    });
    this.set("lineCap", function(val) {
        _props.lineCap = val
    });
    this.get("lineCap", function() {
        return _props.lineCap
    });
    this.set("lineDashOffset", function(val) {
        _props.lineDashOffset = val
    });
    this.get("lineDashOffset", function() {
        return _props.lineDashOffset
    });
    this.set("lineJoin", function(val) {
        _props.lineJoin = val
    });
    this.get("lineJoin", function() {
        return _props.lineJoin
    });
    this.set("lineJoin", function(val) {
        _props.lineJoin = val
    });
    this.get("lineJoin", function() {
        return _props.lineJoin
    });
    this.set("lineJoin", function(val) {
        _props.lineJoin = val
    });
    this.get("lineJoin", function() {
        return _props.lineJoin
    });
    this.set("miterLimit", function(val) {
        _props.miterLimit = val
    });
    this.get("miterLimit", function() {
        return _props.miterLimit
    });
    this.set("font", function(val) {
        _props.font = val
    });
    this.get("font", function(val) {
        return _props.font
    });
    this.set("textAlign", function(val) {
        _props.textAlign = val
    });
    this.get("textAlign", function(val) {
        return _props.textAlign
    });
    this.set("textBaseline", function(val) {
        _props.textBaseline = val
    });
    this.get("textBaseline", function(val) {
        return _props.textBaseline
    });
    this.draw = function(override) {
        if (this.isMask() && !override) {
            return false
        }
        var context = this._canvas.context;
        this.startDraw(-this.anchor.tx, -this.anchor.ty);
        setProperties(context);
        for (var i = 0; i < _draw.length; i++) {
            var cmd = _draw[i];
            if (!cmd) {
                continue
            }
            var fn = cmd.shift();
            context[fn].apply(context, cmd);
            cmd.unshift(fn)
        }
        this.endDraw();
        if (_mask) {
            context.save();
            context.clip();
            _mask.render(true);
            context.restore()
        }
    };
    this.clear = function() {
        for (var i = 0; i < _draw.length; i++) {
            _draw[i].length = 0;
            _pool.put(_draw[i])
        }
        _draw.length = 0
    };
    this.arc = function(x, y, endAngle, radius, startAngle, anti) {
        if (x && !y) {
            endAngle = x;
            x = 0;
            y = 0
        }
        x = x || 0;
        y = y || 0;
        endAngle = endAngle || 0;
        endAngle -= 90;
        anti = anti || false;
        startAngle = startAngle || 0;
        startAngle -= 90;
        radius = radius ? radius : this.radius || this.width / 2;
        draw("beginPath");
        draw("arc", x, y, radius, Utils.toRadians(startAngle), Utils.toRadians(endAngle), anti)
    };
    this.quadraticCurveTo = function(cpx, cpy, x, y) {
        draw("quadraticCurveTo", cpx, cpy, x, y)
    };
    this.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {
        draw("bezierCurveTo", cp1x, cp1y, cp2x, cp2y, x, y)
    };
    this.fillRect = function(x, y, w, h) {
        draw("fillRect", x, y, w, h)
    };
    this.clearRect = function(x, y, w, h) {
        draw("clearRect", x, y, w, h)
    };
    this.strokeRect = function(x, y, w, h) {
        draw("strokeRect", x, y, w, h)
    };
    this.moveTo = function(x, y) {
        draw("moveTo", x, y)
    };
    this.lineTo = function(x, y) {
        draw("lineTo", x, y)
    };
    this.stroke = function() {
        draw("stroke")
    };
    this.fill = function() {
        if (!_mask) {
            draw("fill")
        }
    };
    this.beginPath = function() {
        draw("beginPath")
    };
    this.closePath = function() {
        draw("closePath")
    };
    this.fillText = function(text, x, y) {
        draw("fillText", text, x, y)
    };
    this.strokeText = function(text, x, y) {
        draw("strokeText", text, x, y)
    };
    this.setLineDash = function(value) {
        draw("setLineDash", value)
    };
    this.mask = function(object) {
        if (!object) {
            return _mask = null
        }
        if (!this._parent) {
            throw "CanvasTexture :: Must add to parent before masking."
        }
        var siblings = this._parent.children;
        var canMask = false;
        for (var i = 0; i < siblings.length; i++) {
            if (object == siblings[i]) {
                canMask = true
            }
        }
        if (canMask) {
            _mask = object;
            object.masked = this;
            for (i = 0; i < _draw.length; i++) {
                if (_draw[i][0] == "fill" || _draw[i][0] == "stroke") {
                    _draw[i].length = 0;
                    _pool.put(_draw[i]);
                    _draw.splice(i, 1)
                }
            }
        } else {
            throw "CanvasGraphics :: Can only mask a sibling"
        }
    }
});
Class(function CanvasObject() {
    Inherit(this, Component);
    var _this = this;
    this.alpha = 1;
    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
    this.rotation = 0;
    this.scale = 1;
    this.visible = true;
    this.anchor = {
        x: 0.5,
        y: 0.5
    };
    this.values = new CanvasValues();
    this.styles = new CanvasValues(true);
    this.children = [];
    this.blendMode = "normal";
    this.updateValues = function() {
        this.anchor.tx = this.anchor.x <= 1 && !this.anchor.full ? this.anchor.x * this.width : this.anchor.x;
        this.anchor.ty = this.anchor.y <= 1 && !this.anchor.full ? this.anchor.y * this.height : this.anchor.y;
        this.values.setTRSA(this.x, this.y, Utils.toRadians(this.rotation), this.scaleX || this.scale, this.scaleY || this.scale, this.alpha);
        if (this._parent.values) {
            this.values.calculate(this._parent.values)
        }
        if (this._parent.styles) {
            this.styles.calculateStyle(this._parent.styles)
        }
    };
    this.render = function(override) {
        if (!this.visible) {
            return false
        }
        this.updateValues();
        if (this.draw) {
            this.draw(override)
        }
        var len = this.children.length;
        for (var i = 0; i < len; i++) {
            this.children[i].render(override)
        }
    };
    this.startDraw = function(ox, oy, override) {
        var context = this._canvas.context;
        var v = this.values.data;
        var x = v[0] + (ox || 0);
        var y = v[1] + (oy || 0);
        if (this.styles.styled) {
            context.save()
        }
        context._matrix.setTRS(x, y, v[2], v[3], v[4]);
        if (!override) {
            context.globalCompositeOperation = this.blendMode || "normal"
        }
        var m = context._matrix.data;
        context.transform(m[0], m[3], m[1], m[4], m[2], m[5]);
        context.globalAlpha = v[5];
        if (this.styles.styled) {
            var values = this.styles.values;
            for (var key in values) {
                var val = values[key];
                if (val instanceof Color) {
                    context[key] = val.getHexString()
                } else {
                    context[key] = val
                }
            }
        }
    };
    this.endDraw = function() {
        var context = this._canvas.context;
        context._matrix.inverse();
        var m = context._matrix.data;
        if (this.styles.styled) {
            context.restore()
        } else {
            context.transform(m[0], m[3], m[1], m[4], m[2], m[5])
        }
    };
    this.add = function(display) {
        display._canvas = this._canvas;
        display._parent = this;
        this.children.push(display);
        display._z = this.children.length
    };
    this.setCanvas = function(canvas) {
        this._canvas = canvas;
        for (var i = this.children.length - 1; i > -1; i--) {
            var child = this.children[i];
            child.setCanvas(canvas)
        }
    };
    this.remove = function(display) {
        display._canvas = null;
        display._parent = null;
        var i = this.children.indexOf(display);
        if (i > -1) {
            this.children.splice(i, 1)
        }
    };
    this.isMask = function() {
        var obj = this;
        while (obj) {
            if (obj.masked) {
                return true
            }
            obj = obj._parent
        }
        return false
    };
    this.unmask = function() {
        this.masked.mask(null);
        this.masked = null
    };
    this.setZ = function(z) {
        if (!this._parent) {
            throw "CanvasObject :: Must add to parent before setZ"
        }
        this._z = z;
        this._parent.children.sort(function(a, b) {
            return a._z - b._z
        })
    };
    this.hit = function(e) {
        if (!this.ignoreHit) {
            var hit = Utils.hitTestObject(e, this.values.hit(this));
            if (hit) {
                return this
            }
        }
        for (var i = this.children.length - 1; i > -1; i--) {
            var child = this.children[i];
            hit = child.hit(e);
            if (hit) {
                return child
            }
        }
        return false
    };
    this.destroy = function() {
        for (var i = 0; i < this.children.length; i++) {
            if (this.children[i].destroy) {
                this.children[i].destroy()
            }
        }
        return Utils.nullObject(this)
    }
});
Class(function CanvasValues(_style) {
    Inherit(this, Component);
    var _this = this;
    var _styles = {};
    var _hit = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
    };
    if (!_style) {
        this.data = new Float32Array(6)
    } else {
        this.styled = false
    }
    this.set("shadowOffsetX", function(val) {
        _this.styled = true;
        _styles.shadowOffsetX = val
    });
    this.get("shadowOffsetX", function() {
        return _styles.shadowOffsetX
    });
    this.set("shadowOffsetY", function(val) {
        _this.styled = true;
        _styles.shadowOffsetY = val
    });
    this.get("shadowOffsetY", function() {
        return _styles.shadowOffsetY
    });
    this.set("shadowBlur", function(val) {
        _this.styled = true;
        _styles.shadowBlur = val
    });
    this.get("shadowBlur", function() {
        return _styles.shadowBlur
    });
    this.set("shadowColor", function(val) {
        _this.styled = true;
        _styles.shadowColor = val
    });
    this.get("shadowColor", function() {
        _this.styled = true;
        return _styles.shadowColor
    });
    this.get("values", function() {
        return _styles
    });
    this.setTRSA = function(x, y, r, sx, sy, a) {
        var m = this.data;
        m[0] = x;
        m[1] = y;
        m[2] = r;
        m[3] = sx;
        m[4] = sy;
        m[5] = a
    };
    this.calculate = function(values) {
        var v = values.data;
        var m = this.data;
        m[0] = m[0] + v[0];
        m[1] = m[1] + v[1];
        m[2] = m[2] + v[2];
        m[3] = m[3] * v[3];
        m[4] = m[4] * v[4];
        m[5] = m[5] * v[5]
    };
    this.calculateStyle = function(parent) {
        if (!parent.styled) {
            return false
        }
        this.styled = true;
        var values = parent.values;
        for (var key in values) {
            if (!_styles[key]) {
                _styles[key] = values[key]
            }
        }
    };
    this.hit = function(object) {
        _hit.x = this.data[0];
        _hit.y = this.data[1];
        _hit.width = object.width;
        _hit.height = object.height;
        return _hit
    }
});
Class(function TweenManager() {
    Namespace(this);
    var _this = this;
    var _tweens = [];
    (function() {
        if (window.Hydra) {
            Hydra.ready(initPools)
        }
        if (window.Render) {
            Render.startRender(updateTweens)
        }
    })();

    function initPools() {
        _this._dynamicPool = new ObjectPool(DynamicObject, 100);
        _this._arrayPool = new ObjectPool(Array, 100);
        _this._dynamicPool.debug = true
    }

    function updateTweens(time) {
        for (var i = 0; i < _tweens.length; i++) {
            _tweens[i].update(time)
        }
    }

    function stringToValues(str) {
        var values = str.split("(")[1].slice(0, -1).split(",");
        for (var i = 0; i < values.length; i++) {
            values[i] = parseFloat(values[i])
        }
        return values
    }

    function findEase(name) {
        var eases = _this.CSSEases;
        for (var i = eases.length - 1; i > -1; i--) {
            if (eases[i].name == name) {
                return eases[i]
            }
        }
        return false
    }
    this._addMathTween = function(tween) {
        _tweens.push(tween)
    };
    this._removeMathTween = function(tween) {
        _tweens.findAndRemove(tween)
    };
    this._detectTween = function(object, props, time, ease, delay, callback) {
        if (ease === "spring") {
            return new SpringTween(object, props, time, ease, delay, callback)
        }
        if (!_this.useCSSTrans(props, ease, object)) {
            return new FrameTween(object, props, time, ease, delay, callback)
        } else {
            if (Device.tween.webAnimation) {
                return new CSSWebAnimation(object, props, time, ease, delay, callback)
            } else {
                return new CSSTransition(object, props, time, ease, delay, callback)
            }
        }
    };
    this.tween = function(obj, props, time, ease, delay, complete, update, manual) {
        if (typeof delay !== "number") {
            update = complete;
            complete = delay;
            delay = 0
        }
        if (ease === "spring") {
            return new SpringTween(obj, props, time, ease, delay, update, complete)
        } else {
            return new MathTween(obj, props, time, ease, delay, update, complete, manual)
        }
    };
    this.iterate = function(array, props, time, ease, offset, delay, callback) {
        if (typeof delay !== "number") {
            callback = delay;
            delay = 0
        }
        props = new DynamicObject(props);
        if (!array.length) {
            throw "TweenManager.iterate :: array is empty"
        }
        var len = array.length;
        for (var i = 0; i < len; i++) {
            var obj = array[i];
            var complete = i == len - 1 ? callback : null;
            obj.tween(props.copy(), time, ease, delay + (offset * i), complete)
        }
    };
    this.clearTween = function(obj) {
        if (obj._mathTween && obj._mathTween.stop) {
            obj._mathTween.stop()
        }
        if (obj._mathTweens) {
            var tweens = obj._mathTweens;
            for (var i = 0; i < tweens.length; i++) {
                var tw = tweens[i];
                if (tw && tw.stop) {
                    tw.stop()
                }
            }
            obj._mathTweens = null
        }
    };
    this.clearCSSTween = function(obj) {
        if (obj && !obj._cssTween && obj.div._transition && !obj.persistTween) {
            obj.div.style[Device.styles.vendorTransition] = "";
            obj.div._transition = false;
            obj._cssTween = null
        }
    };
    this.checkTransform = function(key) {
        var index = _this.Transforms.indexOf(key);
        return index > -1
    };
    this.addCustomEase = function(ease) {
        var add = true;
        if (typeof ease !== "object" || !ease.name || !ease.curve) {
            throw "TweenManager :: addCustomEase requires {name, curve}"
        }
        for (var i = _this.CSSEases.length - 1; i > -1; i--) {
            if (ease.name == _this.CSSEases[i].name) {
                add = false
            }
        }
        if (add) {
            if (ease.curve.charAt(0).toLowerCase() == "m") {
                ease.path = new EasingPath(ease.curve)
            } else {
                ease.values = stringToValues(ease.curve)
            }
            _this.CSSEases.push(ease)
        }
        return ease
    };
    this.getEase = function(name, values) {
        if (Array.isArray(name)) {
            var c1 = findEase(name[0]);
            var c2 = findEase(name[1]);
            if (!c1 || !c2) {
                throw "Multi-ease tween missing values " + JSON.stringify(name)
            }
            if (!c1.values) {
                c1.values = stringToValues(c1.curve)
            }
            if (!c2.values) {
                c2.values = stringToValues(c2.curve)
            }
            if (values) {
                return [c1.values[0], c1.values[1], c2.values[2], c2.values[3]]
            }
            return "cubic-bezier(" + c1.values[0] + "," + c1.values[1] + "," + c2.values[2] + "," + c2.values[3] + ")"
        } else {
            var ease = findEase(name);
            if (!ease) {
                return false
            }
            if (values) {
                return ease.path ? ease.path.solve : ease.values
            } else {
                return ease.curve
            }
        }
    };
    this.inspectEase = function(name) {
        return findEase(name)
    };
    this.getAllTransforms = function(object) {
        var obj = {};
        for (var i = _this.Transforms.length - 1; i > -1; i--) {
            var tf = _this.Transforms[i];
            var val = object[tf];
            if (val !== 0 && typeof val === "number") {
                obj[tf] = val
            }
        }
        return obj
    };
    this.parseTransform = function(props) {
        var transforms = "";
        var translate = "";
        if (props.perspective > 0) {
            transforms += "perspective(" + props.perspective + "px)"
        }
        if (typeof props.x !== "undefined" || typeof props.y !== "undefined" || typeof props.z !== "undefined") {
            var x = (props.x || 0);
            var y = (props.y || 0);
            var z = (props.z || 0);
            translate += x + "px, ";
            translate += y + "px";
            if (Device.tween.css3d) {
                translate += ", " + z + "px";
                transforms += "translate3d(" + translate + ")"
            } else {
                transforms += "translate(" + translate + ")"
            }
        }
        if (typeof props.scale !== "undefined") {
            transforms += "scale(" + props.scale + ")"
        } else {
            if (typeof props.scaleX !== "undefined") {
                transforms += "scaleX(" + props.scaleX + ")"
            }
            if (typeof props.scaleY !== "undefined") {
                transforms += "scaleY(" + props.scaleY + ")"
            }
        }
        if (typeof props.rotation !== "undefined") {
            transforms += "rotate(" + props.rotation + "deg)"
        }
        if (typeof props.rotationX !== "undefined") {
            transforms += "rotateX(" + props.rotationX + "deg)"
        }
        if (typeof props.rotationY !== "undefined") {
            transforms += "rotateY(" + props.rotationY + "deg)"
        }
        if (typeof props.rotationZ !== "undefined") {
            transforms += "rotateZ(" + props.rotationZ + "deg)"
        }
        if (typeof props.skewX !== "undefined") {
            transforms += "skewX(" + props.skewX + "deg)"
        }
        if (typeof props.skewY !== "undefined") {
            transforms += "skewY(" + props.skewY + "deg)"
        }
        return transforms
    };
    this.interpolate = function(num, alpha, ease) {
        var fn = _this.Interpolation.convertEase(ease);
        return num * (typeof fn == "function" ? fn(alpha) : _this.Interpolation.solve(fn, alpha))
    };
    this.interpolateValues = function(start, end, alpha, ease) {
        var fn = _this.Interpolation.convertEase(ease);
        return start + (end - start) * (typeof fn == "function" ? fn(alpha) : _this.Interpolation.solve(fn, alpha))
    }
}, "Static");
(function() {
    TweenManager.Transforms = ["scale", "scaleX", "scaleY", "x", "y", "z", "rotation", "rotationX", "rotationY", "rotationZ", "skewX", "skewY", "perspective", ];
    TweenManager.CSSEases = [{
        name: "easeOutCubic",
        curve: "cubic-bezier(0.215, 0.610, 0.355, 1.000)"
    }, {
        name: "easeOutQuad",
        curve: "cubic-bezier(0.250, 0.460, 0.450, 0.940)"
    }, {
        name: "easeOutQuart",
        curve: "cubic-bezier(0.165, 0.840, 0.440, 1.000)"
    }, {
        name: "easeOutQuint",
        curve: "cubic-bezier(0.230, 1.000, 0.320, 1.000)"
    }, {
        name: "easeOutSine",
        curve: "cubic-bezier(0.390, 0.575, 0.565, 1.000)"
    }, {
        name: "easeOutExpo",
        curve: "cubic-bezier(0.190, 1.000, 0.220, 1.000)"
    }, {
        name: "easeOutCirc",
        curve: "cubic-bezier(0.075, 0.820, 0.165, 1.000)"
    }, {
        name: "easeOutBack",
        curve: "cubic-bezier(0.175, 0.885, 0.320, 1.275)"
    }, {
        name: "easeInCubic",
        curve: "cubic-bezier(0.550, 0.055, 0.675, 0.190)"
    }, {
        name: "easeInQuad",
        curve: "cubic-bezier(0.550, 0.085, 0.680, 0.530)"
    }, {
        name: "easeInQuart",
        curve: "cubic-bezier(0.895, 0.030, 0.685, 0.220)"
    }, {
        name: "easeInQuint",
        curve: "cubic-bezier(0.755, 0.050, 0.855, 0.060)"
    }, {
        name: "easeInSine",
        curve: "cubic-bezier(0.470, 0.000, 0.745, 0.715)"
    }, {
        name: "easeInCirc",
        curve: "cubic-bezier(0.600, 0.040, 0.980, 0.335)"
    }, {
        name: "easeInBack",
        curve: "cubic-bezier(0.600, -0.280, 0.735, 0.045)"
    }, {
        name: "easeInOutCubic",
        curve: "cubic-bezier(0.645, 0.045, 0.355, 1.000)"
    }, {
        name: "easeInOutQuad",
        curve: "cubic-bezier(0.455, 0.030, 0.515, 0.955)"
    }, {
        name: "easeInOutQuart",
        curve: "cubic-bezier(0.770, 0.000, 0.175, 1.000)"
    }, {
        name: "easeInOutQuint",
        curve: "cubic-bezier(0.860, 0.000, 0.070, 1.000)"
    }, {
        name: "easeInOutSine",
        curve: "cubic-bezier(0.445, 0.050, 0.550, 0.950)"
    }, {
        name: "easeInOutExpo",
        curve: "cubic-bezier(1.000, 0.000, 0.000, 1.000)"
    }, {
        name: "easeInOutCirc",
        curve: "cubic-bezier(0.785, 0.135, 0.150, 0.860)"
    }, {
        name: "easeInOutBack",
        curve: "cubic-bezier(0.680, -0.550, 0.265, 1.550)"
    }, {
        name: "easeInOut",
        curve: "cubic-bezier(.42,0,.58,1)"
    }, {
        name: "linear",
        curve: "linear"
    }];
    TweenManager.useCSSTrans = function(props, ease, object) {
        if (props.math) {
            return false
        }
        if (typeof ease === "string" && (ease.strpos("Elastic") || ease.strpos("Bounce"))) {
            return false
        }
        if (object.multiTween || TweenManager.inspectEase(ease).path) {
            return false
        }
        if (!Device.tween.transition) {
            return false
        }
        return true
    }
})();
Class(function CSSTransition(_object, _props, _time, _ease, _delay, _callback) {
    var _this = this;
    var _transformProps, _transitionProps, _stack, _totalStacks;
    var _startTransform, _startProps;
    this.playing = true;
    (function() {
        if (typeof _time !== "number") {
            throw "CSSTween Requires object, props, time, ease"
        }
        initProperties();
        if (typeof _ease == "object" && !Array.isArray(_ease)) {
            initStack()
        } else {
            initCSSTween()
        }
    })();

    function killed() {
        return !_this || _this.kill || !_object || !_object.div
    }

    function initProperties() {
        var transform = TweenManager.getAllTransforms(_object);
        var properties = [];
        for (var key in _props) {
            if (TweenManager.checkTransform(key)) {
                transform.use = true;
                transform[key] = _props[key];
                delete _props[key]
            } else {
                if (typeof _props[key] === "number" || key.strpos("-")) {
                    properties.push(key)
                }
            }
        }
        if (transform.use) {
            properties.push(Device.transformProperty)
        }
        delete transform.use;
        _transformProps = transform;
        _transitionProps = properties
    }

    function initStack() {
        initStart();
        var prevTime = 0;
        var interpolate = function(start, end, alpha, ease, prev, ke) {
            var last = prev[key];
            if (last) {
                start += last
            }
            return TweenManager.interpolateValues(start, end, alpha, ease)
        };
        _stack = [];
        _totalStacks = 0;
        for (var p in _ease) {
            var perc = p.strpos("%") ? Number(p.replace("%", "")) / 100 : ((Number(p) + 1) / _ease.length);
            if (isNaN(perc)) {
                continue
            }
            var ease = _ease[p];
            _totalStacks++;
            var transform = {};
            var props = {};
            var last = _stack[_stack.length - 1];
            var pr = last ? last.props : {};
            var zeroOut = !last;
            for (var key in _transformProps) {
                if (!_startTransform[key]) {
                    _startTransform[key] = key.strpos("scale") ? 1 : 0
                }
                transform[key] = interpolate(_startTransform[key], _transformProps[key], perc, ease, pr, key);
                if (zeroOut) {
                    pr[key] = _startTransform[key]
                }
            }
            for (key in _props) {
                props[key] = interpolate(_startProps[key], _props[key], perc, ease, pr, key);
                if (zeroOut) {
                    pr[key] = _startProps[key]
                }
            }
            var time = (perc * _time) - prevTime;
            prevTime += time;
            _stack.push({
                percent: perc,
                ease: ease,
                transform: transform,
                props: props,
                delay: _totalStacks == 1 ? _delay : 0,
                time: time
            })
        }
        initCSSTween(_stack.shift())
    }

    function initStart() {
        _startTransform = TweenManager.getAllTransforms(_object);
        var transform = TweenManager.parseTransform(_startTransform);
        if (!transform.length) {
            for (var i = TweenManager.Transforms.length - 1; i > -1; i--) {
                var key = TweenManager.Transforms[i];
                _startTransform[key] = key == "scale" ? 1 : 0
            }
        }
        _startProps = {};
        for (key in _props) {
            _startProps[key] = _object.css(key)
        }
    }

    function initCSSTween(values) {
        if (killed()) {
            return
        }
        if (_object._cssTween) {
            _object._cssTween.kill = true
        }
        _object._cssTween = _this;
        _object.div._transition = true;
        var strings = (function() {
            if (!values) {
                return buildStrings(_time, _ease, _delay)
            } else {
                return buildStrings(values.time, values.ease, values.delay)
            }
        })();
        _object.willChange(strings.props);
        var time = values ? values.time : _time;
        var delay = values ? values.delay : _delay;
        var props = values ? values.props : _props;
        var transformProps = values ? values.transform : _transformProps;
        Timer.create(function() {
            if (killed()) {
                return
            }
            _object.div.style[Device.styles.vendorTransition] = strings.transition;
            _this.playing = true;
            Timer.create(function() {
                if (killed()) {
                    return
                }
                _object.css(props);
                _object.transform(transformProps)
            }, 16);
            Timer.create(function() {
                if (killed()) {
                    return
                }
                if (!_stack) {
                    clearCSSTween();
                    if (_callback) {
                        _callback()
                    }
                } else {
                    executeNextInStack()
                }
            }, time + delay)
        }, 50)
    }

    function executeNextInStack() {
        if (killed()) {
            return
        }
        var values = _stack.shift();
        if (!values) {
            clearCSSTween();
            if (_callback) {
                _callback
            }
        } else {
            var strings = buildStrings(values.time, values.ease, values.delay);
            _object.div.style[Device.styles.vendorTransition] = strings.transition;
            _object.css(values.props);
            _object.transform(values.transform);
            Timer.create(executeNextInStack, values.time)
        }
    }

    function buildStrings(time, ease, delay) {
        var props = "";
        var str = "";
        var len = _transitionProps.length;
        for (var i = 0; i < len; i++) {
            var transitionProp = _transitionProps[i];
            props += (props.length ? ", " : "") + transitionProp;
            str += (str.length ? ", " : "") + transitionProp + " " + time + "ms " + TweenManager.getEase(ease) + " " + delay + "ms"
        }
        return {
            props: props,
            transition: str
        }
    }

    function clearCSSTween() {
        if (killed()) {
            return
        }
        _this.playing = false;
        _object._cssTween = null;
        _object.willChange(null);
        _object = _props = null;
        _this = null;
        Utils.nullObject(this)
    }

    function tweenComplete() {
        if (!_callback && _this.playing) {
            clearCSSTween()
        }
    }
    this.stop = function() {
        if (!this.playing) {
            return
        }
        this.kill = true;
        this.playing = false;
        _object.div.style[Device.styles.vendorTransition] = "";
        _object.div._transition = false;
        _object.willChange(null);
        _object._cssTween = null;
        _this = null;
        Utils.nullObject(this)
    }
});
Class(function FrameTween(_object, _props, _time, _ease, _delay, _callback, _manual) {
    var _this = this;
    var _endValues, _transformEnd, _transformStart, _startValues;
    var _isTransform, _isCSS, _transformProps;
    var _cssTween, _transformTween;
    this.playing = true;
    (function() {
        if (typeof _ease === "object") {
            _ease = "easeOutCubic"
        }
        if (_object && _props) {
            if (typeof _time !== "number") {
                throw "FrameTween Requires object, props, time, ease"
            }
            initValues();
            startTween()
        }
    })();

    function killed() {
        return _this.kill || !_object || !_object.div
    }

    function initValues() {
        if (_props.math) {
            delete _props.math
        }
        if (Device.tween.transition && _object.div._transition) {
            _object.div.style[Device.styles.vendorTransition] = "";
            _object.div._transition = false
        }
        _endValues = new DynamicObject();
        _transformEnd = new DynamicObject();
        _transformStart = new DynamicObject();
        _startValues = new DynamicObject();
        if (!_object.multiTween) {
            if (typeof _props.x === "undefined") {
                _props.x = _object.x
            }
            if (typeof _props.y === "undefined") {
                _props.y = _object.y
            }
            if (typeof _props.z === "undefined") {
                _props.z = _object.z
            }
        }
        for (var key in _props) {
            if (TweenManager.checkTransform(key)) {
                _isTransform = true;
                _transformStart[key] = _object[key] || (key == "scale" ? 1 : 0);
                _transformEnd[key] = _props[key]
            } else {
                _isCSS = true;
                var v = _props[key];
                if (typeof v === "string") {
                    _object.div.style[key] = v
                } else {
                    if (typeof v === "number") {
                        _startValues[key] = Number(_object.css(key));
                        _endValues[key] = v
                    }
                }
            }
        }
    }

    function startTween() {
        if (_object._cssTween && !_manual && !_object.multiTween) {
            _object._cssTween.kill = true
        }
        if (_object.multiTween) {
            if (!_object._cssTweens) {
                _object._cssTweens = []
            }
            _object._cssTweens.push(_this)
        }
        _object._cssTween = _this;
        _this.playing = true;
        _props = _startValues.copy();
        _transformProps = _transformStart.copy();
        if (_isCSS) {
            _cssTween = TweenManager.tween(_props, _endValues, _time, _ease, _delay, tweenComplete, update, _manual)
        }
        if (_isTransform) {
            _transformTween = TweenManager.tween(_transformProps, _transformEnd, _time, _ease, _delay, (!_isCSS ? tweenComplete : null), (!_isCSS ? update : null), _manual)
        }
    }

    function clear() {
        if (_object._cssTweens) {
            _object._cssTweens.findAndRemove(_this)
        }
        _this.playing = false;
        _object._cssTween = null;
        _object = _props = null
    }

    function update() {
        if (killed()) {
            return
        }
        if (_isCSS) {
            _object.css(_props)
        }
        if (_isTransform) {
            if (_object.multiTween) {
                for (var key in _transformProps) {
                    if (typeof _transformProps[key] === "number") {
                        _object[key] = _transformProps[key]
                    }
                }
                _object.transform()
            } else {
                _object.transform(_transformProps)
            }
        }
    }

    function tweenComplete() {
        if (_this.playing) {
            clear();
            if (_callback) {
                _callback()
            }
        }
    }
    this.stop = function() {
        if (!this.playing) {
            return
        }
        if (_cssTween && _cssTween.stop) {
            _cssTween.stop()
        }
        if (_transformTween && _transformTween.stop) {
            _transformTween.stop()
        }
        clear()
    };
    this.interpolate = function(elapsed) {
        if (_cssTween) {
            _cssTween.interpolate(elapsed)
        }
        if (_transformTween) {
            _transformTween.interpolate(elapsed)
        }
        update()
    };
    this.getValues = function() {
        return {
            start: _startValues,
            transformStart: _transformStart,
            end: _endValues,
            transformEnd: _transformEnd,
        }
    };
    this.setEase = function(ease) {
        if (_cssTween) {
            _cssTween.setEase(ease)
        }
        if (_transformTween) {
            _transformTween.setEase(ease)
        }
    }
});
Class(function CSSWebAnimation(_object, _props, _time, _ease, _delay, _callback) {
    var _this = this;
    var _transform, _start, _end, _tween;
    var _properties, _killed, _transformValues, _startTransform;
    (function() {
        if (_object._cssTween) {
            _object._cssTween.stop()
        }
        initProperties();
        initTransform();
        initStart();
        initEnd();
        Render.setupTween(initAnimation)
    })();

    function initProperties() {
        var properties = [];
        var transform = false;
        for (var key in _props) {
            if (TweenManager.checkTransform(key)) {
                transform = true
            } else {
                if (typeof _props[key] === "number" || key.strpos("-")) {
                    properties.push(key)
                }
            }
        }
        if (transform) {
            properties.push(Device.transformProperty)
        }
        _object.willChange(properties);
        if (_object._cssTween) {
            _object._cssTween.kill = true
        }
        _object._cssTween = _this;
        _object.div._transition = true
    }

    function initTransform() {
        var transform = TweenManager.getAllTransforms(_object);
        for (var key in _props) {
            if (TweenManager.checkTransform(key)) {
                transform[key] = _props[key];
                delete _props[key]
            }
        }
        _transformValues = transform;
        _transform = TweenManager.parseTransform(transform)
    }

    function initStart() {
        _startTransform = TweenManager.getAllTransforms(_object);
        var transform = TweenManager.parseTransform(_startTransform);
        if (!transform.length) {
            transform = "translate3d(0, 0, 0)";
            for (var i = TweenManager.Transforms.length - 1; i > -1; i--) {
                var key = TweenManager.Transforms[i];
                _startTransform[key] = key == "scale" ? 1 : 0
            }
        }
        _start = {};
        if (_transform) {
            _start.transform = transform
        }
        for (var key in _props) {
            _start[key] = _object.css(key)
        }
    }

    function initEnd() {
        _end = {};
        if (_transform) {
            _end.transform = _transform
        }
        for (var key in _props) {
            _end[key] = _props[key]
        }
    }

    function initAnimation() {
        _this.playing = true;
        _tween = _object.div.animate([_start, _end], {
            duration: _time,
            delay: _delay,
            easing: TweenManager.getEase(_ease),
            fill: "forwards"
        });
        _tween.addEventListener("finish", tweenComplete)
    }

    function killed() {
        return !_this || _this.kill || !_object || !_object.div
    }

    function clear() {
        _this.playing = false;
        _object = _props = null;
        _this = null;
        _tween = null;
        Utils.nullObject(this)
    }

    function applyValues() {
        _object.css(_props);
        _object.transform(_transformValues)
    }

    function interpolate(start, end, alpha) {
        return TweenManager.interpolate(start + (end - start), alpha, _ease)
    }

    function stopValues() {
        if (!_tween) {
            return
        }
        var elapsed = _tween.currentTime / _time;
        var transform = {};
        var css = {};
        for (var key in _transformValues) {
            transform[key] = interpolate(_startTransform[key], _transformValues[key], elapsed)
        }
        for (key in _props) {
            css[key] = TweenManager.interpolate(_start[key], _props[key], elapsed)
        }
        _object.css(css);
        _object.transform(transform)
    }

    function tweenComplete() {
        if (killed()) {
            return
        }
        applyValues();
        _object.willChange(null);
        if (_callback) {
            Render.nextFrame(_callback)
        }
        clear()
    }
    this.stop = function() {
        if (!_this || !_this.playing) {
            return
        }
        stopValues();
        _this.kill = true;
        _this.playing = false;
        _object.willChange(null);
        _tween.pause();
        clear()
    }
});
TweenManager.Class(function Interpolation() {
    function calculateBezier(aT, aA1, aA2) {
        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT
    }

    function getTForX(aX, mX1, mX2) {
        var aGuessT = aX;
        for (var i = 0; i < 4; i++) {
            var currentSlope = getSlope(aGuessT, mX1, mX2);
            if (currentSlope == 0) {
                return aGuessT
            }
            var currentX = calculateBezier(aGuessT, mX1, mX2) - aX;
            aGuessT -= currentX / currentSlope
        }
        return aGuessT
    }

    function getSlope(aT, aA1, aA2) {
        return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1)
    }

    function A(aA1, aA2) {
        return 1 - 3 * aA2 + 3 * aA1
    }

    function B(aA1, aA2) {
        return 3 * aA2 - 6 * aA1
    }

    function C(aA1) {
        return 3 * aA1
    }
    this.convertEase = function(ease) {
        var fn = (function() {
            switch (ease) {
                case "easeInQuad":
                    return TweenManager.Interpolation.Quad.In;
                    break;
                case "easeInCubic":
                    return TweenManager.Interpolation.Cubic.In;
                    break;
                case "easeInQuart":
                    return TweenManager.Interpolation.Quart.In;
                    break;
                case "easeInQuint":
                    return TweenManager.Interpolation.Quint.In;
                    break;
                case "easeInSine":
                    return TweenManager.Interpolation.Sine.In;
                    break;
                case "easeInExpo":
                    return TweenManager.Interpolation.Expo.In;
                    break;
                case "easeInCirc":
                    return TweenManager.Interpolation.Circ.In;
                    break;
                case "easeInElastic":
                    return TweenManager.Interpolation.Elastic.In;
                    break;
                case "easeInBack":
                    return TweenManager.Interpolation.Back.In;
                    break;
                case "easeInBounce":
                    return TweenManager.Interpolation.Bounce.In;
                    break;
                case "easeOutQuad":
                    return TweenManager.Interpolation.Quad.Out;
                    break;
                case "easeOutCubic":
                    return TweenManager.Interpolation.Cubic.Out;
                    break;
                case "easeOutQuart":
                    return TweenManager.Interpolation.Quart.Out;
                    break;
                case "easeOutQuint":
                    return TweenManager.Interpolation.Quint.Out;
                    break;
                case "easeOutSine":
                    return TweenManager.Interpolation.Sine.Out;
                    break;
                case "easeOutExpo":
                    return TweenManager.Interpolation.Expo.Out;
                    break;
                case "easeOutCirc":
                    return TweenManager.Interpolation.Circ.Out;
                    break;
                case "easeOutElastic":
                    return TweenManager.Interpolation.Elastic.Out;
                    break;
                case "easeOutBack":
                    return TweenManager.Interpolation.Back.Out;
                    break;
                case "easeOutBounce":
                    return TweenManager.Interpolation.Bounce.Out;
                    break;
                case "easeInOutQuad":
                    return TweenManager.Interpolation.Quad.InOut;
                    break;
                case "easeInOutCubic":
                    return TweenManager.Interpolation.Cubic.InOut;
                    break;
                case "easeInOutQuart":
                    return TweenManager.Interpolation.Quart.InOut;
                    break;
                case "easeInOutQuint":
                    return TweenManager.Interpolation.Quint.InOut;
                    break;
                case "easeInOutSine":
                    return TweenManager.Interpolation.Sine.InOut;
                    break;
                case "easeInOutExpo":
                    return TweenManager.Interpolation.Expo.InOut;
                    break;
                case "easeInOutCirc":
                    return TweenManager.Interpolation.Circ.InOut;
                    break;
                case "easeInOutElastic":
                    return TweenManager.Interpolation.Elastic.InOut;
                    break;
                case "easeInOutBack":
                    return TweenManager.Interpolation.Back.InOut;
                    break;
                case "easeInOutBounce":
                    return TweenManager.Interpolation.Bounce.InOut;
                    break;
                case "linear":
                    return TweenManager.Interpolation.Linear.None;
                    break
            }
        })();
        if (!fn) {
            var curve = TweenManager.getEase(ease, true);
            if (curve) {
                fn = curve
            } else {
                fn = TweenManager.Interpolation.Cubic.Out
            }
        }
        return fn
    };
    this.solve = function(values, elapsed) {
        if (values[0] == values[1] && values[2] == values[3]) {
            return elapsed
        }
        return calculateBezier(getTForX(elapsed, values[0], values[2]), values[1], values[3])
    };
    this.Linear = {
        None: function(k) {
            return k
        }
    };
    this.Quad = {
        In: function(k) {
            return k * k
        },
        Out: function(k) {
            return k * (2 - k)
        },
        InOut: function(k) {
            if ((k *= 2) < 1) {
                return 0.5 * k * k
            }
            return -0.5 * (--k * (k - 2) - 1)
        }
    };
    this.Cubic = {
        In: function(k) {
            return k * k * k
        },
        Out: function(k) {
            return --k * k * k + 1
        },
        InOut: function(k) {
            if ((k *= 2) < 1) {
                return 0.5 * k * k * k
            }
            return 0.5 * ((k -= 2) * k * k + 2)
        }
    };
    this.Quart = {
        In: function(k) {
            return k * k * k * k
        },
        Out: function(k) {
            return 1 - --k * k * k * k
        },
        InOut: function(k) {
            if ((k *= 2) < 1) {
                return 0.5 * k * k * k * k
            }
            return -0.5 * ((k -= 2) * k * k * k - 2)
        }
    };
    this.Quint = {
        In: function(k) {
            return k * k * k * k * k
        },
        Out: function(k) {
            return --k * k * k * k * k + 1
        },
        InOut: function(k) {
            if ((k *= 2) < 1) {
                return 0.5 * k * k * k * k * k
            }
            return 0.5 * ((k -= 2) * k * k * k * k + 2)
        }
    };
    this.Sine = {
        In: function(k) {
            return 1 - Math.cos(k * Math.PI / 2)
        },
        Out: function(k) {
            return Math.sin(k * Math.PI / 2)
        },
        InOut: function(k) {
            return 0.5 * (1 - Math.cos(Math.PI * k))
        }
    };
    this.Expo = {
        In: function(k) {
            return k === 0 ? 0 : Math.pow(1024, k - 1)
        },
        Out: function(k) {
            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k)
        },
        InOut: function(k) {
            if (k === 0) {
                return 0
            }
            if (k === 1) {
                return 1
            }
            if ((k *= 2) < 1) {
                return 0.5 * Math.pow(1024, k - 1)
            }
            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2)
        }
    };
    this.Circ = {
        In: function(k) {
            return 1 - Math.sqrt(1 - k * k)
        },
        Out: function(k) {
            return Math.sqrt(1 - --k * k)
        },
        InOut: function(k) {
            if ((k *= 2) < 1) {
                return -0.5 * (Math.sqrt(1 - k * k) - 1)
            }
            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1)
        }
    };
    this.Elastic = {
        In: function(k) {
            var s, a = 0.1,
                p = 0.4;
            if (k === 0) {
                return 0
            }
            if (k === 1) {
                return 1
            }
            if (!a || a < 1) {
                a = 1;
                s = p / 4
            } else {
                s = p * Math.asin(1 / a) / (2 * Math.PI)
            }
            return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p))
        },
        Out: function(k) {
            var s, a = 0.1,
                p = 0.4;
            if (k === 0) {
                return 0
            }
            if (k === 1) {
                return 1
            }
            if (!a || a < 1) {
                a = 1;
                s = p / 4
            } else {
                s = p * Math.asin(1 / a) / (2 * Math.PI)
            }
            return (a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1)
        },
        InOut: function(k) {
            var s, a = 0.1,
                p = 0.4;
            if (k === 0) {
                return 0
            }
            if (k === 1) {
                return 1
            }
            if (!a || a < 1) {
                a = 1;
                s = p / 4
            } else {
                s = p * Math.asin(1 / a) / (2 * Math.PI)
            }
            if ((k *= 2) < 1) {
                return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p))
            }
            return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1
        }
    };
    this.Back = {
        In: function(k) {
            var s = 1.70158;
            return k * k * ((s + 1) * k - s)
        },
        Out: function(k) {
            var s = 1.70158;
            return --k * k * ((s + 1) * k + s) + 1
        },
        InOut: function(k) {
            var s = 1.70158 * 1.525;
            if ((k *= 2) < 1) {
                return 0.5 * (k * k * ((s + 1) * k - s))
            }
            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2)
        }
    };
    this.Bounce = {
        In: function(k) {
            return 1 - this.Bounce.Out(1 - k)
        },
        Out: function(k) {
            if (k < (1 / 2.75)) {
                return 7.5625 * k * k
            } else {
                if (k < (2 / 2.75)) {
                    return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75
                } else {
                    if (k < (2.5 / 2.75)) {
                        return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375
                    } else {
                        return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375
                    }
                }
            }
        },
        InOut: function(k) {
            if (k < 0.5) {
                return this.Bounce.In(k * 2) * 0.5
            }
            return this.Bounce.Out(k * 2 - 1) * 0.5 + 0.5
        }
    }
}, "Static");
Class(function EasingPath(_curve) {
    Inherit(this, Component);
    var _this = this;
    var _path, _boundsStartIndex, _pathLength, _pool;
    var _precompute = 1450;
    var _step = 1 / _precompute;
    var _rect = 100;
    var _approximateMax = 5;
    var _eps = 0.001;
    var _boundsPrevProgress = -1;
    var _prevBounds = {};
    var _newPoint = {};
    var _samples = [];
    var _using = [];
    (function() {
        initPool();
        initPath();
        preSample()
    })();

    function initPool() {
        _pool = _this.initClass(ObjectPool, Object, 100)
    }

    function initPath() {
        _path = document.createElementNS("http://www.w3.org/2000/svg", "path");
        _path.setAttributeNS(null, "d", normalizePath(_curve));
        _pathLength = _path.getTotalLength()
    }

    function preSample() {
        var i, j, length, point, progress, ref;
        for (i = j = 0, ref = _precompute; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            progress = i * _step;
            length = _pathLength * progress;
            point = _path.getPointAtLength(length);
            _samples.push({
                point: point,
                length: length,
                progress: progress
            })
        }
    }

    function normalizePath(path) {
        var svgRegex = /[M|L|H|V|C|S|Q|T|A]/gim;
        var points = path.split(svgRegex);
        points.shift();
        var commands = path.match(svgRegex);
        var startIndex = 0;
        points[startIndex] = normalizeSegment(points[startIndex], 0);
        var endIndex = points.length - 1;
        points[endIndex] = normalizeSegment(points[endIndex], _rect);
        return joinNormalizedPath(commands, points)
    }

    function normalizeSegment(segment, value) {
        value = value || 0;
        segment = segment.trim();
        var nRgx = /(-|\+)?((\d+(\.(\d|\e(-|\+)?)+)?)|(\.?(\d|\e|(\-|\+))+))/gim;
        var pairs = getSegmentPairs(segment.match(nRgx));
        var lastPoint = pairs[pairs.length - 1];
        var x = lastPoint[0];
        var parsedX = Number(x);
        if (parsedX !== value) {
            segment = "";
            lastPoint[0] = value;
            for (var i = 0; i < pairs.length; i++) {
                var point = pairs[i];
                var space = i === 0 ? "" : " ";
                segment += "" + space + point[0] + "," + point[1]
            }
        }
        return segment
    }

    function joinNormalizedPath(commands, points) {
        var normalizedPath = "";
        for (var i = 0; i < commands.length; i++) {
            var command = commands[i];
            var space = i === 0 ? "" : " ";
            normalizedPath += "" + space + command + (points[i].trim())
        }
        return normalizedPath
    }

    function getSegmentPairs(array) {
        if (array.length % 2 !== 0) {
            throw "EasingPath :: Failed to parse path -- segment pairs are not even."
        }
        var newArray = [];
        for (var i = 0; i < array.length; i += 2) {
            var value = array[i];
            var pair = [array[i], array[i + 1]];
            newArray.push(pair)
        }
        return newArray
    }

    function findBounds(array, p) {
        if (p == _boundsPrevProgress) {
            return _prevBounds
        }
        if (!_boundsStartIndex) {
            _boundsStartIndex = 0
        }
        var len = array.length;
        var loopEnd, direction, start;
        if (_boundsPrevProgress > p) {
            loopEnd = 0;
            direction = "reverse"
        } else {
            loopEnd = len;
            direction = "forward"
        }
        if (direction == "forward") {
            start = array[0];
            end = array[array.length - 1]
        } else {
            start = array[array.length - 1];
            end = array[0]
        }
        var i, j, ref, ref1, buffer;
        for (i = j = ref = _boundsStartIndex, ref1 = loopEnd; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
            var value = array[i];
            var pointX = value.point.x / _rect;
            var pointP = p;
            if (direction == "reverse") {
                buffer = pointX;
                pointX = pointP;
                pointP = buffer
            }
            if (pointX < pointP) {
                start = value;
                _boundsStartIndex = i
            } else {
                end = value;
                break
            }
        }
        _boundsPrevProgress = p;
        _prevBounds.start = start;
        _prevBounds.end = end;
        return _prevBounds
    }

    function checkIfBoundsCloseEnough(p, bounds) {
        var point;
        var y = checkIfPointCloseEnough(p, bounds.start.point);
        if (y) {
            return y
        }
        return checkIfPointCloseEnough(p, bounds.end.point)
    }

    function findApproximate(p, start, end, approximateMax) {
        approximateMax = approximateMax || _approximateMax;
        var approximation = approximate(start, end, p);
        var point = _path.getPointAtLength(approximation);
        var x = point.x / _rect;
        if (closeEnough(p, x)) {
            return resolveY(point)
        } else {
            if (approximateMax-- < 1) {
                return resolveY(point)
            }
            var newPoint = _pool.get();
            newPoint.point = point;
            newPoint.length = approximation;
            _using.push(newPoint);
            if (p < x) {
                return findApproximate(p, start, newPoint, approximateMax)
            } else {
                return findApproximate(p, newPoint, end, approximateMax)
            }
        }
    }

    function approximate(start, end, p) {
        var deltaP = end.point.x - start.point.x;
        var percentP = (p - (start.point.x / _rect)) / (deltaP / _rect);
        return start.length + percentP * (end.length - start.length)
    }

    function checkIfPointCloseEnough(p, point) {
        if (closeEnough(p, point.x / _rect)) {
            return resolveY(point)
        }
    }

    function closeEnough(n1, n2) {
        return Math.abs(n1 - n2) < _eps
    }

    function resolveY(point) {
        return 1 - (point.y / _rect)
    }

    function cleanUpObjects() {
        for (var i = _using.length - 1; i > -1; i--) {
            _pool.put(_using[i])
        }
        _using.length = 0
    }
    this.solve = function(p) {
        p = Utils.clamp(p, 0, 1);
        var bounds = findBounds(_samples, p);
        var res = checkIfBoundsCloseEnough(p, bounds);
        var output = res;
        if (!output) {
            output = findApproximate(p, bounds.start, bounds.end)
        }
        cleanUpObjects();
        return output
    }
});
Class(function MathTween(_object, _props, _time, _ease, _delay, _update, _callback, _manual) {
    var _this = this;
    var _startTime, _startValues, _endValues, _currentValues;
    var _easeFunction, _paused, _newEase, _stack, _current;
    var _elapsed = 0;
    (function() {
        if (_object && _props) {
            if (typeof _time !== "number") {
                throw "MathTween Requires object, props, time, ease"
            }
            start();
            if (typeof _ease == "object" && !Array.isArray(_ease)) {
                initStack()
            }
        }
    })();

    function start() {
        if (!_object.multiTween && _object._mathTween && !_manual) {
            TweenManager.clearTween(_object)
        }
        if (!_manual) {
            TweenManager._addMathTween(_this)
        }
        _object._mathTween = _this;
        if (_object.multiTween) {
            if (!_object._mathTweens) {
                _object._mathTweens = []
            }
            _object._mathTweens.push(_this)
        }
        if (typeof _ease == "string") {
            _ease = TweenManager.Interpolation.convertEase(_ease);
            _easeFunction = typeof _ease === "function"
        } else {
            if (Array.isArray(_ease)) {
                _easeFunction = false;
                _ease = TweenManager.getEase(_ease, true)
            }
        }
        _startTime = Date.now();
        _startTime += _delay;
        _endValues = _props;
        _startValues = {};
        _this.startValues = _startValues;
        for (var prop in _endValues) {
            if (typeof _object[prop] === "number") {
                _startValues[prop] = _object[prop]
            }
        }
    }

    function initStack() {
        var prevTime = 0;
        var interpolate = function(start, end, alpha, ease, prev, key) {
            var last = prev[key];
            if (last) {
                start += last
            }
            return TweenManager.interpolateValues(start, end, alpha, ease)
        };
        _stack = [];
        for (var p in _ease) {
            var perc = p.strpos("%") ? Number(p.replace("%", "")) / 100 : ((Number(p) + 1) / _ease.length);
            if (isNaN(perc)) {
                continue
            }
            var ease = _ease[p];
            var last = _stack[_stack.length - 1];
            var props = {};
            var pr = last ? last.end : {};
            var zeroOut = !last;
            for (var key in _startValues) {
                props[key] = interpolate(_startValues[key], _endValues[key], perc, ease, pr, key);
                if (zeroOut) {
                    pr[key] = _startValues[key]
                }
            }
            var time = (perc * _time) - prevTime;
            prevTime += time;
            _stack.push({
                percent: perc,
                ease: ease,
                start: pr,
                end: props,
                time: time
            })
        }
        _currentValues = _stack.shift()
    }

    function clear() {
        if (!_object && !_props) {
            return false
        }
        _object._mathTween = null;
        TweenManager._removeMathTween(_this);
        Utils.nullObject(_this);
        if (_object._mathTweens) {
            _object._mathTweens.findAndRemove(_this)
        }
    }

    function updateSingle(time) {
        _elapsed = (time - _startTime) / _time;
        _elapsed = _elapsed > 1 ? 1 : _elapsed;
        var delta = _easeFunction ? _ease(_elapsed) : TweenManager.Interpolation.solve(_ease, _elapsed);
        for (var prop in _startValues) {
            if (typeof _startValues[prop] === "number") {
                var start = _startValues[prop];
                var end = _endValues[prop];
                _object[prop] = start + (end - start) * delta
            }
        }
        if (_update) {
            _update(delta)
        }
        if (_elapsed == 1) {
            if (_callback) {
                _callback()
            }
            clear()
        }
    }

    function updateStack(time) {
        var v = _currentValues;
        if (!v.elapsed) {
            v.elapsed = 0;
            v.timer = 0
        }
        v.timer += Render.DELTA;
        v.elapsed = v.timer / v.time;
        if (v.elapsed < 1) {
            for (var prop in v.start) {
                _object[prop] = TweenManager.interpolateValues(v.start[prop], v.end[prop], v.elapsed, v.ease)
            }
            if (_update) {
                _update(v.elapsed)
            }
        } else {
            _currentValues = _stack.shift();
            if (!_currentValues) {
                if (_callback) {
                    _callback()
                }
                clear()
            }
        }
    }
    this.update = function(time) {
        if (_paused || time < _startTime) {
            return
        }
        if (_stack) {
            updateStack(time)
        } else {
            updateSingle(time)
        }
    };
    this.pause = function() {
        _paused = true
    };
    this.resume = function() {
        _paused = false;
        _startTime = Date.now() - (_elapsed * _time)
    };
    this.stop = function() {
        _this.stopped = true;
        clear();
        return null
    };
    this.setEase = function(ease) {
        if (_newEase != ease) {
            _newEase = ease;
            _ease = TweenManager.Interpolation.convertEase(ease);
            _easeFunction = typeof _ease === "function"
        }
    };
    this.getValues = function() {
        return {
            start: _startValues,
            end: _endValues,
        }
    };
    this.interpolate = function(elapsed) {
        var delta = _easeFunction ? _ease(elapsed) : TweenManager.Interpolation.solve(_ease, elapsed);
        for (var prop in _startValues) {
            if (typeof _startValues[prop] === "number" && typeof _endValues[prop] === "number") {
                var start = _startValues[prop];
                var end = _endValues[prop];
                _object[prop] = start + (end - start) * delta
            }
        }
    }
});
Class(function SpringTween(_object, _props, _friction, _ease, _delay, _update, _callback) {
    var _this = this;
    var _startTime, _velocityValues, _endValues, _startValues;
    var _damping, _friction, _count, _paused;
    (function() {
        if (_object && _props) {
            if (typeof _friction !== "number") {
                throw "SpringTween Requires object, props, time, ease"
            }
            start()
        }
    })();

    function start() {
        TweenManager.clearTween(_object);
        _object._mathTween = _this;
        TweenManager._addMathTween(_this);
        _startTime = Date.now();
        _startTime += _delay;
        _endValues = {};
        _startValues = {};
        _velocityValues = {};
        if (_props.x || _props.y || _props.z) {
            if (typeof _props.x === "undefined") {
                _props.x = _object.x
            }
            if (typeof _props.y === "undefined") {
                _props.y = _object.y
            }
            if (typeof _props.z === "undefined") {
                _props.z = _object.z
            }
        }
        _count = 0;
        _damping = _props.damping || 0.5;
        delete _props.damping;
        for (var prop in _props) {
            if (typeof _props[prop] === "number") {
                _velocityValues[prop] = 0;
                _endValues[prop] = _props[prop]
            }
        }
        for (prop in _props) {
            if (typeof _object[prop] === "number") {
                _startValues[prop] = _object[prop] || 0;
                _props[prop] = _startValues[prop]
            }
        }
    }

    function clear(stop) {
        if (_object) {
            _object._mathTween = null;
            if (!stop) {
                for (var prop in _endValues) {
                    if (typeof _endValues[prop] === "number") {
                        _object[prop] = _endValues[prop]
                    }
                }
                if (_object.transform) {
                    _object.transform()
                }
            }
        }
        TweenManager._removeMathTween(_this)
    }
    this.update = function(time) {
        if (time < _startTime || _paused) {
            return
        }
        var vel;
        for (var prop in _startValues) {
            if (typeof _startValues[prop] === "number") {
                var start = _startValues[prop];
                var end = _endValues[prop];
                var val = _props[prop];
                var d = end - val;
                var a = d * _damping;
                _velocityValues[prop] += a;
                _velocityValues[prop] *= _friction;
                _props[prop] += _velocityValues[prop];
                _object[prop] = _props[prop];
                vel = _velocityValues[prop]
            }
        }
        if (Math.abs(vel) < 0.1) {
            _count++;
            if (_count > 30) {
                if (_callback) {
                    _callback.apply(_object)
                }
                clear()
            }
        }
        if (_update) {
            _update(time)
        }
        if (_object.transform) {
            _object.transform()
        }
    };
    this.pause = function() {
        _paused = true
    };
    this.stop = function() {
        clear(true);
        return null
    }
});
Class(function TweenTimeline() {
    Inherit(this, Component);
    var _this = this;
    var _tween;
    var _total = 0;
    var _tweens = [];
    var _fallbacks = [];
    this.elapsed = 0;
    (function() {})();

    function calculate() {
        _tweens.sort(function(a, b) {
            var ta = a.time + a.delay;
            var tb = b.time + b.delay;
            return tb - ta
        });
        var first = _tweens[0];
        _total = first.time + first.delay
    }

    function loop() {
        var time = _this.elapsed * _total;
        for (var i = _tweens.length - 1; i > -1; i--) {
            var t = _tweens[i];
            var relativeTime = time - t.delay;
            var elapsed = Utils.clamp(relativeTime / t.time, 0, 1);
            t.interpolate(elapsed)
        }
        if (_this.onUpdate) {
            _this.onUpdate(_this.elapsed)
        }
    }
    this.add = function(object, props, time, ease, delay) {
        var tween;
        if (object instanceof HydraObject) {
            tween = new FrameTween(object, props, time, ease, delay, null, true)
        } else {
            tween = new MathTween(object, props, time, ease, delay, null, null, true)
        }
        _tweens.push(tween);
        _fallbacks.push({
            object: object,
            props: props,
            time: time,
            ease: ease,
            delay: delay
        });
        tween.time = time;
        tween.delay = delay || 0;
        calculate();
        return tween
    };
    this.tween = function(to, time, ease, delay, callback) {
        this.stopTween();
        _tween = TweenManager.tween(_this, {
            elapsed: to
        }, time, ease, delay, callback, loop)
    };
    this.stopTween = function() {
        if (_tween && _tween.stop) {
            _tween.stop()
        }
    };
    this.startRender = function() {
        Render.startRender(loop)
    };
    this.stopRender = function() {
        Render.stopRender(loop)
    };
    this.update = function() {
        loop()
    };
    this.calculateRemainingTime = function() {
        return _total - (_this.elapsed * _total)
    };
    this.fallback = function(dir) {
        _fallbacks.forEach(function(config, index) {
            var fTween = _tweens[index].getValues();
            var props = null;
            if (config.object instanceof HydraObject) {
                if (dir == 1) {
                    props = Utils.mergeObject(fTween.end, fTween.transformEnd)
                } else {
                    props = Utils.mergeObject(fTween.start, fTween.transformStart)
                }
                for (var key in props) {
                    if (typeof props[key] != "number") {
                        delete props[key]
                    }
                }
                config.object.tween(props, config.time, config.ease, config.delay)
            } else {
                if (dir == 1) {
                    props = Utils.mergeObject(fTween.end)
                } else {
                    props = Utils.mergeObject(fTween.start)
                }
                for (var key in props) {
                    if (typeof props[key] != "number") {
                        delete props[key]
                    }
                }
                TweenManager.tween(config.object, props, config.time, config.ease, config.delay)
            }
        })
    };
    this.destroy = function() {
        Render.stopRender(loop);
        for (var i = 0; i < _tweens.length; i++) {
            _tweens[i].stop()
        }
        return this._destroy()
    }
});
Class(function Shaders() {
    var _this = this;
    (function() {})();

    function parseCompiled(shaders) {
        var split = shaders.split("{@}");
        split.shift();
        for (var i = 0; i < split.length; i += 2) {
            var name = split[i];
            var text = split[i + 1];
            _this[name] = text
        }
    }

    function parseRequirements() {
        for (var key in _this) {
            var obj = _this[key];
            if (typeof obj === "string") {
                _this[key] = require(obj)
            }
        }
    }

    function require(shader) {
        if (!shader.strpos("require")) {
            return shader
        }
        shader = shader.replace(/# require/g, "#require");
        while (shader.strpos("#require")) {
            var split = shader.split("#require(");
            var name = split[1].split(")")[0];
            name = name.replace(/ /g, "");
            if (!_this[name]) {
                throw "Shader required " + name + ", but not found in compiled shaders.\n" + shader
            }
            shader = shader.replace("#require(" + name + ")", _this[name])
        }
        return shader
    }
    this.parse = function(code, file) {
        if (!code.strpos("{@}")) {
            file = file.split("/");
            file = file[file.length - 1];
            _this[file] = code
        } else {
            parseCompiled(code);
            parseRequirements()
        }
    };
    this.getShader = function(string) {
        if (_this.FALLBACKS) {
            if (_this.FALLBACKS[string]) {
                string = _this.FALLBACKS[string]
            }
        }
        return _this[string]
    }
}, "static");
Class(function AssetLoader(_assets, _complete) {
    Inherit(this, Component);
    var _this = this;
    var _total = 0;
    var _loaded = 0;
    var _added = 0;
    var _triggered = 0;
    var _queueLength = 2;
    var _lastTriggered = 0;
    var _queue, _qLoad, _currentQueue;
    var _output, _loadedFiles;
    var _id = Utils.timestamp();
    if (typeof _complete === "number") {
        _queueLength = _complete;
        _complete = null
    }(function() {
        _queue = {};
        _loadedFiles = [];
        prepareAssets();
        defer(startLoading)
    })();

    function prepareAssets() {
        var perQueue = _assets.length / _queueLength;
        var count = 0;
        var index = 0;
        for (var i = 0; i < _assets.length; i++) {
            if (typeof _assets[i] !== "undefined") {
                if (!_queue[index]) {
                    _queue[index] = []
                }
                var queue = _queue[index];
                _total++;
                count++;
                if (count >= perQueue) {
                    index += 1;
                    count = 0
                }
                queue.push(_assets[i])
            }
        }
    }

    function startLoading() {
        _currentQueue = 0;
        loadQueue()
    }

    function loadQueue() {
        var queue = _queue[_currentQueue];
        if (!queue) {
            return
        }
        _qLoad = 0;
        for (var i = 0; i < queue.length; i++) {
            loadAsset(queue[i])
        }
    }

    function checkQ() {
        if (!_queue) {
            return
        }
        var queue = _queue[_currentQueue];
        if (!queue) {
            return
        }
        var length = queue.length;
        _qLoad++;
        if (_qLoad == length) {
            _currentQueue++;
            loadQueue()
        }
    }

    function missingFiles() {
        if (!_queue) {
            return
        }
        var missing = [];
        for (var i = 0; i < _queue.length; i++) {
            var loaded = false;
            for (var j = 0; j < _loadedFiles.length; j++) {
                if (_loadedFiles[j] == _queue[i]) {
                    loaded = true
                }
            }
            if (!loaded) {
                missing.push(_queue[i])
            }
        }
        if (missing.length) {
            console.log("AssetLoader Files Failed To Load:");
            console.log(missing)
        }
    }

    function loadAsset(asset) {
        if (!asset) {
            return
        }
        var name = asset.split("/");
        name = name[name.length - 1];
        var split = name.split(".");
        var ext = split[split.length - 1].split("?")[0];
        switch (ext) {
            case "html":
                XHR.get(asset, function(contents) {
                    Hydra.HTML[split[0]] = contents;
                    assetLoaded(asset)
                }, "text");
                break;
            case "js":
            case "php":
            case undefined:
                XHR.get(asset, function(script) {
                    script = script.replace("use strict", "");
                    eval.call(window, script);
                    assetLoaded(asset)
                }, "text");
                break;
            case "csv":
            case "json":
                XHR.get(asset, function(contents) {
                    Hydra.JSON[split[0]] = contents;
                    assetLoaded(asset)
                }, ext == "csv" ? "text" : null);
                break;
            case "svg":
                XHR.get(asset, function(contents) {
                    Hydra.SVG[split[0]] = contents;
                    assetLoaded(asset)
                }, "text");
                break;
            case "fs":
            case "vs":
                XHR.get(asset, function(contents) {
                    Shaders.parse(contents, asset);
                    assetLoaded(asset)
                }, "text");
                break;
            default:
                var image = Images.createImg(asset);
                if (image.complete) {
                    assetLoaded(asset);
                    return
                }
                image.onload = function() {
                    assetLoaded(asset)
                };
                break
        }
    }

    function assetLoaded(asset) {
        _loaded++;
        if (_this.events) {
            _this.events.fire(HydraEvents.PROGRESS, {
                percent: _loaded / _total
            })
        }
        _loadedFiles.push(asset);
        clearTimeout(_output);
        checkQ();
        if (_loaded == _total) {
            _this.complete = true;
            Render.nextFrame(function() {
                if (_this.events) {
                    _this.events.fire(HydraEvents.COMPLETE, null, true)
                }
                if (typeof _complete === "function") {
                    _complete()
                }
            })
        } else {
            _output = _this.delayedCall(missingFiles, 5000)
        }
    }
    this.add = function(num) {
        _total += num;
        _added += num
    };
    this.trigger = function(num) {
        num = num || 1;
        for (var i = 0; i < num; i++) {
            assetLoaded("trigger")
        }
    };
    this.triggerPercent = function(percent, num) {
        num = num || _added;
        var trigger = Math.ceil(num * percent);
        if (trigger > _lastTriggered) {
            this.trigger(trigger - _lastTriggered)
        }
        _lastTriggered = trigger
    };
    this.destroy = function() {
        _assets = null;
        _loaded = null;
        _queue = null;
        _qLoad = null;
        return this._destroy()
    }
}, function() {
    AssetLoader.loadAllAssets = function(callback, cdn) {
        cdn = cdn || "";
        var list = [];
        for (var i = 0; i < ASSETS.length; i++) {
            list.push(cdn + ASSETS[i])
        }
        var assets = new AssetLoader(list, function() {
            if (callback) {
                callback()
            }
            assets = assets.destroy()
        })
    };
    AssetLoader.loadAssets = function(list, callback) {
        var assets = new AssetLoader(list, function() {
            if (callback) {
                callback()
            }
            assets = assets.destroy()
        })
    }
});
Class(function Images() {
    var _this = this;
    this.inMemory = false;
    this.store = {};

    function parseResolution(path) {
        if (!ASSETS.RES) {
            return path
        }
        var res = ASSETS.RES[path];
        var ratio = Math.min(Device.pixelRatio, 3);
        if (res) {
            if (res["x" + ratio]) {
                var split = path.split("/");
                var file = split[split.length - 1];
                split = file.split(".");
                return path.replace(file, split[0] + "-" + ratio + "x." + split[1])
            } else {
                return path
            }
        } else {
            return path
        }
    }
    this.getPath = function(path) {
        if (path.strpos("http")) {
            return path
        }
        path = parseResolution(path);
        return (Hydra.CDN || "") + path
    };
    this.createImg = function(path, cors) {
        if (!path.strpos("http")) {
            path = parseResolution(path);
            path = (Hydra.CDN || "") + path
        }
        var img = new Image();
        if (cors) {
            img.crossOrigin = ""
        }
        img.src = path;
        if (this.store) {
            this.storeImg(img)
        }
        return img
    };
    this.storeImg = function(img) {
        if (this.inMemory) {
            this.store[img.src] = img
        }
    };
    this.releaseImg = function(path) {
        path = path.src ? path.src : path;
        delete this.store[path]
    }
}, "static");
Class(function XHR() {
    var _this = this;
    var _serial;
    var _android = window.location.href.strpos("file://");
    this.headers = {};

    function serialize(key, data) {
        if (typeof data === "object") {
            for (var i in data) {
                var newKey = key + "[" + i + "]";
                if (typeof data[i] === "object") {
                    serialize(newKey, data[i])
                } else {
                    _serial.push(newKey + "=" + data[i])
                }
            }
        } else {
            _serial.push(key + "=" + data)
        }
    }
    this.get = function(url, data, callback, type) {
        if (typeof data === "function") {
            type = callback;
            callback = data;
            data = null
        } else {
            if (typeof data === "object") {
                var string = "?";
                for (var key in data) {
                    string += key + "=" + data[key] + "&"
                }
                string = string.slice(0, -1);
                url += string
            }
        }
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, true);
        if (type == "text") {
            xhr.overrideMimeType("text/plain")
        }
        var xhrObject = new XHRObject();
        for (var key in _this.headers) {
            xhr.setRequestHeader(key, _this.headers)
        }
        xhr.onerror = xhrObject._error;
        xhr.send();
        xhr.onreadystatechange = function() {
            if (xhr.readyState == 4 && (_android || xhr.status == 200)) {
                if (typeof callback === "function") {
                    var data = xhr.responseText;
                    if (type == "text") {
                        callback(data)
                    } else {
                        callback(JSON.parse(data))
                    }
                }
            }
            if (xhr.status == 0 || xhr.status == 404 || xhr.status == 500) {
                xhrObject._error(xhr.status + " " + xhr.responseText)
            }
        };
        return xhrObject
    };
    this.post = function(url, data, callback, type, header) {
        if (typeof data === "function") {
            header = type;
            type = callback;
            callback = data;
            data = null
        } else {
            if (typeof data === "object") {
                if (callback == "json" || type == "json" || header == "json") {
                    data = JSON.stringify(data);
                    header = "json"
                } else {
                    _serial = new Array();
                    for (var key in data) {
                        serialize(key, data[key])
                    }
                    data = _serial.join("&");
                    data = data.replace(/\[/g, "%5B");
                    data = data.replace(/\]/g, "%5D");
                    _serial = null
                }
            }
        }
        var xhr = new XMLHttpRequest();
        xhr.open("POST", url, true);
        if (type == "text") {
            xhr.overrideMimeType("text/plain")
        }
        var xhrObject = new XHRObject();
        switch (header) {
            case "upload":
                header = "application/upload";
                break;
            case "json":
                header = "application/json";
                break;
            default:
                header = "application/x-www-form-urlencoded";
                break
        }
        xhr.setRequestHeader("Content-type", header);
        for (var key in _this.headers) {
            xhr.setRequestHeader(key, _this.headers)
        }
        xhr.onreadystatechange = function() {
            if (xhr.readyState == 4 && (_android || xhr.status == 200)) {
                if (typeof callback === "function") {
                    var data = xhr.responseText;
                    if (type == "text") {
                        callback(data)
                    } else {
                        callback(JSON.parse(data))
                    }
                }
            }
            if (xhr.status == 0 || xhr.status == 404 || xhr.status == 500) {
                xhrObject._error(xhr.status + " " + xhr.responseText)
            }
        };
        xhr.onerror = xhrObject._error;
        xhr.send(data);
        return xhrObject
    };

    function XHRObject() {
        var _this = this;
        this._error = function(msg) {
            _this.onError && _this.onError(msg);
            _this.onError = null
        }
    }
}, "Static");
Class(function Storage() {
    var _this = this;
    var _storage;
    (function() {
        testStorage()
    })();

    function testStorage() {
        try {
            if (window.localStorage) {
                try {
                    window.localStorage.test = 1;
                    window.localStorage.removeItem("test");
                    _storage = true
                } catch (e) {
                    _storage = false
                }
            } else {
                _storage = false
            }
        } catch (e) {
            _storage = false
        }
    }

    function cookie(key, value, expires) {
        var options;
        if (arguments.length > 1 && (value === null || typeof value !== "object")) {
            options = {};
            options.path = "/";
            options.expires = expires || 1;
            if (value === null) {
                options.expires = -1
            }
            if (typeof options.expires === "number") {
                var days = options.expires,
                    t = options.expires = new Date();
                t.setDate(t.getDate() + days)
            }
            return (document.cookie = [encodeURIComponent(key), "=", options.raw ? String(value) : encodeURIComponent(String(value)), options.expires ? "; expires=" + options.expires.toUTCString() : "", options.path ? "; path=" + options.path : "", options.domain ? "; domain=" + options.domain : "", options.secure ? "; secure" : ""].join(""))
        }
        options = value || {};
        var result, decode = options.raw ? function(s) {
            return s
        } : decodeURIComponent;
        return (result = new RegExp("(?:^|; )" + encodeURIComponent(key) + "=([^;]*)").exec(document.cookie)) ? decode(result[1]) : null
    }
    this.setCookie = function(key, value, expires) {
        cookie(key, value, expires)
    };
    this.getCookie = function(key) {
        return cookie(key)
    };
    this.set = function(key, value) {
        if (value != null && typeof value === "object") {
            value = JSON.stringify(value)
        }
        if (_storage) {
            if (value === null) {
                window.localStorage.removeItem(key)
            } else {
                window.localStorage[key] = value
            }
        } else {
            cookie(key, value, 365)
        }
    };
    this.get = function(key) {
        var val;
        if (_storage) {
            val = window.localStorage[key]
        } else {
            val = cookie(key)
        }
        if (val) {
            var char0;
            if (val.charAt) {
                char0 = val.charAt(0)
            }
            if (char0 == "{" || char0 == "[") {
                val = JSON.parse(val)
            }
            if (val == "true" || val == "false") {
                val = val == "true" ? true : false
            }
        }
        return val
    }
}, "Static");
Class(function DistributedWorker(_time) {
    Inherit(this, Component);
    var _this = this;
    var _callback, _total;
    _time = _time || 4;
    (function() {})();

    function loop() {
        while (_total < _time) {
            var start = performance.now();
            if (_callback) {
                _callback()
            } else {
                return
            }
            _total += performance.now() - start
        }
        _total = 0
    }
    this.start = function(callback) {
        Render.startRender(loop);
        _callback = callback;
        _total = 0
    };
    this.pause = function() {
        Render.stop(loop)
    };
    this.resume = function() {
        _total = 0;
        Render.start(loop)
    };
    this.stop = function() {
        Render.stopRender(loop);
        _callback = null
    };
    this.destroy = function() {
        this.stop();
        return this._destroy()
    };
    this.set("time", function(t) {
        _time = t
    });
    this.get("time", function() {
        return _time
    })
});
Class(function Thread(_class) {
    Inherit(this, Component);
    var _this = this;
    var _worker, _callbacks, _path, _mvc;
    (function() {
        init();
        importClasses();
        addListeners()
    })();

    function init() {
        _path = Thread.PATH;
        _callbacks = {};
        _worker = new Worker(_path + "assets/js/hydra/hydra-thread.js")
    }

    function importClasses() {
        importClass(Utils);
        importClass(MVC);
        importClass(Component);
        importClass(Events);
        importClass(_class, true)
    }

    function importClass(_class, scoped) {
        if (!_class) {
            return
        }
        var code, namespace;
        if (!scoped) {
            if (typeof _class !== "function") {
                var code = _class.constructor.toString();
                if (code.strpos("[native")) {
                    return
                }
                namespace = _class.constructor._namespace ? _class.constructor._namespace + "." : "";
                code = namespace + "Class(" + code + ', "static");'
            } else {
                namespace = _class._namespace ? _class._namespace + "." : "";
                code = namespace + "Class(" + _class.toString() + ");"
            }
        } else {
            code = _class.toString().replace("{", "!!!");
            code = code.split("!!!")[1];
            var splitChar = window._MINIFIED_ ? "=" : " ";
            while (code.strpos("this")) {
                var split = code.slice(code.indexOf("this."));
                var name = split.split("this.")[1].split(splitChar)[0];
                code = code.replace("this", "self");
                createMethod(name)
            }
            code = code.slice(0, -1)
        }
        _worker.postMessage({
            code: code
        })
    }

    function createMethod(name) {
        _this[name] = function(message, callback) {
            _this.send(name, message, callback)
        }
    }

    function addListeners() {
        _worker.addEventListener("message", workerMessage)
    }

    function workerMessage(e) {
        if (e.data.console) {
            console.log(e.data.message)
        } else {
            if (e.data.id) {
                var callback = _callbacks[e.data.id];
                if (callback) {
                    callback(e.data.message)
                }
                delete _callbacks[e.data.id]
            } else {
                if (e.data.emit) {
                    var callback = _callbacks[e.data.evt];
                    if (callback) {
                        callback(e.data.msg)
                    }
                } else {
                    var callback = _callbacks.transfer;
                    if (callback) {
                        callback(e.data)
                    }
                }
            }
        }
    }
    this.on = function(evt, callback) {
        _callbacks[evt] = callback
    };
    this.off = function(evt) {
        delete _callbacks[evt]
    };
    this.loadFunctions = function() {
        for (var i = 0; i < arguments.length; i++) {
            this.loadFunction(arguments[i])
        }
    };
    this.loadFunction = function(code) {
        code = code.toString();
        code = code.replace("(", "!!!");
        var split = code.split("!!!");
        var name = split[0].split(" ")[1];
        code = "self." + name + " = function(" + split[1];
        _worker.postMessage({
            code: code
        });
        createMethod(name)
    };
    this.importScript = function(path) {
        if (location.protocol.strpos("file")) {
            _worker.postMessage({
                path: "file:///android_asset/" + path,
                importScript: true
            })
        } else {
            _worker.postMessage({
                path: path.strpos("http") ? path : location.protocol + "//" + location.hostname + location.pathname + "/" + path,
                importScript: true
            })
        }
    };
    this.importClass = function() {
        for (var i = 0; i < arguments.length; i++) {
            var code = arguments[i];
            importClass(code)
        }
    };
    this.send = function(name, message, callback) {
        if (typeof name === "string") {
            var fn = name;
            message = message || {};
            message.fn = name
        } else {
            callback = message;
            message = name
        }
        var id = Utils.timestamp();
        if (callback) {
            _callbacks[id] = callback
        }
        if (message.transfer) {
            message.msg.id = id;
            message.msg.fn = message.fn;
            message.msg.transfer = true;
            _worker.postMessage(message.msg, message.buffer)
        } else {
            _worker.postMessage({
                message: message,
                id: id
            })
        }
    };
    this.destroy = function() {
        if (_worker.terminate) {
            _worker.terminate()
        }
        return this._destroy()
    }
}, function() {
    Thread.PATH = ""
});
Class(function Dev() {
    var _this = this;
    var _post, _alert;
    var _id = Utils.timestamp();
    (function() {
        if (Hydra.LOCAL) {
            Hydra.development(true)
        }
    })();

    function catchErrors() {
        window.onerror = function(message, file, line) {
            var string = message + " ::: " + file + " : " + line;
            if (_alert) {
                alert(string)
            }
            if (_post) {
                XHR.post(_post + "/api/data/debug", getDebugInfo(string))
            }
            if (_this.onError) {
                _this.onError(message, file, line)
            }
        }
    }

    function getDebugInfo(string) {
        var obj = {};
        obj.time = new Date().toString();
        obj.deviceId = _id;
        obj.err = string;
        obj.ua = Device.agent;
        obj.width = Stage.width;
        obj.height = Stage.height;
        obj.screenWidth = screen.width;
        obj.screenHeight = screen.height;
        return obj
    }
    this.alertErrors = function(url) {
        _alert = true;
        if (typeof url === "string") {
            url = [url]
        }
        for (var i = 0; i < url.length; i++) {
            if (location.href.strpos(url[i]) || location.hash.strpos(url[i])) {
                return catchErrors()
            }
        }
    };
    this.postErrors = function(url, post) {
        _post = post;
        if (typeof url === "string") {
            url = [url]
        }
        for (var i = 0; i < url.length; i++) {
            if (location.href.strpos(url[i])) {
                return catchErrors()
            }
        }
    };
    this.expose = function(name, val, force) {
        if (Hydra.LOCAL || force) {
            window[name] = val
        }
    };
    this.logServer = function(msg) {
        if (_post) {
            XHR.post(_post + "/api/data/debug", getDebugInfo(msg))
        }
    }
}, "Static");
Mobile.Class(function BaseModule(name) {
    Inherit(this, Component);
    var _this = this;
    var _name;
    var _callbacks = {};
    (function() {})();
    this.init = function(data) {
        _this = this;
        _name = name.constructor.toString().match(/function ([^\(]+)/)[1];
        Mobile.NativeCore.register(_name, this);
        this.send({
            fn: "init",
            data: data
        })
    };
    this.send = function(data, callback) {
        if (!data || !data.fn) {
            throw "Do not call send directly"
        }
        if (!_name) {
            throw "Must call init on module before sending data"
        }
        data = data || {};
        data._id = Utils.timestamp();
        data.nativeModule = _name;
        if (callback) {
            _callbacks[data._id] = callback
        }
        Mobile.NativeCore.send(data)
    };
    this.receive = function(data) {
        var id = data._id;
        var callback = _callbacks[id];
        if (callback) {
            callback(data);
            delete _callbacks[id]
        } else {
            _this.incoming(data)
        }
    };
    this.incoming = function() {}
});
Mobile.Class(function NativeCore() {
    Inherit(this, Component);
    var _this = this;
    var _api;
    var _references = {};
    this.active = false;
    (function() {
        initAPI()
    })();

    function initAPI() {
        if (window.nativeHydra) {
            _api = window.nativeHydra
        }
        if (window.webkit && window.webkit.messageHandlers) {
            _api = window.webkit.messageHandlers.nativeHydra
        }
        if (_api) {
            _this.active = true
        } else {
            if (!Device.detect("crios") && (Device.detect(["ipad", "iphone", "ios"]) && Mobile.version < 8) && !Device.detect(["safari", "twitter", "twios", "fbios", "fban", "facebook"])) {
                _this.active = true
            }
        }
    }
    this.send = function(data) {
        if (!this.active) {
            return
        }
        data = JSON.stringify(data);
        if (_api) {
            _api.postMessage(data)
        } else {
            window.location.hash = "nativeHydra:" + data
        }
    };
    this.receive = function(data) {
        if (data.jsModule) {
            _references[data.jsModule].receive(data)
        }
    };
    this.register = function(name, ref) {
        _references[name] = ref
    }
}, "Static");
Mobile.Class(function Events() {
    var _this = this;
    this.ACTIVE_STATUS = "mobile_active_status";
    this.NOTIFICATION = "mobile_notification";
    this.DEEPLINK = "mobile_deeplink";
    this.INTERNET_STATUS = "mobile_internet_status";
    this.GEOLOCATION_STATUS = "mobile_geo_status";
    this.GEOLOCATION_AUTH = "mobile_geo_auth";
    this.GEOLOCATION_ERROR = "mobile_geo_error";
    this.GEOLOCATION_UPDATE = "mobile_geo_update";
    this.GEOLOCATION_HEADING = "mobile_geo_heading"
}, "Static");
Mobile.Class(function Files() {
    Inherit(this, Mobile.BaseModule);
    var _this = this;
    var _get = XHR.get;
    (function() {
        _this.init();
        if (_this.storeLocally) {
            updateXHR()
        }
    })();

    function updateXHR() {
        if (!Mobile.NativeCore.active) {
            return
        }
        XHR.get = function(url, data, callback, type) {
            if (typeof data === "function") {
                type = callback;
                callback = data;
                data = null
            } else {
                if (typeof data === "object") {
                    var string = "?";
                    for (var key in data) {
                        string += key + "=" + data[key] + "&"
                    }
                    string = string.slice(0, -1);
                    url += string
                }
            }
            var fileSplit = url.split("/");
            var path = fileSplit[fileSplit.length - 1];
            if (Mobile.System.CONNECTIVIY) {
                _get(url, data, function(d) {
                    if (callback) {
                        _this.write(path, d);
                        callback(d)
                    }
                }, type)
            } else {
                _this.read(path, callback)
            }
        }
    }
    this.write = function(file, content, callback) {
        if (typeof content !== "string") {
            content = JSON.stringify(content)
        }
        this.send({
            fn: "writeFile",
            file: file,
            content: content
        }, function(data) {
            if (callback) {
                callback(data.success)
            }
        })
    };
    this.read = function(file, callback) {
        if (!callback) {
            throw "Mobile.Files.read requires callback"
        }
        this.send({
            fn: "readFile",
            file: file
        }, function(data) {
            if (data.content && file.strpos("json")) {
                data.content = JSON.parse(data.content)
            }
            callback(data.content)
        })
    };
    this.unlink = function(file, callback) {
        this.send({
            fn: "deleteFile",
            file: file
        }, function(data) {
            if (callback) {
                callback(data.success)
            }
        })
    };
    this.getPath = function(file, callback) {
        this.send({
            fn: "getPath",
            file: file
        }, function(data) {
            callback(data.path)
        })
    };
    this.download = function(url, callback) {
        var fileName = url.split("/");
        fileName = fileName[fileName.length - 1];
        this.send({
            fn: "downloadFile",
            url: url,
            fileName: fileName
        }, function(data) {
            callback(data.success)
        })
    }
}, "Static");
Mobile.Class(function Geolocation() {
    Inherit(this, Mobile.BaseModule);
    var _this = this;
    this.COORDS = {};
    this.HEADING = {};
    this.BEST = "ACCURACY_BEST";
    this.BEST_NAV = "ACCURACY_BEST_NAV";
    this.NEAREST_TEN = "ACCURACY_NEAREST_TEN";
    this.HUNDRED = "ACCURACY_HUNDRED";
    this.KILOMETER = "ACCURACY_KILOMETER";
    this.THREE_KILOMETER = "ACCURACY_THREE_KILOMETER";
    (function() {
        _this.init()
    })();

    function handleStatus(e) {
        _this.events.fire(Mobile.Events.GEOLOCATION_STATUS, {
            type: e.locationStatus
        })
    }

    function handleAuth(e) {
        _this.events.fire(Mobile.Events.GEOLOCATION_AUTH, {
            status: e.status
        })
    }

    function handleError(e) {
        _this.events.fire(Mobile.Events.GEOLOCATION_ERROR)
    }

    function handlePermission(e) {
        _this.ACTIVE = e.status == "ALLOWED";
        _this.TYPE = e.type
    }

    function handleUpdate(e) {
        _this.COORDS.latitude = e.lat;
        _this.COORDS.longitude = e.lng;
        _this.events.fire(Mobile.Events.GEOLOCATION_UPDATE, _this.COORDS)
    }

    function handleUpdateHeading(e) {
        _this.HEADING.magnetic = e.magneticHeading;
        _this.HEADING.trueHeading = e.trueHeading;
        _this.events.fire(Mobile.Events.GEOLOCATION_HEADING, _this.HEADING)
    }
    this.set("accuracy", function(val) {
        if (!val) {
            throw "Accuracy not defined!"
        }
        this.send({
            fn: "setAccuracy",
            accuracy: val || "ACCURACY_BEST"
        })
    });
    this.activate = function(always) {
        this.send({
            fn: "activate",
            always: !!always
        })
    };
    this.requestPermission = function(always) {
        this.send({
            fn: "requestPermission",
            always: !!always
        })
    };
    this.stop = function() {
        this.send({
            fn: "stop"
        })
    };
    this.activateHeading = function() {
        this.send({
            fn: "activateHeading"
        })
    };
    this.stopHeading = function() {
        this.send({
            fn: "stopHeading"
        })
    };
    this.requestLocation = function() {
        this.send({
            fn: "requestLocation"
        })
    };
    this.checkPermission = function(callback) {
        this.send({
            fn: "permission"
        }, function(data) {
            handlePermission(data);
            callback && callback({
                type: data.type,
                enabled: data.status == "ALLOWED"
            })
        })
    };
    this.incoming = function(e) {
        switch (e.fn) {
            case "status":
                handleStatus(e);
                break;
            case "authorization":
                handleAuth(e);
                break;
            case "failError":
                handleError(e);
                break;
            case "permission":
                handlePermission(e);
                break;
            case "update":
                handleUpdate(e);
                break;
            case "updateHeading":
                handleUpdateHeading(e);
                break
        }
    }
}, "static");
Mobile.Class(function Notifications() {
    Inherit(this, Mobile.BaseModule);
    var _this = this;
    this.FIRED = "mobile_notification_fired";
    (function() {
        _this.init()
    })();

    function firedNotification(data) {
        if (typeof data.userInfo === "string" && data.userInfo.strpos("{")) {
            data.userInfo = JSON.parse(data.userInfo)
        }
        if (data.userInfo._time) {
            var latency = Date.now() - data.userInfo._time;
            if (latency < data.userInfo._scheduled + 100) {
                return
            }
        }
        _this.events.fire(Mobile.Events.NOTIFICATION, {
            data: data.userInfo
        });
        _this.DATA = data.userInfo
    }

    function handleDeeplink(data) {
        if (!data.path || !data.path.length) {
            return
        }
        _this.events.fire(Mobile.Events.DEEPLINK, {
            path: data.path
        });
        _this.DEEPLINK = data.path
    }
    this.enable = function() {
        this.send({
            fn: "enable"
        })
    };
    this.localNotification = function(action, body, data, time) {
        time = time || 0;
        data = data || {};
        data._time = Date.now();
        data._scheduled = time * 1000;
        this.send({
            fn: "localNotification",
            body: body,
            time: time,
            action: action,
            localData: data
        })
    };
    this.alert = function(title, message, actions, config, callback) {
        if (actions && !Array.isArray(actions)) {
            config = actions;
            actions = null
        }
        if (typeof config === "function") {
            callback = config;
            config = null
        }
        actions = actions || ["Close"];
        config = config || {};
        if (!config.style) {
            config.style = "alert"
        }
        if (Mobile.os == "Android") {
            for (var key in actions) {
                if (typeof actions[key] === "string") {
                    actions[key] = {
                        name: actions[key],
                        style: "normal"
                    }
                }
            }
        }
        this.send({
            fn: "alert",
            title: title || "EMPTY TITLE",
            message: message || "EMPTY MESSAGE",
            config: config,
            actions: actions
        }, function(e) {
            callback && callback(e.title)
        })
    };
    this.incoming = function(data) {
        switch (data.fn) {
            case "fired":
                firedNotification(data);
                break;
            case "deeplink":
                handleDeeplink(data);
                break
        }
    }
}, "static");
Mobile.Class(function Social() {
    Inherit(this, Mobile.BaseModule);
    var _this = this;
    (function() {
        _this.init()
    })();
    this.shareTwitter = function(text, callback) {
        this.send({
            fn: "twitter",
            params: text
        }, callback)
    };
    this.shareFacebook = function(params, callback) {
        params = params || {};
        if (!params.text) {
            params.text = ""
        }
        if (!params.image) {
            params.image = ""
        }
        if (!params.url) {
            params.url = ""
        }
        this.send({
            fn: "facebook",
            params: params
        }, callback)
    };
    this.shareMail = function(params, callback) {
        params = params || {};
        if (!params.subject) {
            params.subject = ""
        }
        if (!params.body) {
            params.body = ""
        }
        this.send({
            fn: "email",
            params: params
        }, callback)
    };
    this.shareImage = function(params, callback) {
        params = params || {};
        if (!params.image) {
            params.image = ""
        }
        this.send({
            fn: "image",
            params: params
        }, callback)
    }
}, "Static");
Mobile.Class(function System() {
    Inherit(this, Mobile.BaseModule);
    var _this = this;
    var _reachable = {
        fn: "reachability"
    };
    this.ANY = 0;
    this.LANDSCAPE = 1;
    this.PORTRAIT = 2;
    this.DARK_STATUS = 0;
    this.LIGHT_STATUS = 1;
    this.CONNECTIVITY = typeof navigator.onLine === "boolean" ? navigator.onLine : true;
    this.background = false;
    (function() {
        _this.init();
        updateNative();
        checkConnection();
        Hydra.ready(domReady)
    })();

    function domReady() {
        _this.send({
            fn: "domReady"
        });
        if (!Mobile.isNative() && typeof navigator.onLine === "boolean") {
            window.addEventListener("online", progressiveOffline);
            window.addEventListener("offline", progressiveOffline)
        }
    }

    function updateNative() {
        if (Mobile.NativeCore.active) {
            window.getURL = function(url, target) {
                _this.send({
                    fn: "openURL",
                    params: url
                })
            }
        }
    }

    function checkConnection() {
        _this.send(_reachable, connectionStatus);
        setTimeout(checkConnection, Mobile.os == "iOS" ? 2000 : 5000)
    }

    function deviceInfo(data) {
        delete data.jsModule;
        delete data.fn;
        for (var i in data) {
            _this[i] = data[i]
        }
    }

    function activate() {
        _this.events.fire(Mobile.Events.ACTIVE_STATUS, {
            type: "active"
        });
        _this.background = false
    }

    function deactivate() {
        _this.events.fire(Mobile.Events.ACTIVE_STATUS, {
            type: "inactive"
        });
        _this.background = true
    }

    function connectionStatus(e) {
        if (_this.CONNECTIVITY && !e.reachable) {
            _this.events.fire(Mobile.Events.INTERNET_STATUS, {
                connected: false
            })
        } else {
            if (e.reachable && !_this.CONNECTIVITY) {
                _this.events.fire(Mobile.Events.INTERNET_STATUS, {
                    connected: true
                })
            }
        }
        _this.CONNECTIVITY = e.reachable
    }

    function progressiveOffline() {
        var reachable = navigator.onLine;
        if (_this.CONNECTIVITY && !reachable) {
            _this.events.fire(Mobile.Events.INTERNET_STATUS, {
                connected: false
            })
        } else {
            if (reachable && !_this.CONNECTIVITY) {
                _this.events.fire(Mobile.Events.INTERNET_STATUS, {
                    connected: true
                })
            }
        }
        _this.CONNECTIVITY = reachable
    }
    this.set("hideStatusBar", function(bool) {
        this.send({
            fn: "toggleStatusBar",
            params: !bool
        })
    });
    this.set("statusBarColor", function(c) {
        var color = new Color(c);
        this.send({
            fn: "statusBarColor",
            params: Mobile.os == "iOS" ? color.getHex() : c
        })
    });
    this.set("statusBarText", function(val) {
        if (typeof val !== "number") {
            throw "Mobile.System.statusBarText must be a number"
        }
        this.send({
            fn: "statusBarText",
            params: val
        })
    });
    this.set("orientation", function(val) {
        this.send({
            fn: "orientation",
            params: val
        })
    });
    this.incoming = function(data) {
        switch (data.fn) {
            case "deviceInfo":
                deviceInfo(data);
                break;
            case "appActive":
                activate();
                break;
            case "appInBackground":
                deactivate();
                break;
            case "appTerminating":
                deactivate();
                break;
            case "_error":
                throw data.message;
                break
        }
    };
    this.vibrate = function(time) {
        this.send({
            fn: "vibrate",
            params: time
        })
    };
    this.hideKeyboard = function() {
        this.send({
            fn: "hideKeyboard"
        })
    };
    this.detectDevice = function(str) {
        if (!_this.model) {
            return false
        }
        return _this.model.toLowerCase().strpos(str) || _this.name.toLowerCase().strpos(str)
    }
}, "Static");
window.ASSETS = ["assets/geometry/earth.json", "assets/geometry/mobile/net.json", "assets/geometry/mobile/netBase.json", "assets/geometry/mobile/planeFold.json", "assets/geometry/plane.json", "assets/images/common/iologo.png", "assets/images/common/logo-mask.png", "assets/images/common/logo.png", "assets/images/earth/glow.png", "assets/images/earth/shadows.jpg", "assets/images/icons/arrow-back.png", "assets/images/icons/arrow-down.png", "assets/images/icons/arrow-up.png", "assets/images/icons/circle.png", "assets/images/icons/close-black.png", "assets/images/icons/close-purple.png", "assets/images/icons/close.png", "assets/images/icons/done-button.png", "assets/images/icons/hand-catch.png", "assets/images/icons/hand-open.png", "assets/images/icons/hand-throw.png", "assets/images/icons/info.png", "assets/images/icons/pin.png", "assets/images/icons/plane-button-bg.png", "assets/images/icons/plane-button.png", "assets/images/icons/plane-logo-purple.png", "assets/images/icons/plane-logo.png", "assets/images/icons/plus.png", "assets/images/icons/rotate-arrow.png", "assets/images/icons/rotate-button.png", "assets/images/icons/share.png", "assets/images/loader/plane-logo-black.png", "assets/images/loader/plane-logo.png", "assets/images/loader/spinner.png", "assets/images/plane/border.jpg", "assets/images/plane/fold.jpg", "assets/images/plane/matcap.jpg", "assets/images/plane/matcap2.jpg", "assets/images/plane/netmatcap.jpg", "assets/images/plane/shadow.png", "assets/images/stamps/io/0.png", "assets/images/stamps/io/1.png", "assets/images/stamps/io/2.png", "assets/images/stamps/io/3.png", "assets/images/stamps/outlines/0.png", "assets/images/stamps/outlines/1.png", "assets/images/stamps/outlines/2.png", "assets/images/stamps/outlines/3.png", "assets/images/stamps/outlines/4.png", "assets/images/stamps/outlines/5.png", "assets/images/stamps/outlines/6.png", "assets/images/stamps/outlines/7.png", "assets/images/stamps/peace/0.png", "assets/images/stamps/peace/1.png", "assets/images/stamps/peace/2.png", "assets/images/stamps/peace/3.png", "assets/images/stamps/peace/4.png", "assets/images/stamps/special/0.png", "assets/images/stamps/special/1.png", "assets/images/stamps/special/2.png", "assets/images/stamps/special/3.png", "assets/images/stamps/special/4.png", "assets/images/stamps/special/5.png", "assets/images/stamps/special/6.png", "assets/images/stamps/special/7.png", "assets/images/stamps/special/8.png", "assets/images/stamps/special/9.png", "assets/images/stamps/splat.png", "assets/images/stamps/stamp-test.png", "assets/js/lib/three.min.js", "assets/shaders/compiled.vs"];
ASSETS.RES = {};
Class(function Config() {
    this.BUTTERFLY_COUNT = 50;
    this.BUTTERFLY_THREAD_COUNT = 1;
    this.BEAST = Device.graphics.webgl.gpu && Device.graphics.webgl.gpu.strpos("titan");
    this.CDN = (function() {
        if (location.protocol.strpos("file")) {
            return ""
        }
        if (window._BUCKET_) {
            return "https://storage.googleapis.com/" + window._BUCKET_ + "/"
        }
        return ""
    })();
    this.PROXY = (function() {
        if (window.location.port == "8080") {
            return window.location.protocol + "//" + window.location.hostname + ":" + window.location.port + "/"
        }
        if (location.protocol.strpos("file")) {
            return ""
        }
        if (window._BUCKET_) {
            return window.location.protocol + "//" + window.location.hostname + "/cdn/" + window._BUCKET_ + "/"
        }
        return ""
    })();
    this.APP_ENGINE = "https://at-socketnetwork.appspot.com";
    this.STAMPS_COLORS = ["#D32F2F", "#C2185B", "#7B1FA2", "#303F9F", "#1976D2", "#0097A7", "#00796B", "#689F38", "#AFB42B", "#dfa410", "#F57C00", "#E64A19", "#455A64"];
    this.LOCALSTORAGE_KEY = "20160920";
    this.BEAST = Device.graphics.webgl.gpu && Device.graphics.webgl.gpu.strpos("titan");
    this.THROTTLE_SECOND = 5;
    this.THROTTLE_SECOND_IO = 10;
    this.LOCATIONS = [{
        location: "Mountain View, USA",
        coords: {
            lat: 36.86,
            lng: -121.33
        },
        priority: 6,
        realtime: true,
        country: "US"
    }, {
        location: "Los Angeles, USA",
        coords: {
            lat: 34.0522,
            lng: -118.2436
        },
        priority: 4,
        realtime: true,
        country: "US"
    }, {
        location: "New York, USA",
        coords: {
            lat: 40.712,
            lng: -74.005
        },
        priority: 4,
        realtime: true,
        country: "US"
    }, {
        location: "Brussels, Belgium",
        coords: {
            lat: 50.55,
            lng: 4.351
        },
        priority: 4,
        realtime: true,
        country: "BE"
    }, {
        location: "Paris, France",
        coords: {
            lat: 48.856,
            lng: 2.352
        },
        priority: 4,
        realtime: false,
        country: "FR"
    }, {
        location: "London, England",
        coords: {
            lat: 51.507,
            lng: -0.127
        },
        priority: 4,
        realtime: true,
        country: "GB"
    }, {
        location: "Belo Horizonte, Brazil",
        coords: {
            lat: -19.916681,
            lng: -43.9344
        },
        priority: 4,
        realtime: true,
        country: "BR"
    }, {
        location: "Dubai, UAE",
        coords: {
            lat: 25.204,
            lng: 55.27
        },
        priority: 4,
        realtime: true,
        country: "AE"
    }, {
        location: "Sydney, Australia",
        coords: {
            lat: -33.867487,
            lng: 151.20699
        },
        priority: 4,
        realtime: true,
        country: "AU"
    }, {
        location: "Montreal, Canada",
        coords: {
            lat: 45.501689,
            lng: -73.567256
        },
        priority: 4,
        realtime: true,
        country: "CA"
    }, {
        location: "Bangalore, India",
        coords: {
            lat: 12.9715,
            lng: 77.5945
        },
        priority: 4,
        realtime: true,
        country: "IN"
    }, {
        location: "Tokyo, Japan",
        coords: {
            lat: 35.689,
            lng: 139.691
        },
        priority: 4,
        realtime: false,
        country: "JP"
    }, {
        location: "Austin, USA",
        coords: {
            lat: 30.267153,
            lng: -97.743061
        },
        priority: 4,
        realtime: true,
        country: "US"
    }, {
        location: "Seattle, USA",
        coords: {
            lat: 47.606209,
            lng: -122.332071
        },
        priority: 4,
        realtime: true,
        country: "US"
    }, {
        location: "Hamburg, Germany",
        coords: {
            lat: 53.551085,
            lng: 9.993682
        },
        priority: 4,
        realtime: true,
        country: "DE"
    }, {
        location: "Munich, Germany",
        coords: {
            lat: 48.135125,
            lng: 11.581981
        },
        priority: 4,
        realtime: true,
        country: "DE"
    }, {
        location: "Dublin, Ireland",
        coords: {
            lat: 53.349805,
            lng: -6.26031
        },
        priority: 4,
        realtime: true,
        country: "IE"
    }, {
        location: "Istanbul, Turkey",
        coords: {
            lat: 41.008238,
            lng: 28.978359
        },
        priority: 4,
        realtime: true,
        country: "TR"
    }, {
        location: "Gurgaon, India",
        coords: {
            lat: 28.459497,
            lng: 77.026638
        },
        priority: 4,
        realtime: true,
        country: "IN"
    }, {
        location: "Hyderabad, India",
        coords: {
            lat: 17.385044,
            lng: 78.486671
        },
        priority: 4,
        realtime: true,
        country: "IN"
    }, {
        location: "Colombo, Sri Lanka",
        coords: {
            lat: 6.927079,
            lng: 79.861243
        },
        priority: 4,
        realtime: true,
        country: "LK"
    }, {
        location: "Bangkok, Thailand",
        coords: {
            lat: 13.756331,
            lng: 100.501765
        },
        priority: 4,
        realtime: true,
        country: "TH"
    }, {
        location: "Johannesburg, SA",
        coords: {
            lat: -26.204103,
            lng: 28.047305
        },
        priority: 4,
        realtime: false,
        country: "ZA"
    }, {
        location: "Atlanta, USA",
        coords: {
            lat: 33.748995,
            lng: -84.387982
        },
        priority: 2,
        realtime: false,
        country: "US"
    }, {
        location: "Boulder, USA",
        coords: {
            lat: 40.014986,
            lng: -105.270546
        },
        priority: 2,
        realtime: false,
        country: "US"
    }, {
        location: "Chicago, USA",
        coords: {
            lat: 41.878114,
            lng: -87.629798
        },
        priority: 2,
        realtime: false,
        country: "US"
    }, {
        location: "San Francisco, USA",
        coords: {
            lat: 37.774929,
            lng: -122.419416
        },
        priority: 2,
        realtime: false,
        country: "US"
    }, {
        location: "Prague, Czech Republic",
        coords: {
            lat: 50.075538,
            lng: 14.4378
        },
        priority: 2,
        realtime: false,
        country: "CZ"
    }, {
        location: "Copenhagen, Denmark",
        coords: {
            lat: 55.676097,
            lng: 12.568337
        },
        priority: 2,
        realtime: false,
        country: "DK"
    }, {
        location: "Helsinki, Finland",
        coords: {
            lat: 60.169856,
            lng: 24.938379
        },
        priority: 2,
        realtime: false,
        country: "FI"
    }, {
        location: "Athens, Greece",
        coords: {
            lat: 33.951935,
            lng: -83.357567
        },
        priority: 2,
        realtime: false,
        country: "GR"
    }, {
        location: "Budapest, Hungary",
        coords: {
            lat: 47.497912,
            lng: 19.040235
        },
        priority: 2,
        realtime: false,
        country: "HU"
    }, {
        location: "Milan, Italy",
        coords: {
            lat: 45.465422,
            lng: 9.185924
        },
        priority: 2,
        realtime: false,
        country: "IT"
    }, {
        location: "Amsterdam, Netherlands",
        coords: {
            lat: 52.370216,
            lng: 4.895168
        },
        priority: 2,
        realtime: false,
        country: "NL"
    }, {
        location: "Oslo, Norway",
        coords: {
            lat: 59.913869,
            lng: 10.752245
        },
        priority: 2,
        realtime: false,
        country: "NO"
    }, {
        location: "Warsaw, Poland",
        coords: {
            lat: 52.229676,
            lng: 21.012229
        },
        priority: 2,
        realtime: false,
        country: "PL"
    }, {
        location: "Warsaw, Portugal",
        coords: {
            lat: 38.722252,
            lng: -9.139337
        },
        priority: 2,
        realtime: false,
        country: "PT"
    }, {
        location: "Moscow, Russia",
        coords: {
            lat: 55.755826,
            lng: 37.6173
        },
        priority: 2,
        realtime: false,
        country: "RU"
    }, {
        location: "Madrid, Spain",
        coords: {
            lat: 40.416775,
            lng: -3.70379
        },
        priority: 2,
        realtime: false,
        country: "ES"
    }, {
        location: "Stockholm, Sweden",
        coords: {
            lat: 59.329323,
            lng: 18.068581
        },
        priority: 2,
        realtime: false,
        country: "SE"
    }, {
        location: "ZÃ¼rich, Switzerland",
        coords: {
            lat: 47.376887,
            lng: 8.541694
        },
        priority: 2,
        realtime: false,
        country: "CH"
    }, {
        location: "Toronto, Canada",
        coords: {
            lat: 43.653226,
            lng: -79.383184
        },
        priority: 2,
        realtime: false,
        country: "CA"
    }, {
        location: "Buenos Aires, Argentina",
        coords: {
            lat: -34.603684,
            lng: -58.381559
        },
        priority: 2,
        realtime: false,
        country: "AR"
    }, {
        location: "Sao Paulo, Brazil",
        coords: {
            lat: -23.55052,
            lng: -46.633309
        },
        priority: 2,
        realtime: false,
        country: "BR"
    }, {
        location: "Mexico City, Mexico",
        coords: {
            lat: 19.432608,
            lng: -99.133208
        },
        priority: 2,
        realtime: false,
        country: "MX"
    }, {
        location: "Tel Aviv, Israel",
        coords: {
            lat: 32.0853,
            lng: 34.781768
        },
        priority: 2,
        realtime: false,
        country: "IL"
    }, {
        location: "Beijing, China",
        coords: {
            lat: 39.904211,
            lng: 116.407395
        },
        priority: 2,
        realtime: false,
        country: "CN"
    }, {
        location: "Mumbai, India",
        coords: {
            lat: 19.075984,
            lng: 72.877656
        },
        priority: 2,
        realtime: false,
        country: "IN"
    }, {
        location: "Kuala Lumpur, Malaysia",
        coords: {
            lat: 3.139003,
            lng: 101.686855
        },
        priority: 2,
        realtime: false,
        country: "MY"
    }, {
        location: "Taipei, Taiwan",
        coords: {
            lat: 25.032969,
            lng: 121.565418
        },
        priority: 2,
        realtime: false,
        country: "TW"
    }, {
        location: "Nairobi, Kenya",
        coords: {
            lat: -1.292066,
            lng: 36.821946
        },
        priority: 2,
        realtime: false,
        country: "KE"
    }, {
        location: "Ann Arbor, USA",
        coords: {
            lat: 42.280826,
            lng: -83.743038
        },
        priority: 1,
        realtime: false,
        country: "US"
    }, {
        location: "Cambridge, USA",
        coords: {
            lat: 42.373616,
            lng: -71.109734
        },
        priority: 1,
        realtime: false,
        country: "US"
    }, {
        location: "Detroit, USA",
        coords: {
            lat: 42.331427,
            lng: -83.045754
        },
        priority: 1,
        realtime: false,
        country: "US"
    }, {
        location: "Orange County, USA",
        coords: {
            lat: 33.717471,
            lng: -117.831143
        },
        priority: 1,
        realtime: false,
        country: "US"
    }, {
        location: "Kirkland, USA",
        coords: {
            lat: 47.681488,
            lng: -122.208735
        },
        priority: 1,
        realtime: false,
        country: "US"
    }, {
        location: "Madison, USA",
        coords: {
            lat: 43.073052,
            lng: -89.40123
        },
        priority: 1,
        realtime: false,
        country: "US"
    }, {
        location: "Pittsburgh, USA",
        coords: {
            lat: 40.440625,
            lng: -79.995886
        },
        priority: 1,
        realtime: false,
        country: "US"
    }, {
        location: "Reston, USA",
        coords: {
            lat: 38.958631,
            lng: -77.357003
        },
        priority: 1,
        realtime: false,
        country: "US"
    }, {
        location: "Washington DC, USA",
        coords: {
            lat: 38.907192,
            lng: -77.036871
        },
        priority: 1,
        realtime: false,
        country: "US"
    }, {
        location: "Aarhus, Denmark",
        coords: {
            lat: 56.162939,
            lng: 10.203921
        },
        priority: 1,
        realtime: false,
        country: "DK"
    }, {
        location: "Berlin, Germany",
        coords: {
            lat: 52.520007,
            lng: 13.404954
        },
        priority: 1,
        realtime: false,
        country: "DE"
    }, {
        location: "KrakÃ³w, Poland",
        coords: {
            lat: 50.06465,
            lng: 19.94498
        },
        priority: 1,
        realtime: false,
        country: "PL"
    }, {
        location: "Wroclaw, Poland",
        coords: {
            lat: 51.107885,
            lng: 17.038538
        },
        priority: 1,
        realtime: false,
        country: "PL"
    }, {
        location: "St. Petersburg, Russia",
        coords: {
            lat: 59.93428,
            lng: 30.335099
        },
        priority: 1,
        realtime: false,
        country: "RU"
    }, {
        location: "Bratislava, Slovakia",
        coords: {
            lat: 48.148596,
            lng: 17.107748
        },
        priority: 1,
        realtime: false,
        country: "SI"
    }, {
        location: "Kiev, Ukraine",
        coords: {
            lat: 50.4501,
            lng: 30.5234
        },
        priority: 1,
        realtime: false,
        country: "UA"
    }, {
        location: "Manchester, England",
        coords: {
            lat: 53.480759,
            lng: -2.242631
        },
        priority: 1,
        realtime: false,
        country: "GB"
    }, {
        location: "Waterloo, Canada",
        coords: {
            lat: 43.464258,
            lng: -80.52041
        },
        priority: 1,
        realtime: false,
        country: "CA"
    }, {
        location: "Santiago, Chile",
        coords: {
            lat: 42.878213,
            lng: -8.544844
        },
        priority: 1,
        realtime: false,
        country: "CL"
    }, {
        location: "Bogota, Colombia",
        coords: {
            lat: 4.710989,
            lng: -74.072092
        },
        priority: 1,
        realtime: false,
        country: "CO"
    }, {
        location: "New Cairo, Egypt",
        coords: {
            lat: 30.007413,
            lng: 31.491318
        },
        priority: 1,
        realtime: false,
        country: "EG"
    }, {
        location: "Haifa, Israel",
        coords: {
            lat: 32.794046,
            lng: 34.989571
        },
        priority: 1,
        realtime: false,
        country: "IL"
    }, {
        location: "Guangzhou, China",
        coords: {
            lat: 23.12911,
            lng: 113.264385
        },
        priority: 1,
        realtime: false,
        country: "CN"
    }, {
        location: "Shanghai, China",
        coords: {
            lat: 31.230416,
            lng: 121.473701
        },
        priority: 1,
        realtime: false,
        country: "CN"
    }, {
        location: "Auckland, New Zealand",
        coords: {
            lat: -36.84846,
            lng: 174.763332
        },
        priority: 1,
        realtime: false,
        country: "NZ"
    }, {
        location: "Accra, Ghana",
        coords: {
            lat: 5.603717,
            lng: -0.186964
        },
        priority: 1,
        realtime: false,
        country: "GH"
    }, {
        location: "Lagos, Nigeria",
        coords: {
            lat: 6.524379,
            lng: 3.379206
        },
        priority: 1,
        realtime: false,
        country: "NG"
    }, {
        location: "Dakar, Senegal",
        coords: {
            lat: 14.764504,
            lng: -17.366029
        },
        priority: 1,
        realtime: false,
        country: "SN"
    }, {
        location: "Kampala, Uganda",
        coords: {
            lat: 0.347596,
            lng: 32.58252
        },
        priority: 1,
        realtime: false,
        country: "UG"
    }, ];
    this.IO_LOCATION_LIST = [{
        location: "Mountain View, USA",
        coords: {
            lat: 36.86,
            lng: -121.33
        },
        priority: 6,
        realtime: true,
        country: "US"
    }, {
        location: "Paris, France",
        coords: {
            lat: 48.856,
            lng: 2.352
        },
        priority: 4,
        realtime: false,
        country: "FR"
    }, {
        location: "Los Angeles, USA",
        coords: {
            lat: 34.0522,
            lng: -118.2436
        },
        priority: 4,
        realtime: true,
        country: "US"
    }, {
        location: "New York, USA",
        coords: {
            lat: 40.712,
            lng: -74.005
        },
        priority: 4,
        realtime: true,
        country: "US"
    }, {
        location: "Brussels, Belgium",
        coords: {
            lat: 50.55,
            lng: 4.351
        },
        priority: 4,
        realtime: true,
        country: "BE"
    }, {
        location: "Belo Horizonte, Brazil",
        coords: {
            lat: -19.916681,
            lng: -43.9344
        },
        priority: 4,
        realtime: true,
        country: "BR"
    }, {
        location: "Dubai, UAE",
        coords: {
            lat: 25.204,
            lng: 55.27
        },
        priority: 4,
        realtime: true,
        country: "US",
        country: "AE"
    }, {
        location: "Sydney, Australia",
        coords: {
            lat: -33.867487,
            lng: 151.20699
        },
        priority: 4,
        realtime: true,
        country: "AU"
    }, {
        location: "Gurgaon, India",
        coords: {
            lat: 28.459497,
            lng: 77.026638
        },
        priority: 4,
        realtime: true,
        country: "IN"
    }, {
        location: "Montreal, Canada",
        coords: {
            lat: 45.501689,
            lng: -73.567256
        },
        priority: 4,
        realtime: true,
        country: "CA"
    }, {
        location: "Mountain View, USA",
        coords: {
            lat: 36.86,
            lng: -121.33
        },
        priority: 6,
        realtime: true,
        country: "US"
    }, {
        location: "Hamburg, Germany",
        coords: {
            lat: 53.551085,
            lng: 9.993682
        },
        priority: 4,
        realtime: true,
        country: "DE"
    }, {
        location: "Bangalore, India",
        coords: {
            lat: 12.9715,
            lng: 77.5945
        },
        priority: 4,
        realtime: true,
        country: "IN"
    }, {
        location: "London, England",
        coords: {
            lat: 51.507,
            lng: -0.127
        },
        priority: 4,
        realtime: true,
        country: "GB"
    }, {
        location: "Tokyo, Japan",
        coords: {
            lat: 35.689,
            lng: 139.691
        },
        priority: 4,
        realtime: false,
        country: "JP"
    }, {
        location: "Austin, USA",
        coords: {
            lat: 30.267153,
            lng: -97.743061
        },
        priority: 4,
        realtime: true,
        country: "US"
    }, {
        location: "Munich, Germany",
        coords: {
            lat: 48.135125,
            lng: 11.581981
        },
        priority: 4,
        realtime: true,
        country: "DE"
    }, {
        location: "Dublin, Ireland",
        coords: {
            lat: 53.349805,
            lng: -6.26031
        },
        priority: 4,
        realtime: true,
        country: "IE"
    }, {
        location: "Istanbul, Turkey",
        coords: {
            lat: 41.008238,
            lng: 28.978359
        },
        priority: 4,
        realtime: true,
        country: "TR"
    }, {
        location: "Hyderabad, India",
        coords: {
            lat: 17.385044,
            lng: 78.486671
        },
        priority: 4,
        realtime: true,
        country: "IN"
    }, {
        location: "Seattle, USA",
        coords: {
            lat: 47.606209,
            lng: -122.332071
        },
        priority: 4,
        realtime: true,
        country: "US"
    }, {
        location: "Colombo, Sri Lanka",
        coords: {
            lat: 6.927079,
            lng: 79.861243
        },
        priority: 4,
        realtime: true,
        country: "LK"
    }, {
        location: "Bangkok, Thailand",
        coords: {
            lat: 13.756331,
            lng: 100.501765
        },
        priority: 4,
        realtime: true,
        country: "TH"
    }, {
        location: "Johannesburg, SA",
        coords: {
            lat: -26.204103,
            lng: 28.047305
        },
        priority: 4,
        realtime: false,
        country: "ZA"
    }]
}, "static");
Class(function Copy() {
    Inherit(this, Component);
    var _this = this;
    this.get("CATCH", function() {
        var msgs = ["Nice catch!", "Got one!", ];
        return msgs[Math.floor(Math.random() * msgs.length)]
    });
    this.INTRO = "Throw and catch<br />paper planes with people<br />around the world";
    this.INTRO_DESKTOP = "Use your phone to throw and catch<br />paper planes with people around the world";
    this.BLOCK_SUB = "This is a mobile companion experience<br/>Join in at <strong>paperplanes.world</strong>";
    this.DESKTOP_SUB = "Join on your phone at<br/> <strong>paperplanes.world</strong>";
    this.AFTER = "This experience was<br />created for Google I/O";
    this.AFTER_DESKTOP = "This experience was<br />created for Google I/O";
    this.AFTER_DESKTOP_SUB = "But don't worry, we're working hard<br />to bring this to everyone soon";
    this.BEGIN = "Touch to begin";
    this.SWIPE = "See your planes";
    this.WAVE = "Wave your phone like a net to catch a plane";
    this.PINCH = "Expand to see where itâ€™s been";
    this.PINCH2 = "Expand to see your stamp";
    this.STAMP = "Tap to choose your location stamp";
    this.START_FOLD = "Drag the corner to continue";
    this.KEEP_FOLD = "Keep folding, youâ€™re almost there";
    this.ROTATE = "Ready for takeoff<br />Rotate horizontally";
    this.SCALE = "Drag the corners to customize your planeâ€™s size";
    this.THROW = "Hold your phone like a paper plane and throw*";
    this.THROW_SUB = "*Donâ€™t let go of your phone";
    this.CONFIRM_TITLE_NEW = "We have liftoff!";
    this.CONFIRM_TITLE_CATCH = "There it goes";
    this.CONFIRM_TEXT = "Your plane is now<br />flying around the world<br />with ## others";
    this.CONFIRM_TEXT_BACK = "The plane is back<br />flying around the world<br />with ## others";
    this.MADE = "Youâ€™ve made<br />## planes";
    this.SIDESCREEN = "Join on<br />your phone at<br />paperplanes.world";
    this.INFO_TEXT = ["This experience allows people to throw and catch virtual paper planes with one another<br/><br/>Visit paperplanes.world on your computer to throw planes<br/>into your screen", 'Made by some friends at <a href="http://google.com" target="_blank">Google</a>, <a href=http://activetheory.net target=_blank>Active Theory</a> and <a href=http://droga5.com target=_blank>Droga5</a>'];
    this.INFO_GPS_1 = "Currently using IP for location.";
    this.INFO_GPS_2 = "Enable GPS for more accuracy.";
    this.THROWN_TEXT = ["Planes have just left", "Planes were just thrown from", "Planes are on their way from", "Planes just took off from", "Planes have just departed", ];
    this.READY = "Ready for takeoff?";
    this.CONNECT = "Join on your phone at";
    this.NON_IO = "Watch on a desktop at the same time to see your plane enter the screen and flock around the world with other planes.";
    this.CONTINUE = "Touch to continue";
    this.NOT_CAUGHT = "Your plane hasnâ€˜t<br />been caught yet"
}, "static");
Class(function PlanesEvents() {
    this.CATCH_PLANE = "catch_plane";
    this.RE_THROW_CAUGHT_PLANE = "rethrow_caught_plane";
    this.NEW_PLANE = "new_plane";
    this.THROW_NEW_PLANE = "throw_new_plane";
    this.CONFIRMATION_HIDDEN = "confirmation_hidden";
    this.CANCEL = "planes_cancel";
    this.MY_PLANES_SWIPE_PROGRESS = "my_planes_swipe_progress";
    this.MY_PLANES_SWIPE_COMPLETE = "my_planes_swipe_complete";
    this.FORCE_MY_PLANES_SWIPE = "force_my_planes_swipe";
    this.PLANE_LIST_SELECT = "plane_list_select";
    this.PLANE_DETAIL_CLOSE = "plane_detail_close";
    this.PAUSE_FLOCKING = "pause_flocking";
    this.RESUME_FLOCKING = "resume_flocking";
    this.ALLOW_PLANES = "allow_planes";
    this.END_EXPERIENCE = "end_experience";
    this.START_EXP = "start_exp";
    this.END_EXP = "end_exp";
    this.ADD_REALTIME = "add_realtime";
    this.LOADED_MY_PLANES = "loaded_my_planes"
}, "static");
Class(function AssetUtil() {
    var _this = this;
    var _assets = {};
    var _exclude = ["!!!"];
    this.PATH = "";

    function canInclude(asset) {
        for (var i = 0; i < _exclude.length; i++) {
            var excl = _exclude[i];
            if (asset.strpos(excl)) {
                return false
            }
        }
        return true
    }
    this.loadAssets = function(list) {
        var assets = this.get(list);
        var output = [];
        for (var i = assets.length - 1; i > -1; i--) {
            var asset = assets[i];
            if (!_assets[asset]) {
                output.push(_this.PATH + asset);
                _assets[asset] = 1
            }
        }
        return output
    };
    this.get = function(list) {
        if (!Array.isArray(list)) {
            list = [list]
        }
        var assets = [];
        for (var i = ASSETS.length - 1; i > -1; i--) {
            var asset = ASSETS[i];
            for (var j = list.length - 1; j > -1; j--) {
                var match = list[j];
                if (asset.strpos(match)) {
                    if (canInclude(asset)) {
                        assets.push(asset)
                    }
                }
            }
        }
        return assets
    };
    this.exclude = function(list) {
        if (!Array.isArray(list)) {
            list = [list]
        }
        for (var i = 0; i < list.length; i++) {
            _exclude.push(list[i])
        }
    };
    this.clearExclude = function() {
        _exclude = []
    };
    this.loadAllAssets = function(list) {
        var assets = _this.loadAssets(list || "/");
        var loader = new AssetLoader(assets)
    }
}, "Static");
Class(function Antimatter(_num, _renderer) {
    Inherit(this, AntimatterCalculation);
    var _this = this;
    var _buffer, _geometry, _callback;
    var _cursor = 0;
    var _size = findSize();
    this.particleCount = _num;
    (function() {
        if (!window.Shader) {
            throw "Antimatter requires hydra-three"
        }
        defer(createBuffer)
    })();

    function findSize() {
        var values = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048];
        for (var i = 0; i < values.length; i++) {
            var p2 = values[i];
            if (p2 * p2 >= _num) {
                return p2
            }
        }
    }

    function createBuffer() {
        AntimatterUtil.createBufferArray(_size, _num, function(geometry, vertices) {
            _this.vertices = _this.vertices || new AntimatterAttribute(vertices, 4);
            _geometry = new THREE.BufferGeometry();
            _geometry.addAttribute("position", new THREE.BufferAttribute(geometry, 3));
            _this.vertices.geometry = _geometry;
            _this.init(_geometry, _renderer, _size);
            if (_callback) {
                _callback();
                _callback = null
            }
        })
    }
    this.createFloatArray = function(components) {
        return new Float32Array(_size * _size * (components || 3))
    };
    this.ready = function(callback) {
        _callback = callback
    };
    this.getMesh = function() {
        var shader = _this.createShader(_this.fragmentShader || "void main() { gl_FragColor = vec4(1.0); }");
        _this.mesh = new THREE.Points(_geometry, shader.material);
        _this.mesh.frustumCulled = false;
        _this.shader = shader;
        _this.geometry = _geometry;
        return _this.mesh
    };
    this.createShader = function(fs) {
        var uniforms = _this.uniforms || {};
        var shader = new Shader(_this.vertexShader || "AntimatterPosition", fs);
        shader.uniforms = THREE.UniformsUtils.merge([{
            tPos: {
                type: "t",
                value: _this.vertices.texture
            },
        }, uniforms]);
        return shader
    }
});
Class(function AntimatterAttribute(_data, _components) {
    Inherit(this, Component);
    var _this = this;
    var _size = Math.sqrt(_data.length / (_components || 3));
    this.size = _size;
    this.count = _size * _size;
    this.buffer = _data;
    this.texture = new THREE.DataTexture(_data, _size, _size, _components == 4 ? THREE.RGBAFormat : THREE.RGBFormat, THREE.FloatType);
    this.texture.needsUpdate = true;
    this.set("needsUpdate", function() {
        _this.texture.needsUpdate = true
    });
    this.clone = function() {
        var array = new Float32Array(_data.length);
        array.set(_data);
        return new AntimatterAttribute(array, _components)
    }
});
Class(function AntimatterCalculation() {
    Inherit(this, Component);
    var _this, _gpuGeom, _renderer, _size;
    var _scene, _mesh, _camera, _copy, _geometry;
    var _frames = 0;
    var _output = {
        type: "t",
        value: null
    };
    var _callbacks = [];
    this.passes = [];

    function initPasses() {
        _camera = new THREE.OrthographicCamera(_size / -2, _size / 2, _size / 2, _size / -2, 1, 1000);
        _geometry = new THREE.PlaneBufferGeometry(2, 2, 1, 1);
        _scene = new THREE.Scene();
        _mesh = new THREE.Mesh(_geometry, new THREE.MeshBasicMaterial());
        _scene.add(_mesh);
        var copyShader = new Shader("AntimatterCopy", "AntimatterCopy");
        copyShader.uniforms = {
            tDiffuse: {
                type: "t",
                value: null
            }
        };
        _copy = new THREE.Mesh(_geometry, copyShader.material);
        _scene.add(_copy);
        _copy.visible = false
    }

    function copy(input, output) {
        var clear = _renderer.autoClear;
        _copy.visible = true;
        _mesh.visible = false;
        _copy.material.uniforms.tDiffuse.value = input;
        _renderer.autoClear = false;
        _renderer.render(_scene, _camera, output, false);
        _renderer.autoClear = clear;
        _copy.visible = false;
        _mesh.visible = true
    }

    function postRender(callback) {
        _callbacks.push(callback)
    }
    this.init = function(geometry, renderer, size) {
        _this = this;
        _gpuGeom = geometry.attributes.position.array;
        _renderer = renderer;
        _size = size;
        initPasses()
    };
    this.addPass = function(pass, index) {
        _this = this;
        var add = function(pass, index) {
            if (typeof index == "number") {
                _this.passes.splice(index, 0, pass);
                return
            }
            _this.passes.push(pass)
        };
        if (_this.passes.length) {
            add(pass, index)
        } else {
            postRender(function() {
                add(pass, index)
            })
        }
    };
    this.findPass = function(name) {
        for (var i = 0; i < _this.passes.length; i++) {
            var pass = _this.passes[i];
            if (pass.name == name) {
                return pass
            }
        }
    };
    this.removePass = function(pass) {
        _this = this;
        if (typeof pass == "number") {
            _this.passes.splice(pass)
        } else {
            _this.passes.findAndRemove(pass)
        }
    };
    this.update = function() {
        _this = this;
        if (!_this.mesh) {
            return
        }
        var output = _output.value || _this.vertices.texture;
        for (var i = 0; i < _this.passes.length; i++) {
            var pass = _this.passes[i];
            var firstRender = !pass.init;
            if (firstRender) {
                pass.initialize(_size, _this.particleCount)
            }
            _mesh.material = pass.shader.material;
            _mesh.material.uniforms.tInput.value = output;
            _mesh.material.uniforms.tValues.value = firstRender ? (i == _this.passes.length - 1 || pass.origin ? pass.origin || _this.vertices.texture : null) : pass.output;
            _mesh.material.uniforms.tPrev.value = firstRender ? (i == _this.passes.length - 1 ? _this.vertices.texture : null) : pass.getRead();
            _mesh.material.uniforms.time.value = Render.TSL;
            var rt = firstRender ? pass.getRT(0) : pass.getWrite();
            var output = pass.output;
            _renderer.render(_scene, _camera, rt);
            copy(rt, output);
            if (firstRender) {
                copy(rt, pass.getRT(1));
                copy(rt, pass.getRT(2));
                pass.setRead(2);
                pass.setWrite(1);
                if (i == 0 && _this.passes.length > 1) {
                    return
                }
            } else {
                pass.swap()
            }
        }
        if (!output) {
            return
        }
        _output.value = output;
        _this.mesh.material.uniforms.tPos = _output;
        if (_callbacks.length) {
            _callbacks.forEach(function(c) {
                c()
            });
            _callbacks.length = 0
        }
    };
    this.onDestroy = function() {
        _this.passes.forEach(function(pass) {
            pass && pass.destroy && pass.destroy()
        })
    };
    this.getOutput = function() {
        return _output
    }
});
Class(function AntimatterPass(_shader, _uni, _clone) {
    var _this = this;
    var _uniforms = {
        tInput: {
            type: "t",
            value: null
        },
        tPrev: {
            type: "t",
            value: null
        },
        tValues: {
            type: "t",
            value: null
        },
        time: {
            type: "f",
            value: 0
        },
        fSize: {
            type: "f",
            value: 64
        },
        fTotalNum: {
            type: "f",
            value: 64
        },
    };
    var _rts = [];
    var _read = 0;
    var _write = 0;
    this.uniforms = _uniforms;
    this.output = initRT(64);
    this.name = _shader;
    (function() {
        if (_uni) {
            for (var key in _uni) {
                _uniforms[key] = _uni[key]
            }
        }
    })();

    function prepareShader(size) {
        var utils = Shaders.getShader("antimatter.glsl");
        var fragment = Shaders.getShader(_shader + ".fs");
        fragment = fragment.replace("@SIZE", size);
        return ["uniform sampler2D tInput;", "uniform sampler2D tPrev;", "uniform sampler2D tValues;", "uniform float fSize;", "uniform float fTotalNum;", "uniform float time;", "vec2 getUV() { return (gl_FragCoord.xy / fSize); }", "bool notUsed() { return (gl_FragCoord.x * gl_FragCoord.y) > fTotalNum; }", utils, fragment].join("\n")
    }

    function initRT(size) {
        var type = Mobile.os == "Android" ? THREE.FloatType : THREE.HalfFloatType;
        var parameters = {
            minFilter: THREE.NearestFilter,
            magFilter: THREE.NearestFilter,
            format: THREE.RGBAFormat,
            stencilBuffer: false,
            type: type
        };
        var rt = new THREE.WebGLRenderTarget(size, size, parameters);
        rt.texture.generateMipmaps = false;
        return rt
    }
    this.addInput = function(name, attribute) {
        var uniform = (function() {
            if (typeof attribute === "object" && !attribute.height && typeof attribute.type === "string") {
                return attribute
            }
            if (attribute instanceof AntimatterAttribute) {
                return {
                    type: "t",
                    value: attribute.texture
                }
            }
            return {
                type: "t",
                value: attribute
            }
        })();
        _uniforms[name] = uniform
    };
    this.getRT = function(index) {
        return _rts[index]
    };
    this.getRead = function() {
        return _rts[_read]
    };
    this.getWrite = function() {
        return _rts[_write]
    };
    this.setRead = function(index) {
        _read = index
    };
    this.setWrite = function(index) {
        _write = index
    };
    this.swap = function() {
        _write++;
        if (_write > 2) {
            _write = 0
        }
        _read++;
        if (_read > 2) {
            _read = 0
        }
    };
    this.initialize = function(size, num) {
        this.init = true;
        for (var i = 0; i < 3; i++) {
            _rts.push(initRT(size))
        }
        _this.output.setSize(size, size);
        _uniforms.fTotalNum.value = num;
        if (!(_shader instanceof Shader)) {
            _shader = new Shader("AntimatterPass", prepareShader(size));
            _shader.uniforms = _uniforms
        }
        _this.shader = _shader;
        _shader.uniforms.fSize.value = size
    };
    this.setUniform = function(key, value) {
        if (_shader && _shader.uniforms) {
            _shader.uniforms[key].value = value
        }
    };
    this.tween = function(key, value, time, ease, delay, callback, update) {
        TweenManager.tween(_shader.uniforms[key], {
            value: value
        }, time, ease, delay, callback, update)
    };
    this.clone = function() {
        return new AntimatterPass(_shader, _uni)
    };
    this.destroy = function() {
        _rts.forEach(function(rt) {
            rt && rt.dispose && rt.dispose()
        })
    }
});
Class(function AntimatterUtil() {
    Inherit(this, Component);
    var _this = this;
    var _thread;
    (function() {
        initThread()
    })();

    function initThread() {
        _thread = _this.initClass(Thread);
        _thread.loadFunction(createBufferArray);
        _thread.loadFunction(encode)
    }

    function encode(value) {
        return (value + 99999) / (99999 * 2)
    }

    function createBufferArray(e, id) {
        var size = e.size;
        var num = e.num;
        var position = new Float32Array(num * 3);
        for (var i = 0; i < num; i++) {
            position[i * 3 + 0] = (i % size) / size;
            position[i * 3 + 1] = Math.floor(i / size) / size;
            position[i * 3 + 2] = 0
        }
        var vertices = new Float32Array(num * 4);
        for (var i = 0; i < num; i++) {
            vertices[i * 4 + 0] = Utils.doRandom(-1500, 1500);
            vertices[i * 4 + 1] = Utils.doRandom(-1500, 1500);
            vertices[i * 4 + 2] = Utils.doRandom(-1000, 1000);
            vertices[i * 4 + 3] = 1
        }
        post({
            array: position,
            vertices: vertices
        }, id, [position.buffer, vertices.buffer])
    }
    this.createBufferArray = function(size, num, callback) {
        _thread.createBufferArray({
            size: size,
            num: num
        }, function(data) {
            callback(data.array, data.vertices)
        })
    }
}, "static");
Class(function BMFontLayout() {
    var _this = this;
    var prototype = BMFontLayout.prototype;
    var X_HEIGHTS = ["x", "e", "a", "o", "n", "s", "r", "c", "u", "m", "v", "w", "z"];
    var M_WIDTHS = ["m", "w"];
    var CAP_HEIGHTS = ["H", "I", "N", "E", "F", "K", "L", "T", "U", "V", "W", "X", "Y", "Z"];
    var TAB_ID = "\t".charCodeAt(0);
    var SPACE_ID = " ".charCodeAt(0);
    var ALIGN_LEFT = 0,
        ALIGN_CENTER = 1,
        ALIGN_RIGHT = 2;
    var wordWrap = new BMFontWordWrap();
    var xtend = function(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                    target[key] = source[key]
                }
            }
        }
        return target
    };
    var findChar = (function(property) {
        if (!property || typeof property !== "string") {
            throw new Error("must specify property for indexof search")
        }
        return new Function("array", "value", "start", ["start = start || 0", "for (var i=start; i<array.length; i++)", '  if (array[i]["' + property + '"] === value)', "      return i", "return -1"].join("\n"))
    })("id");
    var number = function(num, def) {
        return typeof num === "number" ? num : (typeof def === "number" ? def : 0)
    };
    prototype.init = function(opt) {
        this.glyphs = [];
        this._measure = this.computeMetrics.bind(this);
        this.update(opt)
    };
    prototype.update = function(opt) {
        opt = xtend({
            measure: this._measure
        }, opt);
        this._opt = opt;
        this._opt.tabSize = number(this._opt.tabSize, 4);
        if (!opt.font) {
            throw new Error("must provide a valid bitmap font")
        }
        var glyphs = this.glyphs;
        var text = opt.text || "";
        var font = opt.font;
        this._setupSpaceGlyphs(font);
        var lines = wordWrap.lines(text, opt);
        var minWidth = opt.width || 0;
        glyphs.length = 0;
        var maxLineWidth = lines.reduce(function(prev, line) {
            return Math.max(prev, line.width, minWidth)
        }, 0);
        var x = 0;
        var y = 0;
        var lineHeight = number(opt.lineHeight, font.common.lineHeight);
        var baseline = font.common.base;
        var descender = lineHeight - baseline;
        var letterSpacing = opt.letterSpacing || 0;
        var height = lineHeight * lines.length - descender;
        var align = getAlignType(this._opt.align);
        y -= height;
        this._width = maxLineWidth;
        this._height = height;
        this._descender = lineHeight - baseline;
        this._baseline = baseline;
        this._xHeight = getXHeight(font);
        this._capHeight = getCapHeight(font);
        this._lineHeight = lineHeight;
        this._ascender = lineHeight - descender - this._xHeight;
        var self = this;
        lines.forEach(function(line, lineIndex) {
            var start = line.start;
            var end = line.end;
            var lineWidth = line.width;
            var lastGlyph;
            for (var i = start; i < end; i++) {
                var id = text.charCodeAt(i);
                var glyph = self.getGlyph(font, id);
                if (glyph) {
                    if (lastGlyph) {
                        x += getKerning(font, lastGlyph.id, glyph.id)
                    }
                    var tx = x;
                    if (align === ALIGN_CENTER) {
                        tx += (maxLineWidth - lineWidth) / 2
                    } else {
                        if (align === ALIGN_RIGHT) {
                            tx += (maxLineWidth - lineWidth)
                        }
                    }
                    glyphs.push({
                        position: [tx, y],
                        data: glyph,
                        index: i,
                        line: lineIndex
                    });
                    x += glyph.xadvance + letterSpacing;
                    lastGlyph = glyph
                }
            }
            y += lineHeight;
            x = 0
        });
        this._linesTotal = lines.length
    };
    prototype._setupSpaceGlyphs = function(font) {
        this._fallbackSpaceGlyph = null;
        this._fallbackTabGlyph = null;
        if (!font.chars || font.chars.length === 0) {
            return
        }
        space = getMGlyph(font);
        var tabWidth = this._opt.tabSize * space.xadvance;
        this._fallbackSpaceGlyph = space;
        this._fallbackSpaceGlyph = space;
        this._fallbackTabGlyph = xtend(space, {
            x: 0,
            y: 0,
            xadvance: tabWidth,
            id: TAB_ID,
            xoffset: 0,
            yoffset: 0,
            width: 0,
            height: 0
        })
    };
    prototype.getGlyph = function(font, id) {
        var glyph = getGlyphById(font, id);
        if (glyph) {
            return glyph
        } else {
            if (id === TAB_ID) {
                return this._fallbackTabGlyph
            } else {
                if (id === SPACE_ID) {
                    return this._fallbackSpaceGlyph
                }
            }
        }
        return null
    };
    prototype.computeMetrics = function(text, start, end, width) {
        var letterSpacing = this._opt.letterSpacing || 0;
        var font = this._opt.font;
        var curPen = 0;
        var curWidth = 0;
        var count = 0;
        var glyph, lastGlyph;
        if (!font.chars || font.chars.length === 0) {
            return {
                start: start,
                end: start,
                width: 0
            }
        }
        end = Math.min(text.length, end);
        for (var i = start; i < end; i++) {
            var id = text.charCodeAt(i);
            var glyph = this.getGlyph(font, id);
            if (glyph) {
                var xoff = glyph.xoffset;
                var kern = lastGlyph ? getKerning(font, lastGlyph.id, glyph.id) : 0;
                curPen += kern;
                var nextPen = curPen + glyph.xadvance + letterSpacing;
                var nextWidth = curPen + glyph.width;
                if (nextWidth >= width || nextPen >= width) {
                    break
                }
                curPen = nextPen;
                curWidth = nextWidth;
                lastGlyph = glyph
            }
            count++
        }
        if (lastGlyph) {
            curWidth += lastGlyph.xoffset
        }
        return {
            start: start,
            end: start + count,
            width: curWidth
        }
    };
    ["width", "height", "descender", "ascender", "xHeight", "baseline", "capHeight", "lineHeight"].forEach(addGetter);

    function addGetter(name) {
        Object.defineProperty(prototype, name, {
            get: wrapper(name),
            configurable: true
        })
    }

    function wrapper(name) {
        return (new Function(["return function " + name + "() {", "  return this._" + name, "}"].join("\n")))()
    }

    function getGlyphById(font, id) {
        if (!font.chars || font.chars.length === 0) {
            return null
        }
        var glyphIdx = findChar(font.chars, id);
        if (glyphIdx >= 0) {
            return font.chars[glyphIdx]
        }
        return null
    }

    function getXHeight(font) {
        for (var i = 0; i < X_HEIGHTS.length; i++) {
            var id = X_HEIGHTS[i].charCodeAt(0);
            var idx = findChar(font.chars, id);
            if (idx >= 0) {
                return font.chars[idx].height
            }
        }
        return 0
    }

    function getMGlyph(font) {
        return 0
    }

    function getCapHeight(font) {
        for (var i = 0; i < CAP_HEIGHTS.length; i++) {
            var id = CAP_HEIGHTS[i].charCodeAt(0);
            var idx = findChar(font.chars, id);
            if (idx >= 0) {
                return font.chars[idx].height
            }
        }
        return 0
    }

    function getKerning(font, left, right) {
        if (!font.kernings || font.kernings.length === 0) {
            return 0
        }
        var table = font.kernings;
        for (var i = 0; i < table.length; i++) {
            var kern = table[i];
            if (kern.first === left && kern.second === right) {
                return kern.amount
            }
        }
        return 0
    }

    function getAlignType(align) {
        if (align === "center") {
            return ALIGN_CENTER
        } else {
            if (align === "right") {
                return ALIGN_RIGHT
            }
        }
        return ALIGN_LEFT
    }
});
Class(function BMFontText(_opt) {
    Inherit(this, Component);
    var _this = this;
    var _layout;
    (function() {
        update()
    })();

    function update() {
        if (!_opt.font) {
            throw new TypeError("must specify a { font } in options")
        }
        _layout = new BMFontLayout();
        _layout.init(_opt);
        var flipY = _opt.flipY !== false;
        var font = _opt.font;
        var texWidth = font.common.scaleW;
        var texHeight = font.common.scaleH;
        var glyphs = _layout.glyphs.filter(function(glyph) {
            var bitmap = glyph.data;
            return bitmap.width * bitmap.height > 0
        });
        this.visibleGlyphs = glyphs;
        var positions = getPositions(glyphs);
        var uvs = getUvs(glyphs, texWidth, texHeight, flipY);
        var indices = createQuadElements({
            clockwise: true,
            type: "uint16",
            count: glyphs.length
        });
        var letters = [];
        var offsets = [];
        var orientations = [];
        var scales = [];
        var newPositions = [];
        var newUvs = [];
        indices.forEach(function(index) {
            newPositions.push(positions[index * 3 + 0]);
            newPositions.push(positions[index * 3 + 1]);
            newPositions.push(positions[index * 3 + 2]);
            newUvs.push(uvs[index * 2 + 0]);
            newUvs.push(uvs[index * 2 + 1]);
            letters.push(Math.floor(index / 4) + 1);
            offsets.push(0);
            offsets.push(0);
            offsets.push(0);
            orientations.push(0);
            orientations.push(0);
            orientations.push(0);
            orientations.push(1);
            scales.push(1)
        });
        _this.geometry = new THREE.BufferGeometry();
        var position = new THREE.BufferAttribute(new Float32Array(newPositions), 3);
        var uv = new THREE.BufferAttribute(new Float32Array(newUvs), 2);
        var letter = new THREE.BufferAttribute(new Float32Array(letters), 1);
        var offset = new THREE.BufferAttribute(new Float32Array(offsets), 3);
        var orientation = new THREE.BufferAttribute(new Float32Array(orientations), 4);
        var scale = new THREE.BufferAttribute(new Float32Array(scales), 1);
        _this.geometry.addAttribute("position", position);
        _this.geometry.addAttribute("uv", uv);
        _this.geometry.addAttribute("letter", letter);
        _this.geometry.addAttribute("offset", offset);
        _this.geometry.addAttribute("orientation", orientation);
        _this.geometry.addAttribute("scale", scale);
        _this.geometry.computeBoundingSphere = computeBoundingSphere;
        _this.geometry.computeBoundingBox = computeBoundingBox
    }

    function pages(glyphs) {
        var pages = new Float32Array(glyphs.length * 4 * 1);
        var i = 0;
        glyphs.forEach(function(glyph) {
            var id = glyph.data.page || 0;
            pages[i++] = id;
            pages[i++] = id;
            pages[i++] = id;
            pages[i++] = id
        });
        return pages
    }

    function getUvs(glyphs, texWidth, texHeight, flipY) {
        var uvs = new Float32Array(glyphs.length * 4 * 2);
        var i = 0;
        glyphs.forEach(function(glyph) {
            var bitmap = glyph.data;
            var bw = (bitmap.x + bitmap.width);
            var bh = (bitmap.y + bitmap.height);
            var u0 = bitmap.x / texWidth;
            var u1 = bw / texWidth;
            var v1 = (texHeight - bitmap.y) / texHeight;
            var v0 = (texHeight - bh) / texHeight;
            uvs[i++] = u0;
            uvs[i++] = v1;
            uvs[i++] = u0;
            uvs[i++] = v0;
            uvs[i++] = u1;
            uvs[i++] = v0;
            uvs[i++] = u1;
            uvs[i++] = v1
        });
        return uvs
    }

    function getPositions(glyphs) {
        var positions = new Float32Array(glyphs.length * 3 * 4);
        var i = 0;
        glyphs.forEach(function(glyph) {
            var bitmap = glyph.data;
            var x = glyph.position[0] + bitmap.xoffset;
            var y = glyph.position[1] + bitmap.yoffset;
            var w = bitmap.width;
            var h = bitmap.height;
            positions[i++] = x;
            positions[i++] = y;
            positions[i++] = 0;
            positions[i++] = x;
            positions[i++] = y + h;
            positions[i++] = 0;
            positions[i++] = x + w;
            positions[i++] = y + h;
            positions[i++] = 0;
            positions[i++] = x + w;
            positions[i++] = y;
            positions[i++] = 0
        });
        return positions
    }

    function dtype(dtype) {
        switch (dtype) {
            case "int8":
                return Int8Array;
            case "int16":
                return Int16Array;
            case "int32":
                return Int32Array;
            case "uint8":
                return Uint8Array;
            case "uint16":
                return Uint16Array;
            case "uint32":
                return Uint32Array;
            case "float32":
                return Float32Array;
            case "float64":
                return Float64Array;
            case "array":
                return Array;
            case "uint8_clamped":
                return Uint8ClampedArray
        }
    }

    function createQuadElements(opt) {
        var CW = [0, 2, 3];
        var CCW = [2, 1, 3];
        var array = null;
        var type = typeof opt.type === "string" ? opt.type : "uint16";
        var count = typeof opt.count === "number" ? opt.count : 1;
        var start = (opt.start || 0);
        var dir = opt.clockwise !== false ? CW : CCW,
            a = dir[0],
            b = dir[1],
            c = dir[2];
        var numIndices = count * 6;
        var indices = [];
        for (var i = 0, j = 0; i < numIndices; i += 6, j += 4) {
            var x = i + start;
            indices[x + 0] = j + 0;
            indices[x + 1] = j + 1;
            indices[x + 2] = j + 2;
            indices[x + 3] = j + a;
            indices[x + 4] = j + b;
            indices[x + 5] = j + c
        }
        return indices
    }
    var itemSize = 2;
    var box = {
        min: [0, 0],
        max: [0, 0]
    };

    function bounds(positions) {
        var count = positions.length / itemSize;
        box.min[0] = positions[0];
        box.min[1] = positions[1];
        box.max[0] = positions[0];
        box.max[1] = positions[1];
        for (var i = 0; i < count; i++) {
            var x = positions[i * itemSize + 0];
            var y = positions[i * itemSize + 1];
            box.min[0] = Math.min(x, box.min[0]);
            box.min[1] = Math.min(y, box.min[1]);
            box.max[0] = Math.max(x, box.max[0]);
            box.max[1] = Math.max(y, box.max[1])
        }
    }

    function computeBoundingSphere() {
        if (this.boundingSphere === null) {
            this.boundingSphere = new THREE.Sphere()
        }
        var positions = this.attributes.position.array;
        var itemSize = this.attributes.position.itemSize;
        if (!positions || !itemSize || positions.length < 2) {
            this.boundingSphere.radius = 0;
            this.boundingSphere.center.set(0, 0, 0);
            return
        }
        var computeSphere = function(positions, output) {
            bounds(positions);
            var minX = box.min[0];
            var minY = box.min[1];
            var maxX = box.max[0];
            var maxY = box.max[1];
            var width = maxX - minX;
            var height = maxY - minY;
            var length = Math.sqrt(width * width + height * height);
            output.center.set(minX + width / 2, minY + height / 2, 0);
            output.radius = length / 2
        };
        computeSphere(positions, this.boundingSphere);
        if (isNaN(this.boundingSphere.radius)) {
            console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.')
        }
    }

    function computeBoundingBox() {
        if (this.boundingBox === null) {
            this.boundingBox = new THREE.Box3()
        }
        var bbox = this.boundingBox;
        var positions = this.attributes.position.array;
        var itemSize = this.attributes.position.itemSize;
        if (!positions || !itemSize || positions.length < 2) {
            bbox.makeEmpty();
            return
        }
        var computeBox = function(positions, output) {
            bounds(positions);
            output.min.set(box.min[0], box.min[1], 0);
            output.max.set(box.max[0], box.max[1], 0)
        };
        computeBox(positions, bbox)
    }
});
Class(function BMFontWordWrap() {
    var _this = this;
    var newline = /\n/;
    var newlineChar = "\n";
    var whitespace = /\s/;

    function idxOf(text, chr, start, end) {
        var idx = text.indexOf(chr, start);
        if (idx === -1 || idx > end) {
            return end
        }
        return idx
    }

    function isWhitespace(chr) {
        return whitespace.test(chr)
    }

    function pre(measure, text, start, end, width) {
        var lines = [];
        var lineStart = start;
        for (var i = start; i < end && i < text.length; i++) {
            var chr = text.charAt(i);
            var isNewline = newline.test(chr);
            if (isNewline || i === end - 1) {
                var lineEnd = isNewline ? i : i + 1;
                var measured = measure(text, lineStart, lineEnd, width);
                lines.push(measured);
                lineStart = i + 1
            }
        }
        return lines
    }

    function greedy(measure, text, start, end, width, mode) {
        var lines = [];
        var testWidth = width;
        if (mode === "nowrap") {
            testWidth = Number.MAX_VALUE
        }
        while (start < end && start < text.length) {
            var newLine = idxOf(text, newlineChar, start, end);
            while (start < newLine) {
                if (!isWhitespace(text.charAt(start))) {
                    break
                }
                start++
            }
            var measured = measure(text, start, newLine, testWidth);
            var lineEnd = start + (measured.end - measured.start);
            var nextStart = lineEnd + newlineChar.length;
            if (lineEnd < newLine) {
                while (lineEnd > start) {
                    if (isWhitespace(text.charAt(lineEnd))) {
                        break
                    }
                    lineEnd--
                }
                if (lineEnd === start) {
                    if (nextStart > start + newlineChar.length) {
                        nextStart--
                    }
                    lineEnd = nextStart
                } else {
                    nextStart = lineEnd;
                    while (lineEnd > start) {
                        if (!isWhitespace(text.charAt(lineEnd - newlineChar.length))) {
                            break
                        }
                        lineEnd--
                    }
                }
            }
            if (lineEnd >= start) {
                var result = measure(text, start, lineEnd, testWidth);
                lines.push(result)
            }
            start = nextStart
        }
        return lines
    }

    function monospace(text, start, end, width) {
        var glyphs = Math.min(width, end - start);
        return {
            start: start,
            end: start + glyphs
        }
    }
    this.lines = function(text, opt) {
        opt = opt || {};
        if (opt.width === 0 && opt.mode !== "nowrap") {
            return []
        }
        text = text || "";
        var width = typeof opt.width === "number" ? opt.width : Number.MAX_VALUE;
        var start = Math.max(0, opt.start || 0);
        var end = typeof opt.end === "number" ? opt.end : text.length;
        var mode = opt.mode;
        var measure = opt.measure || monospace;
        if (mode === "pre") {
            return pre(measure, text, start, end, width)
        } else {
            return greedy(measure, text, start, end, width, mode)
        }
    }
});
Class(function DateUtil() {
    Inherit(this, Model);
    var _this = this;
    (function() {})();
    this.getDate = function() {
        var date = new Date();
        var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        var month = months[date.getMonth()];
        var day = date.getDate();
        var year = date.getFullYear();
        var dateText = month + " " + day + ", " + year;
        var dateNumeric = (date.getMonth() + 1) + "." + day + "." + year;
        return {
            text: dateText,
            numeric: dateNumeric
        }
    }
}, "static");
Class(function FoldMechanic() {
    Inherit(this, Component);
    var _this = this;
    var _interaction, _current, _move;
    var _progressTarget = 0;
    var _progressVel = 0;
    var _progress = 0;
    var _steps = [{
        dir: new Vector2(-1, -1),
        dist: 300
    }, {
        dir: new Vector2(1, -1),
        dist: 300
    }, {
        dir: new Vector2(-2, -1),
        dist: 250
    }, {
        dir: new Vector2(2, -1),
        dist: 250
    }, {
        dir: new Vector2(-1, 0),
        dist: 300
    }, ];
    (function() {
        initInteraction();
        Render.start(loop)
    })();

    function initInteraction() {
        _current = 0;
        _interaction = new Interaction.Input(Stage);
        _interaction.onStart = onStart;
        _interaction.onUpdate = onUpdate;
        _interaction.onEnd = onEnd
    }

    function springEase() {
        var spring = 0.1;
        var friction = 0.75;
        _progressVel += (_progressTarget - _progress) * spring;
        _progress += (_progressVel *= friction)
    }

    function loop() {
        springEase();
        if (typeof _this.onUpdate == "function") {
            _this.onUpdate(_progress)
        }
    }

    function onStart() {
        _move = 0
    }

    function onUpdate(e) {
        if (_this.disabled) {
            return
        }
        e.y *= -1;
        _progressTarget = e.dot(_steps[_current].dir) / _steps[_current].dist;
        _progressTarget = Math.max(0, Math.min(1, _progressTarget));
        _move = e.length()
    }

    function onEnd(e) {
        if (_this.disabled) {
            return
        }
        if (_progressTarget > 0.5) {
            _progressTarget = 1;
            _this.disabled = true
        } else {
            _progressTarget = 0
        }
        if (typeof _this.onEnd == "function") {
            _this.onEnd(_progressTarget > 0.5)
        }
        if (_move < 40) {
            if (typeof _this.onClick == "function") {
                _this.onClick(e)
            }
        }
    }
    this.next = function() {
        _this.disabled = false;
        _progressTarget = 0;
        _progressVel = 0;
        _progress = 0;
        _current++
    };
    this.onDestroy = function() {
        Render.stop(loop)
    }
});
Class(function GATracker() {
    this.trackPage = function(page) {
        if (typeof ga !== "undefined") {
            ga("send", "pageview", page)
        }
    };
    this.trackEvent = function(category, action, label, value) {
        if (typeof ga !== "undefined") {
            ga("send", "event", category, action, label, (value || 0))
        }
    }
}, "Static");
Class(function GPU() {
    var _this = this;
    var _split = {};
    defer(function() {
        _this.detect = function(match) {
            if (!Device.graphics.webgl) {
                return
            }
            return Device.graphics.webgl.detect(match)
        };
        _this.detectAll = function() {
            if (!Device.graphics.webgl) {
                return
            }
            var match = true;
            for (var i = 0; i < arguments.length; i++) {
                if (!Device.graphics.webgl.detect(arguments[i])) {
                    match = false
                }
            }
            return match
        };
        _this.gpu = Device.graphics.webgl ? Device.graphics.webgl.gpu : "";

        function splitGPU(string) {
            if (_split[string]) {
                return _split[string]
            }
            if (!_this.detect(string)) {
                return -1
            }
            try {
                var num = Number(_this.gpu.split(string + " ")[1].split(" ")[0]);
                _split[string] = num;
                return num
            } catch (e) {
                return -1
            }
        }
        Mobile.iOS = require("iOSDevices").find();
        _this.BLACKLIST = require("GPUBlacklist").match();
        _this.T0 = (function() {
            if (Device.mobile) {
                return false
            }
            if (_this.BLACKLIST) {
                return true
            }
            var intel = splitGPU("hd graphics");
            if (intel > -1) {
                return intel < 4000
            }
            return false
        })();
        _this.T1 = (function() {
            if (Device.mobile) {
                return false
            }
            if (!_this.detect(["nvidia", "amd"])) {
                return true
            }
            return false
        })();
        _this.T2 = (function() {
            if (Device.mobile) {
                return false
            }
            if (_this.T0) {
                return false
            }
            if (_this.detect(["nvidia", "amd"])) {
                return true
            }
            return false
        })();
        _this.T3 = (function() {
            if (Device.mobile) {
                return false
            }
            if (_this.detect(["titan"])) {
                return true
            }
            return false
        })();
        _this.MT0 = (function() {
            if (!Device.mobile) {
                return false
            }
            if (Mobile.iOS.strpos(["legacy", "ipad mini 1", "5x", "ipad 4"])) {
                return true
            }
            if (Mobile.iOS.strpos(["5x", "ipad 4"])) {
                return true
            }
            var adreno = splitGPU("adreno (tm)");
            if (adreno > -1) {
                return adreno <= 320
            }
            return false
        })();
        _this.MT1 = (function() {
            if (!Device.mobile) {
                return false
            }
            if (Mobile.iOS.strpos(["5s", "ipad air 1"])) {
                return true
            }
            if (Mobile.os == "Android" && !_this.MT0) {
                return true
            }
            return false
        })();
        _this.MT2 = (function() {
            if (!Device.mobile) {
                return false
            }
            if (Mobile.iOS.strpos(["6x", "ipad air 2"])) {
                return true
            }
            var adreno = splitGPU("adreno (tm)");
            if (adreno > -1 && Mobile.os == "Android" && Mobile.browserVersion >= 53) {
                return adreno > 400
            }
            return false
        })();
        _this.MT3 = (function() {
            if (!Device.mobile) {
                return false
            }
            if (Mobile.iOS.strpos(["6s", "ipad pro"])) {
                return true
            }
            if (_this.detect("nvidia tegra") && Device.detect("pixel c")) {
                _this.MT1 = false;
                _this.MT2 = false;
                _this.MT0 = false;
                return true
            }
            return false
        })();
        _this.lt = function(num) {
            if (_this.TIER > -1) {
                return _this.TIER <= num
            }
            return false
        };
        _this.gt = function(num) {
            if (_this.TIER > -1) {
                return _this.TIER >= num
            }
            return false
        };
        _this.eq = function(num) {
            if (_this.TIER > -1) {
                return _this.TIER == num
            }
            return false
        };
        _this.mobileEq = function(num) {
            if (_this.M_TIER > -1) {
                return _this.M_TIER == num
            }
            return false
        };
        _this.mobileLT = function(num) {
            if (_this.M_TIER > -1) {
                return _this.M_TIER <= num
            }
            return false
        };
        _this.mobileGT = function(num) {
            if (_this.M_TIER > -1) {
                return _this.M_TIER >= num
            }
            return false
        };
        for (var key in _this) {
            if (key.charAt(0) == "T" && _this[key] === true) {
                _this.TIER = Number(key.charAt(1))
            }
            if (key.slice(0, 2) == "MT" && _this[key] === true) {
                _this.M_TIER = Number(key.charAt(2))
            }
        }
        _this.OVERSIZED = !Device.mobile && _this.TIER < 2 && Math.max(window.innerWidth, window.innerHeight) > 1440
    })
}, "static");
Module(function GPUBlacklist() {
    this.exports = {
        match: function() {
            if (!Device.graphics.webgl) {
                return true
            }
            return Device.graphics.webgl.detect(["radeon hd 6970m", "radeon hd 6770m", "radeon hd 6490m", "radeon hd 6630m", "radeon hd 6750m", "radeon hd 5750", "radeon hd 5670", "radeon hd 4850", "radeon hd 4870", "radeon hd 4670", "geforce 9400m", "geforce 320m", "geforce 330m", "geforce gt 130", "geforce gt 120", "geforce gtx 285", "geforce 8600", "geforce 9600m", "geforce 9400m", "geforce 8800 gs", "geforce 8800 gt", "quadro fx 5", "quadro fx 4", "radeon hd 2600", "radeon hd 2400", "radeon hd 2600", "radeon r9 200", "mali-4", "mali-3", "mali-2", ])
        }
    }
});
Class(function Hardware() {
    this.SAMSUNGS6 = Device.detect("sm-g920i")
}, "Static");
Class(function BasicPass() {
    Inherit(this, NukePass);
    var _this = this;
    this.fragmentShader = ["varying vec2 vUv;", "uniform sampler2D tDiffuse;", "void main() {", "gl_FragColor = texture2D(tDiffuse, vUv);", "}"];
    this.init(this.fragmentShader)
});
Class(function Nuke(_stage, _params) {
    Inherit(this, Component);
    var _this = this;
    if (!_params.renderer) {
        console.error("Nuke :: Must define renderer")
    }
    _this.stage = _stage;
    _this.renderer = _params.renderer;
    _this.camera = _params.camera;
    _this.scene = _params.scene;
    _this.rtt = _params.rtt;
    _this.enabled = _params.enabled == false ? false : true;
    _this.passes = _params.passes || [];
    var _dpr = _params.dpr || 1;
    var _rttPing, _rttPong, _nukeScene, _nukeMesh, _rttCamera;
    var _parameters = {
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBAFormat,
        stencilBuffer: false
    };
    (function() {
        initNuke();
        addListeners()
    })();

    function initNuke() {
        var width = _this.stage.width * _dpr;
        var height = _this.stage.height * _dpr;
        _rttPing = new THREE.WebGLRenderTarget(width, height, _parameters);
        _rttPong = new THREE.WebGLRenderTarget(width, height, _parameters);
        _rttCamera = new THREE.OrthographicCamera(_this.stage.width / -2, _this.stage.width / 2, _this.stage.height / 2, _this.stage.height / -2, 1, 1000);
        _nukeScene = new THREE.Scene();
        var geoPass = new THREE.PlaneBufferGeometry(2, 2, 1, 1);
        _nukeMesh = new THREE.Mesh(geoPass, new THREE.MeshBasicMaterial());
        _nukeScene.add(_nukeMesh)
    }

    function finalRender(scene, camera) {
        if (_this.rtt) {
            _this.renderer.render(scene, camera || _this.camera, _this.rtt)
        } else {
            _this.renderer.render(scene, camera || _this.camera)
        }
    }

    function addListeners() {
        _this.events.subscribe(HydraEvents.RESIZE, resizeHandler)
    }

    function resizeHandler() {
        var width = _this.stage.width * _dpr;
        var height = _this.stage.height * _dpr;
        if (_rttPing) {
            _rttPing.dispose()
        }
        if (_rttPong) {
            _rttPong.dispose()
        }
        _rttPing = new THREE.WebGLRenderTarget(width, height, _parameters);
        _rttPong = new THREE.WebGLRenderTarget(width, height, _parameters);
        _rttCamera.left = _this.stage.width / -2;
        _rttCamera.right = _this.stage.width / 2;
        _rttCamera.top = _this.stage.height / 2;
        _rttCamera.bottom = _this.stage.height / -2;
        _rttCamera.updateProjectionMatrix()
    }
    _this.add = function(pass, index) {
        if (typeof index == "number") {
            _this.passes.splice(index, 0, pass);
            return
        }
        _this.passes.push(pass)
    };
    _this.remove = function(pass) {
        if (typeof pass == "number") {
            _this.passes.splice(pass)
        } else {
            _this.passes.findAndRemove(pass)
        }
    };
    _this.renderToTexture = function(clear, rtt) {
        _this.renderer.render(_this.scene, _this.camera, rtt || _rttPing, typeof clear == "boolean" ? clear : true)
    };
    _this.render = function() {
        if (!_this.enabled || !_this.passes.length) {
            finalRender(_this.scene);
            return
        }
        if (!_this.multiRender) {
            _this.renderer.render(_this.scene, _this.camera, _rttPing, true)
        }
        var pingPong = true;
        for (var i = 0; i < _this.passes.length - 1; i++) {
            _nukeMesh.material = _this.passes[i].pass;
            _nukeMesh.material.uniforms.tDiffuse.value = pingPong ? _rttPing : _rttPong;
            _this.renderer.render(_nukeScene, _rttCamera, pingPong ? _rttPong : _rttPing);
            pingPong = !pingPong
        }
        _nukeMesh.material = _this.passes[_this.passes.length - 1].pass;
        _nukeMesh.material.uniforms.tDiffuse.value = pingPong ? _rttPing : _rttPong;
        finalRender(_nukeScene, _rttCamera)
    };
    _this.set("dpr", function(v) {
        _dpr = v || Device.pixelRatio;
        resizeHandler()
    });
    this.get("dpr", function() {
        return _dpr
    })
});
Class(function NukePass(_fs, _vs) {
    Inherit(this, Component);
    var _this = this;
    this.init = function(fs) {
        _this = this;
        var name = fs || this.constructor.toString().match(/function ([^\(]+)/)[1];
        var fragmentShader = Array.isArray(fs) ? fs.join("") : null;
        _this.uniforms = _this.uniforms || {};
        _this.uniforms.tDiffuse = {
            type: "t",
            value: null
        };
        _this.pass = new THREE.ShaderMaterial({
            uniforms: _this.uniforms,
            vertexShader: typeof _vs === "string" ? Shaders[name + ".vs"] : "varying vec2 vUv; void main() { vUv = uv; gl_Position = vec4(position, 1.0); }",
            fragmentShader: fragmentShader || Shaders[name + ".fs"]
        });
        _this.uniforms = _this.pass.uniforms
    };
    this.set = function(key, value) {
        TweenManager.clearTween(_this.uniforms[key]);
        this.uniforms[key].value = value
    };
    this.tween = function(key, value, time, ease, delay, callback, update) {
        TweenManager.tween(_this.uniforms[key], {
            value: value
        }, time, ease, delay, callback, update)
    };
    if (typeof _fs === "string") {
        defer(function() {
            _this.init(_fs)
        })
    }
});
Class(function Raycaster(_camera) {
    Inherit(this, Component);
    var _this = this;
    var _mouse = new THREE.Vector3();
    var _raycaster = new THREE.Raycaster();
    var _debug = null;
    (function() {})();

    function intersect(objects) {
        var hit;
        if (Array.isArray(objects)) {
            hit = _raycaster.intersectObjects(objects)
        } else {
            hit = _raycaster.intersectObject(objects)
        }
        if (_debug) {
            updateDebug()
        }
        return hit
    }

    function updateDebug() {
        var vertices = _debug.geometry.vertices;
        vertices[0].copy(_raycaster.ray.origin.clone());
        vertices[1].copy(_raycaster.ray.origin.clone().add(_raycaster.ray.direction.clone().multiplyScalar(10000)));
        vertices[0].x += 1;
        _debug.geometry.verticesNeedUpdate = true
    }
    this.set("camera", function(camera) {
        _camera = camera
    });
    this.debug = function(scene) {
        var geom = new THREE.Geometry();
        geom.vertices.push(new THREE.Vector3(-100, 0, 0));
        geom.vertices.push(new THREE.Vector3(100, 0, 0));
        var mat = new THREE.LineBasicMaterial({
            color: 16711680
        });
        _debug = new THREE.Line(geom, mat);
        scene.add(_debug)
    };
    this.checkHit = function(objects, mouse) {
        mouse = mouse || Mouse;
        var rect = _this.rect || Stage;
        _mouse.x = (mouse.x / rect.width) * 2 - 1;
        _mouse.y = -(mouse.y / rect.height) * 2 + 1;
        _raycaster.setFromCamera(_mouse, _camera);
        return intersect(objects)
    };
    this.checkFromValues = function(objects, origin, direction) {
        _raycaster.set(origin, direction, 0, Number.POSITIVE_INFINITY);
        return intersect(objects)
    }
});
Class(function ScreenProjection(_camera) {
    Inherit(this, Component);
    var _this = this;
    var _v3 = new THREE.Vector3();
    var _value = new THREE.Vector3();
    (function() {})();
    this.set("camera", function(v) {
        _camera = v
    });
    this.unproject = function(mouse) {
        var rect = _this.rect || Stage;
        _v3.set((mouse.x / rect.width) * 2 - 1, -(mouse.y / rect.height) * 2 + 1, 0.5);
        _v3.unproject(_camera);
        var pos = _camera.position;
        _v3.sub(pos).normalize();
        var dist = -pos.z / _v3.z;
        _value.copy(pos).add(_v3.multiplyScalar(dist));
        return _value
    };
    this.project = function(pos, screen) {
        screen = screen || Stage;
        if (pos instanceof THREE.Object3D) {
            pos.updateMatrixWorld();
            _v3.set(0, 0, 0).setFromMatrixPosition(pos.matrixWorld)
        } else {
            _v3.copy(pos)
        }
        _v3.project(_camera);
        _v3.x = (_v3.x + 1) / 2 * screen.width;
        _v3.y = -(_v3.y - 1) / 2 * screen.height;
        return _v3
    }
});
Class(function RandomEulerRotation(_container) {
    var _this = this;
    var _euler = ["x", "y", "z"];
    var _rot;
    this.speed = 1;
    (function() {
        initRotation()
    })();

    function initRotation() {
        _rot = {};
        _rot.x = Utils.doRandom(0, 2);
        _rot.y = Utils.doRandom(0, 2);
        _rot.z = Utils.doRandom(0, 2);
        _rot.vx = Utils.doRandom(-5, 5) * 0.0025;
        _rot.vy = Utils.doRandom(-5, 5) * 0.0025;
        _rot.vz = Utils.doRandom(-5, 5) * 0.0025
    }
    this.update = function() {
        var time = Render.TIME;
        for (var i = 0; i < 3; i++) {
            var v = _euler[i];
            switch (_rot[v]) {
                case 0:
                    _container.rotation[v] += Math.cos(Math.sin(time * 0.25)) * _rot["v" + v] * _this.speed;
                    break;
                case 1:
                    _container.rotation[v] += Math.cos(Math.sin(time * 0.25)) * _rot["v" + v] * _this.speed;
                    break;
                case 2:
                    _container.rotation[v] += Math.cos(Math.cos(time * 0.25)) * _rot["v" + v] * _this.speed;
                    break
            }
        }
    }
});
Class(function Shader(_vertexShader, _fragmentShader, _name, _material) {
    Inherit(this, Component);
    var _this = this;
    (function() {
        if (Hydra.LOCAL && _name) {
            expose()
        }
        if (_material) {
            _this.uniforms = _material.uniforms;
            _this.attributes = _material.attributes
        }
    })();

    function expose() {
        Dev.expose(_name, _this)
    }

    function process(code) {
        var threeChunk = function(a, b) {
            return THREE.ShaderChunk[b] + "\n"
        };
        return code.replace(/#s?chunk\(\s?(\w+)\s?\);/g, threeChunk)
    }
    this.get("material", function() {
        if (!_material) {
            var params = {};
            params.vertexShader = process(Shaders.getShader(_vertexShader + ".vs") || _vertexShader);
            params.fragmentShader = process(Shaders.getShader(_fragmentShader + ".fs") || _fragmentShader);
            if (_this.attributes) {
                params.attributes = _this.attributes
            }
            if (_this.uniforms) {
                params.uniforms = _this.uniforms
            }
            _material = new THREE.ShaderMaterial(params);
            _material.shader = _this
        }
        return _material
    });
    this.set = function(key, value) {
        if (typeof value !== "undefined") {
            _this.uniforms[key].value = value
        }
        return _this.uniforms[key].value
    };
    this.getValues = function() {
        var out = {};
        for (var key in _this.uniforms) {
            out[key] = _this.uniforms[key].value
        }
        return out
    };
    this.copyUniformsTo = function(obj) {
        for (var key in _this.uniforms) {
            obj.uniforms[key] = _this.uniforms[key]
        }
    };
    this.tween = function(key, value, time, ease, delay, callback, update) {
        TweenManager.tween(_this.uniforms[key], {
            value: value
        }, time, ease, delay, callback, update)
    };
    this.clone = function(name) {
        return new Shader(_vertexShader, _fragmentShader, name || _name, _this.material.clone())
    }
});
Class(function Utils3D() {
    var _this = this;
    var _objectLoader, _geomLoader, _bufferGeomLoader;
    var _textures = {};
    this.PATH = "";
    this.decompose = function(local, world) {
        local.matrixWorld.decompose(world.position, world.quaternion, world.scale)
    };
    this.createDebug = function(size, color) {
        var geom = new THREE.IcosahedronGeometry(size || 40, 1);
        var mat = color ? new THREE.MeshBasicMaterial({
            color: color
        }) : new THREE.MeshNormalMaterial();
        return new THREE.Mesh(geom, mat)
    };
    this.createRT = function(width, height) {
        var params = {
            minFilter: THREE.LinearFilter,
            magFilter: THREE.LinearFilter,
            format: THREE.RGBAFormat,
            stencilBuffer: false
        };
        return new THREE.WebGLRenderTarget(width, height, params)
    };
    this.getTexture = function(path) {
        if (!_textures[path]) {
            var img = new Image();
            img.crossOrigin = "";
            img.src = _this.PATH + path;
            var texture = new THREE.Texture(img);
            img.onload = function() {
                texture.needsUpdate = true;
                if (texture.onload) {
                    texture.onload();
                    texture.onload = null
                }
                if (!THREE.Math.isPowerOfTwo(img.width * img.height)) {
                    texture.minFilter = THREE.LinearFilter
                }
            };
            _textures[path] = texture
        }
        return _textures[path]
    };
    this.setInfinity = function(v) {
        var inf = Number.POSITIVE_INFINITY;
        v.set(inf, inf, inf);
        return v
    };
    this.freezeMatrix = function(mesh) {
        mesh.matrixAutoUpdate = false;
        mesh.updateMatrix()
    };
    this.getCubemap = function(src) {
        var path = "cube_" + (Array.isArray(src) ? src[0] : src);
        if (!_textures[path]) {
            var images = [];
            for (var i = 0; i < 6; i++) {
                var img = new Image();
                img.crossOrigin = "";
                img.src = _this.PATH + (Array.isArray(src) ? src[i] : src);
                images.push(img);
                img.onload = function() {
                    _textures[path].needsUpdate = true
                }
            }
            _textures[path] = new THREE.Texture();
            _textures[path].image = images;
            _textures[path].minFilter = THREE.LinearFilter
        }
        return _textures[path]
    };
    this.loadObject = function(name) {
        if (!_objectLoader) {
            _objectLoader = new THREE.ObjectLoader()
        }
        return _objectLoader.parse(Hydra.JSON[name])
    };
    this.loadGeometry = function(name) {
        if (!_geomLoader) {
            _geomLoader = new THREE.JSONLoader()
        }
        if (!_bufferGeomLoader) {
            _bufferGeomLoader = new THREE.BufferGeometryLoader()
        }
        var json = Hydra.JSON[name];
        if (json.type == "BufferGeometry") {
            return _bufferGeomLoader.parse(json)
        } else {
            return _geomLoader.parse(json.data).geometry
        }
    };
    this.disposeAllTextures = function() {
        for (var key in _textures) {
            _textures[key].dispose()
        }
    };
    this.disableWarnings = function() {
        window.console.warn = function(str, msg) {};
        window.console.error = function() {}
    };
    this.getGPUDetails = function(renderer) {
        var gl = renderer.context;
        var info = gl.getExtension("WEBGL_debug_renderer_info");
        var output = {};
        if (info) {
            var gpu = info.UNMASKED_RENDERER_WEBGL;
            output.gpu = gl.getParameter(gpu).toLowerCase()
        }
        output.renderer = gl.getParameter(gl.RENDERER).toLowerCase();
        output.version = gl.getParameter(gl.VERSION).toLowerCase();
        output.glsl = gl.getParameter(gl.SHADING_LANGUAGE_VERSION).toLowerCase();
        _this.GPU_INFO = output;
        return output
    };
    this.detectGPU = function(matches) {
        var gpu = _this.GPU_INFO;
        if (gpu.gpu && gpu.gpu.strpos(matches)) {
            return true
        }
        if (gpu.version && gpu.version.strpos(matches)) {
            return true
        }
        return false
    }
}, "static");
Module(function iOSDevices() {
    this.exports = {
        find: function() {
            if (Mobile.os != "iOS") {
                return ""
            }
            if (!Device.graphics.webgl) {
                return "legacy"
            }
            var detect = Device.graphics.webgl.detect;
            if (detect(["a9", "a10", "a11", "a12", "a13", "a14"]) || navigator.platform.toLowerCase().strpos("mac")) {
                return Mobile.phone ? "6s" : "ipad pro"
            }
            if (detect("a8")) {
                return Mobile.phone ? "6x" : "ipad air 2, ipad mini 4"
            }
            if (detect("a7")) {
                return Mobile.phone ? "5s" : "ipad air 1, ipad mini 2, ipad mini 3"
            }
            if (detect("sgx 554")) {
                return Mobile.phone ? "" : "ipad 4"
            }
            if (detect("sgx 543")) {
                return Mobile.phone ? "5x, 5c, 4s" : "ipad mini 1"
            }
            return "legacy"
        }
    }
});
(function(root) {
    var Klang;

    function Main(func) {
        Klang = func()
    }

    function Module(func) {
        func(Klang)
    }
    Main(function() {
        var Klang = {};
        Klang.version = Klang.versionNumber = 3;
        Klang.context;
        Klang.engineVersion;
        Klang.progressCallback;
        Klang.readyCallback;
        Klang.browser;
        Klang.os;
        Klang.isMobile;
        Klang.isIOS;
        Klang.fallback;
        Klang.loggingEnabled = false;
        Klang.useMonoBuffers = false;
        Klang.Panner;
        Klang.safari = false;
        Klang.initOptions;
        Klang.Model = {};
        return Klang
    });
    Module(function(Klang) {
        return Klang.Model.Data = function(data, name) {
            this.data = data.data;
            this._name = name
        }
    });
    Module(function(Klang) {
        return Klang.core = {}
    });
    Module(function(Klang) {
        (function(detector) {
            var supportedAudioFileSuffixes;

            function detectAudioFileSuffixes() {
                var a = window.document.createElement("audio");
                if (!a.canPlayType) {
                    return false
                }
                var supportedFileTypes = [];
                if (a.canPlayType('audio/ogg; codecs="vorbis"').replace(/no/, "")) {
                    supportedFileTypes.push(".ogg")
                }
                if (a.canPlayType("audio/aac").replace(/no/, "")) {
                    supportedFileTypes.push(".m4a")
                }
                if (a.canPlayType("audio/mpeg;").replace(/no/, "")) {
                    supportedFileTypes.push(".mp3")
                }
                return supportedFileTypes
            }

            function canPlayAudioSuffix(suffix) {
                supportedAudioFileSuffixes = supportedAudioFileSuffixes || detectAudioFileSuffixes();
                for (var i = 0; i < supportedAudioFileSuffixes.length; i++) {
                    if (supportedAudioFileSuffixes[i] === suffix) {
                        return true
                    }
                }
                return false
            }
            detector.canPlayAudioSuffix = canPlayAudioSuffix;

            function detectBrowser() {
                var ua = navigator.userAgent;
                var temp;
                var match = ua.match(/(edge(?=\/))\/?\s*(\d+)/i) || [];
                if (match.length == 0) {
                    match = ua.match(/(edge|opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || []
                }
                if (/trident/i.test(match[1])) {
                    temp = /\brv[ :]+(\d+)/g.exec(ua) || [];
                    return {
                        name: "IE",
                        version: temp[1] || "unknown"
                    }
                }
                if (match[1] === "Chrome") {
                    temp = ua.match(/\bOPR\/(\d+)/);
                    if (temp !== null) {
                        return {
                            name: "Opera",
                            version: temp[1]
                        }
                    }
                }
                match = match[2] ? [match[1], match[2]] : [navigator.appName, navigator.appVersion, "-?"];
                if ((temp = ua.match(/version\/(\d+)/i)) !== null) {
                    match.splice(1, 1, temp[1])
                }
                return {
                    name: match[0],
                    version: parseInt(match[1])
                }
            }
            detector.browser = detectBrowser()
        }(Klang.detector || (Klang.detector = {})));
        var detector = Klang.detector;
        return Klang.core.detector = detector
    });
    Module(function(Klang) {
        (function(network) {
            function isCrossDomain(url) {
                var target = document.createElement("a");
                target.href = url;
                var host = document.createElement("a");
                host.href = location.href;
                var crossdomain = target.hostname != "" && (target.port != host.port || target.protocol != host.protocol || target.hostname != host.hostname);
                return crossdomain
            }
            network.isCrossDomain = isCrossDomain;

            function request(options, onDone, onProgress, onError) {
                var request;
                options.type = options.type || "GET";
                if (Klang.detector.browser.name == "MSIE" && Klang.detector.browser.version < 10) {
                    request = new window.XDomainRequest();
                    request.onload = function() {
                        setTimeout(function() {
                            onDone && onDone(request.responseText)
                        }, 10)
                    };
                    request.onprogress = onProgress || function() {};
                    request.onerror = onError || function() {};
                    request.open(options.type, options.url, true)
                } else {
                    if (window.XMLHttpRequest) {
                        request = new XMLHttpRequest();
                        request.open(options.type, options.url, true);
                        request.onreadystatechange = function() {
                            try {
                                if (request.readyState == 4 && request.status == 200) {
                                    if (onDone) {
                                        var response = request.responseText;
                                        onDone(response)
                                    }
                                } else {
                                    if (request.status != 0 && request.status != 200) {
                                        if (onError) {
                                            onError({
                                                status: request.status
                                            })
                                        }
                                    }
                                }
                            } catch (e) {
                                throw e;
                                if (onError) {
                                    onError({
                                        status: "aborted"
                                    })
                                }
                            }
                        }
                    } else {
                        throw "Error - browser does not support XDomain/XMLHttp Requests"
                    }
                }
                if (request) {
                    request.send(null)
                }
            }
            network.request = request
        }(Klang.network || (Klang.network = {})));
        var network = Klang.network;
        return Klang.core.network = network
    });
    Module(function(Klang) {
        function FileHandler() {
            this.memUsage = 0;
            this._decoding = false;
            this._files = {};
            this._bufferQue = [];
            this._groups = {};
            this._lastSentPercent = -1
        }
        FileHandler.inst = null;
        Object.defineProperty(FileHandler, "instance", {
            get: function() {
                if (FileHandler.inst == null) {
                    FileHandler.inst = new FileHandler()
                }
                return FileHandler.inst
            },
            enumerable: true,
            configurable: true
        });
        FileHandler.prototype.sendProgressCallback = function(group) {
            var loadGroup = this._groups[group];
            if (loadGroup.progressCallback && !loadGroup.loadInterrupted) {
                var percent = 0;
                if (loadGroup.progress.readyAudioFiles >= loadGroup.progress.totalAudioFiles) {
                    percent = Math.floor((loadGroup.progress.loadedBytes + loadGroup.progress.bufferedFiles) / (loadGroup.progress.totalBytes + loadGroup.progress.totalFiles) * (100 - (loadGroup.progress.totalFiles - loadGroup.progress.convertedFiles)))
                }
                if (this._lastSentPercent !== percent) {
                    loadGroup.progressCallback(percent)
                }
                this._lastSentPercent = percent
            }
        };
        FileHandler.prototype.updateProgress = function(request, e) {
            var group = request.load_group;
            if (!request.sizeReceived) {
                request.sizeReceived = true;
                var totalBytes = 1;
                if (e.lengthComputable) {
                    totalBytes = e.total;
                    request.loadedBytes = 0
                }
                request.totalBytes = totalBytes;
                this._groups[group].progress.totalBytes += totalBytes;
                this._groups[group].progress.readyAudioFiles++
            }
            if (request.loadedBytes !== undefined) {
                var deltaBytes = e.loaded - request.loadedBytes;
                request.loadedBytes = e.loaded;
                this._groups[group].progress.loadedBytes += deltaBytes;
                this.sendProgressCallback(group)
            }
        };
        FileHandler.prototype.decodeBufferQue = function() {
            var _this = this;
            if (this._bufferQue.length) {
                var queItem = this._bufferQue.pop();
                var data = queItem.data;
                var info = queItem.info;
                var callback = queItem.callback;
                this._decoding = true;
                Klang.context.decodeAudioData(data, function(buf) {
                    var group = _this._groups[info.load_group];
                    _this._decoding = false;
                    if (Klang.useMonoBuffers) {
                        var bufferLength = buf.length;
                        var monoBuffer = Klang.context.createBuffer(1, bufferLength, Klang.context.sampleRate);
                        var leftChannelData = buf.getChannelData(0);
                        var monoChannelData = monoBuffer.getChannelData(0);
                        for (var ix = 0; ix < bufferLength; ix++) {
                            monoChannelData[ix] = leftChannelData[ix]
                        }
                        buf = monoBuffer
                    }
                    _this.memUsage += buf.length * buf.numberOfChannels * Float32Array.BYTES_PER_ELEMENT;
                    var memUsageBytes = _this.memUsage;
                    var memUsageMb = memUsageBytes / 1000000;
                    _this.addFile(info, buf);
                    group.progress.convertedFiles++;
                    queItem.data = null;
                    if (_this._bufferQue.length) {
                        _this.decodeBufferQue()
                    } else {
                        if (callback) {
                            callback()
                        }
                    }
                }, function(ex) {
                    Klang.log("Klang warning: unable to load file '" + (this._baseURL || "") + info.url + "'")
                })
            }
        };
        FileHandler.prototype.loadAudioBuffer = function(info, callback) {
            var _this = this;
            var request = new XMLHttpRequest();
            var format = ".mp3";
            if (Klang.detector.browser.name === "Firefox" || Klang.detector.browser.name === "Chrome") {
                format = ".ogg"
            }
            var url = (info.external ? "" : this._baseURL) + info.url + format;
            request.open("GET", url, true);
            request.responseType = "arraybuffer";
            request.sizeReceived = false;
            request.load_group = info.load_group;
            request.onprogress = function(e) {
                _this.updateProgress(request, e)
            };
            request.onload = function(e) {
                var group = _this._groups[info.load_group];
                _this._bufferQue.push({
                    data: request.response,
                    load_group: group,
                    info: info,
                    callback: callback
                });
                if (request.loadedBytes) {
                    var deltaBytes = request.totalBytes - request.loadedBytes;
                    group.progress.loadedBytes += deltaBytes
                } else {
                    group.progress.loadedBytes += 1
                }
                _this.updateProgress(request, e);
                _this.decodeBufferQue();
                try {
                    request.response = null
                } catch (e) {}
                request = null
            };
            request.onreadystatechange = function() {
                if (request.readyState == 4 && request.status == 200) {} else {
                    if (request.status != 200) {
                        _this._groups[info.load_group].loadInterrupted = true;
                        if (_this._groups[info.load_group].loadFailedCallback) {
                            _this._groups[info.load_group].loadFailedCallback()
                        }
                    }
                }
            };
            request.send();
            this._groups[info.load_group].progress.totalAudioFiles++
        };
        FileHandler.prototype.loadMidiFile = function(info, callback) {
            var _this = this;
            loadRemote(this._baseURL + info.url, function(request, e) {
                _this.updateProgress(request, e)
            }, function(data) {
                _this.addFile(info, readMidiFile(data));
                if (callback) {
                    callback()
                }
            })
        };
        FileHandler.prototype.loadMidiString = function(info) {
            var _this = this;
            var request = new XMLHttpRequest();
            request.open("GET", this._baseURL + info.url);
            request.onprogress = function(e) {
                _this.updateProgress(request, e)
            };
            request.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    _this.addFile(info, readMidiString(request.response))
                }
            };
            request.send()
        };
        FileHandler.prototype.loadFiles = function(group, filesLoadedCallback, progressCallback, loadFailedCallback) {
            if (typeof group == "string") {
                group = [group]
            }
            var groupsToLoad = group.length;
            var _filesLoadedCallback = function() {
                groupsToLoad--;
                if (groupsToLoad === 0) {
                    filesLoadedCallback && filesLoadedCallback.apply(this, arguments)
                }
            };
            var loadProgression = {};
            var _progressCallback = function(prog) {
                if (progressCallback) {
                    loadProgression[this.name] = prog;
                    var cnt = 0;
                    var totProg = 0;
                    for (var key in loadProgression) {
                        if (loadProgression.hasOwnProperty(key)) {
                            cnt++;
                            totProg += loadProgression[key]
                        }
                    }
                    totProg /= cnt;
                    progressCallback(totProg)
                }
            };
            var _loadFailedCallback = function() {
                _filesLoadedCallback()
            };
            for (var ix = 0, len = group.length; ix < len; ix++) {
                loadProgression[group[ix]] = 0;
                this._groups[group[ix]] = {};
                this._groups[group[ix]]._loadedFiles = [];
                this._groups[group[ix]].filesLoadedCallback = _filesLoadedCallback;
                this._groups[group[ix]].progressCallback = _progressCallback.bind(this._groups[group[ix]]);
                this._groups[group[ix]].loadFailedCallback = _loadFailedCallback;
                this._groups[group[ix]].loadInterrupted = false;
                this._groups[group[ix]].name = group[ix];
                this._groups[group[ix]].progress = {
                    totalBytes: 0,
                    loadedBytes: 0,
                    totalFiles: 0,
                    totalAudioFiles: 0,
                    readyAudioFiles: 0,
                    bufferedFiles: 0,
                    convertedFiles: 0
                }
            }
            for (var ix = 0, len = this._fileInfo.length; ix < len; ix++) {
                var info = this._fileInfo[ix];
                var groupIx = group.indexOf(info.load_group);
                if (groupIx != -1 && !this._files[info.id] && !info.only_audio_tag) {
                    switch (info.file_type) {
                        case "audio":
                            this.loadAudioBuffer(info);
                            break;
                        case "midi":
                            this.loadMidiFile(info);
                            break;
                        case "midistring":
                            this.loadMidiString(info);
                            break
                    }
                    this._groups[group[groupIx]].progress.totalFiles++
                }
            }
            for (var ix = 0, len = group.length; ix < len; ix++) {
                if (this._groups[group[ix]].progress.totalFiles == 0) {
                    if (this._groups[group[ix]].filesLoadedCallback && !this._groups[group[ix]]._loadInterrupted) {
                        this._groups[group[ix]].filesLoadedCallback(true, this._groups[group[ix]]._loadedFiles)
                    }
                }
            }
        };
        FileHandler.prototype.prepareFile = function(fileInfo) {
            this._fileInfo.push(fileInfo)
        };
        FileHandler.prototype.prepareFiles = function(fileInfo) {
            var i, len;
            for (i = 0, len = fileInfo.length; i < len; i++) {
                this.prepareFile(fileInfo[i])
            }
        };
        FileHandler.prototype.addFile = function(info, file) {
            this._files[info.id] = file;
            this._groups[info.load_group].progress.bufferedFiles++;
            this._groups[info.load_group]._loadedFiles = this._groups[info.load_group]._loadedFiles || [];
            this._groups[info.load_group]._loadedFiles.push(info);
            this.sendProgressCallback(info.load_group);
            if (this._groups[info.load_group].progress.bufferedFiles == this._groups[info.load_group].progress.totalFiles && !this._groups[info.load_group].loadInterrupted) {
                if (this._groups[info.load_group].filesLoadedCallback) {
                    this._groups[info.load_group].filesLoadedCallback(true, this._groups[info.load_group]._loadedFiles || [])
                }
            }
        };
        FileHandler.prototype.freeSoundFiles = function(group) {
            if (typeof group == "string") {
                group = [group]
            }
            for (var ix = 0, len = this._fileInfo.length; ix < len; ix++) {
                var info = this._fileInfo[ix];
                if (group.indexOf(info.load_group) != -1) {
                    this._files[info.id] = null
                }
            }
        };
        FileHandler.prototype.getLoadGroups = function() {
            var i;
            var fileInfoArr = this._fileInfo || [];
            var groupTable = {};
            var listOfGroups = [];
            for (i = 0; i < fileInfoArr.length; i++) {
                var fileInfo = fileInfoArr[i];
                groupTable[fileInfo.load_group] = fileInfo.load_group
            }
            for (i in groupTable) {
                listOfGroups.push(i)
            }
            return listOfGroups
        };
        FileHandler.prototype.getFile = function(id) {
            return this._files[id] || null
        };
        FileHandler.prototype.getFilesForLoadgroup = function(loadGroup) {
            var ret = [];
            for (var ix = 0, len = this._fileInfo.length; ix < len; ix++) {
                if (this._fileInfo[ix].load_group == loadGroup) {
                    ret.push(this._fileInfo[ix])
                }
            }
            return ret
        };
        FileHandler.prototype.getFileInfo = function(fileId) {
            for (var ix = 0, len = this._fileInfo.length; ix < len; ix++) {
                if (this._fileInfo[ix].id == fileId) {
                    return this._fileInfo[ix]
                }
            }
            return undefined
        };
        Object.defineProperty(FileHandler.prototype, "progress", {
            get: function() {
                return this._groups
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileHandler.prototype, "baseURL", {
            set: function(url) {
                this._baseURL = url
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileHandler.prototype, "fileInfo", {
            set: function(fileInfo) {
                this._fileInfo = fileInfo
            },
            enumerable: true,
            configurable: true
        });
        return Klang.core.FileHandler = FileHandler
    });
    Module(function(Klang) {
        function Scheduler() {
            this._updateTime = 100;
            this._lookAHead = this._updateTime * 2;
            this._callbacks = []
        }
        Scheduler.prototype.scheduleClose = function(callback) {
            var timeOffset = callback.targetTime - Klang.context.currentTime;
            setTimeout(function() {
                callback.func.apply(callback.ctx)
            }, timeOffset * 1000)
        };
        Scheduler.prototype.runScheduler = function() {
            if (this._callbacks.length > 0) {
                var currentTime = Klang.context.currentTime;
                for (var ix = 0; ix < this._callbacks.length; ix++) {
                    var callback = this._callbacks[ix];
                    if (currentTime + this._lookAHead >= callback.targetTime) {
                        this.scheduleClose(callback);
                        this._callbacks.splice(ix, 1);
                        ix--
                    }
                }
                this._lastTime = currentTime;
                var _this = this;
                this._scheduler = setTimeout(function() {
                    _this.runScheduler()
                }, _this._updateTime)
            } else {
                this.stop()
            }
        };
        Scheduler.prototype.start = function() {
            this._started = true;
            this._lastTime = Klang.context.currentTime;
            clearTimeout(this._scheduler);
            this.runScheduler()
        };
        Scheduler.prototype.stop = function() {
            this._started = false;
            clearTimeout(this._scheduler);
            this._scheduler = null
        };
        Scheduler.prototype.delay = function(targetTime, func, ctx) {
            return this.at(Klang.context.currentTime + targetTime, func, ctx)
        };
        Scheduler.prototype.at = function(targetTime, func, ctx) {
            if (targetTime < Klang.context.currentTime) {
                return this
            }
            this._callbacks.push({
                ctx: ctx || this,
                func: func,
                targetTime: targetTime
            });
            if (!this._started) {
                this.start()
            }
            return this
        };
        Scheduler.prototype.cancel = function(func) {
            for (var i = 0; i < this._callbacks.length; i++) {
                if (this._callbacks[i]["func"] && this._callbacks[i]["func"] === func) {
                    this._callbacks.splice(i, 1);
                    break
                }
            }
            return this
        };
        return Klang.core.Scheduler = Scheduler
    });
    Module(function(Klang) {
        function TimeHandler() {
            this._callbacks = []
        }
        TimeHandler.inst = null;
        Object.defineProperty(TimeHandler, "instance", {
            get: function() {
                if (TimeHandler.inst == null) {
                    TimeHandler.inst = new TimeHandler()
                }
                return TimeHandler.inst
            },
            enumerable: true,
            configurable: true
        });
        TimeHandler.prototype.startScheduler = function() {
            if (this._callbacks.length > 0) {
                var currentTime = Klang.context.currentTime;
                var deltaTime = currentTime - this._lastTime;
                for (var ix = 0; ix < this._callbacks.length; ix++) {
                    var callback = this._callbacks[ix];
                    callback.timePassed += deltaTime;
                    if (callback.timePassed >= callback.targetTime) {
                        callback.obj[callback.func]();
                        this._callbacks.splice(ix, 1);
                        ix--
                    }
                }
                this._lastTime = currentTime;
                var _this = this;
                this._scheduler = setTimeout(function() {
                    _this.startScheduler()
                }, Klang.core.Core.settings.timehandler_lookahead)
            } else {
                this.stop()
            }
        };
        TimeHandler.prototype.start = function() {
            this._started = true;
            this._lastTime = Klang.context.currentTime;
            clearTimeout(this._scheduler);
            this.startScheduler()
        };
        TimeHandler.prototype.stop = function() {
            this._started = false;
            clearTimeout(this._scheduler);
            this._scheduler = null
        };
        TimeHandler.prototype.registerMethodCallback = function(obj, func, targetTime) {
            this._callbacks.push({
                obj: obj,
                func: func,
                timePassed: 0,
                targetTime: targetTime
            });
            if (!this._started) {
                this.start()
            }
            return this
        };
        TimeHandler.prototype.removeMethodCallback = function(obj, func) {
            for (var ix = 0, len = this._callbacks.length; ix < len; ix++) {
                var callback = this._callbacks[ix];
                if (callback.obj == obj && callback.func == func) {
                    this._callbacks.splice(ix, 1);
                    return
                }
            }
            return this
        };
        return Klang.core.TimeHandler = TimeHandler
    });
    Module(function(Klang) {
        var Util;
        (function(Util) {
            function setParam(param, value, when) {
                param.setValueAtTime(value, when || Klang.context.currentTime)
            }
            Util.setParam = setParam;

            function adjustParam(param, value, when) {
                param.setValueAtTime(param.value + value, when || Klang.context.currentTime)
            }
            Util.adjustParam = adjustParam;

            function curveParamLin(param, value, duration, when, startValue) {
                when = when || Klang.context.currentTime;
                var startAt = param.value;
                if (startValue !== undefined && Klang.detector.browser.name == "Firefox") {
                    startAt = startValue
                }
                param.setValueAtTime(startAt, when);
                param.linearRampToValueAtTime(value, Klang.context.currentTime + duration)
            }
            Util.curveParamLin = curveParamLin;

            function curveParamExp(param, value, duration, when, startValue) {
                when = when || Klang.context.currentTime;
                var startAt = param.value;
                if (startValue !== undefined && Klang.detector.browser.name == "Firefox") {
                    startAt = startValue
                }
                param.setValueAtTime(startAt == 0 ? Util.EXP_MIN_VALUE : startAt, when);
                param.exponentialRampToValueAtTime(value, Klang.context.currentTime + duration)
            }
            Util.curveParamExp = curveParamExp;

            function curveParam(param, curve, duration, when) {
                when = when || Klang.context.currentTime;
                param.setValueCurveAtTime(Util.CUSTOM_CURVES[curve], when, duration)
            }
            Util.curveParam = curveParam;
            Util.CUSTOM_CURVES = {};

            function createCurves(data) {
                for (var name in data) {
                    var cdata = data[name];
                    if (cdata instanceof Array) {
                        var curve = new Float32Array(cdata.length);
                        for (var ix = 0, len = cdata.length; ix < len; ix++) {
                            curve[ix] = cdata[ix]
                        }
                    } else {
                        if (!cdata.curve_type) {
                            Klang.warn("Modulation: Curve type not specified")
                        }
                        if (!cdata.resolution) {
                            cdata.resolution = 1024
                        }
                        if (!cdata.amplitude) {
                            cdata.amplitude = 1
                        }
                        if (!cdata.amplitude_offset) {
                            cdata.amplitude_offset = 0
                        }
                        if (!cdata.phase_offset) {
                            cdata.phase_offset = 0
                        }
                        if (!cdata.length) {
                            cdata.length = 1
                        }
                        var curve = new Float32Array(cdata.resolution);
                        if (cdata.curve_type == "sine") {
                            var phase_offset = cdata.phase_offset * Math.PI * 2;
                            var length = cdata.length * Math.PI * 2;
                            for (var ix = 0, len = curve.length; ix < len; ix++) {
                                curve[ix] = cdata.amplitude_offset + Math.sin(phase_offset + ix / len * length) * cdata.amplitude
                            }
                        } else {
                            if (cdata.curve_type == "saw") {
                                for (var ix = 0, len = curve.length; ix < len; ix++) {
                                    curve[ix] = cdata.amplitude_offset + (len - ix) / len * cdata.amplitude
                                }
                            } else {
                                if (cdata.curve_type == "inverse-saw") {
                                    for (var ix = 0, len = curve.length; ix < len; ix++) {
                                        curve[ix] = cdata.amplitude_offset + ix / len * cdata.amplitude
                                    }
                                } else {
                                    Klang.warn("Modulation: Unrecognized curve type")
                                }
                            }
                        }
                        Util.CUSTOM_CURVES[name] = curve
                    }
                }
            }
            Util.createCurves = createCurves;
            if (navigator.userAgent.indexOf("MSIE") != -1) {
                var ie = true;
                var ua = navigator.userAgent;
                var re = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})");
                var ieVersion;
                if (re.exec(ua) != null) {
                    ieVersion = parseInt(RegExp.$1)
                }
                if (ieVersion < 9) {
                    Object.defineProperty = Object.oldDefineProperty;
                    delete Object.oldDefineProperty
                }
            }
            Util.ROOT12 = 1.059463094359295;
            Util.NYQUIST_FREQUENCY = 22050;
            Util.PITCH_SHIFT_FFT = 2048;
            Util.EXP_MIN_VALUE = 0.0001;
            Util.OSC_START_DELAY = 0.005;
            Util.LOG_TIME_COLOR = "#999999";
            Util.LOG_EVENT_COLOR = "#54CBDD";
            Util.LOG_UNIMPLEMENTED_EVENT_COLOR = "#E075A9";
            Util.LOG_LOAD_COLOR = "#333333";
            Util.LOG_WARN_COLOR = "DarkOrange";
            Util.LOG_ERROR_COLOR = "Red";

            function applyMixins(derivedCtor, baseCtors) {
                baseCtors.forEach(function(baseCtor) {
                    Object.getOwnPropertyNames(baseCtor.prototype).forEach(function(name) {
                        derivedCtor.prototype[name] = baseCtor.prototype[name]
                    })
                })
            }
            Util.lastEvent = undefined;
            Util.clamp = function(value, min, max) {
                return Math.max(min, Math.min(max, value))
            };
            Util.clamp01 = function(value) {
                return Util.clamp(value, 0, 1)
            };
            Util.vars = {};

            function random(max, min) {
                min !== undefined ? min : 1;
                return Math.floor(min + (1 + max - min) * Math.random())
            }
            Util.random = random;

            function randomFloat(max, min) {
                min !== undefined ? min : 1;
                return min + (max - min) * Math.random()
            }
            Util.randomFloat = randomFloat;

            function loadScriptFile(url, success, fail) {
                var script = document.createElement("script");
                script.async = true;
                script.onload = function() {
                    success && success();
                    script.onload = null
                };
                script.onerror = function(e) {
                    fail && fail(e);
                    script.onerror = null
                };
                script.src = url;
                document.getElementsByTagName("head")[0].appendChild(script)
            }
            Util.loadScriptFile = loadScriptFile;

            function ease(current, delta, ease) {
                if (typeof ease === "undefined") {
                    ease = 3
                }
                return current - (current - delta) / ease
            }
            Util.ease = ease;

            function now() {
                return Klang.engineVersion == "webaudio" ? Klang.context.currentTime : 0
            }
            Util.now = now;

            function midiNoteToFrequency(note) {
                return 440 * Math.pow(2, (note - 69) / 12)
            }
            Util.midiNoteToFrequency = midiNoteToFrequency;

            function frequencyToMidiNote(freq) {
                return 69 + 12 * Math.log(freq / 440) / Math.log(2)
            }
            Util.frequencyToMidiNote = frequencyToMidiNote;

            function safeFilterType(filterType) {
                if (filterType === undefined) {
                    return "lowpass"
                }
                return filterType
            }
            Util.safeFilterType = safeFilterType;

            function checkMobile() {
                return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
            }
            Util.checkMobile = checkMobile;

            function checkIOS() {
                return /(iPad|iPhone|iPod)/g.test(navigator.userAgent)
            }
            Util.checkIOS = checkIOS;

            function setBlurFadeOut(state) {
                Klang.core.Core.instance.blurFadeOut = state
            }
            Util.setBlurFadeOut = setBlurFadeOut;

            function getParameterByName(name) {
                name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                    results = regex.exec(location.search);
                return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "))
            }
            Util.getParameterByName = getParameterByName;

            function transition(from, to, bpm, sync, fadeOutTime) {
                var bpm = bpm || 120;
                var fadeOutTime = fadeOutTime || 2;
                var from = from;
                var to = to;
                if (!to) {
                    return Util.now()
                }
                if (from === to) {
                    return Util.now()
                }
                if (Array.isArray(from)) {
                    var playingLoop;
                    for (var i = 0; i < from.length; i++) {
                        if (from[i].playing) {
                            playingLoop = from[i];
                            break
                        }
                    }
                    from = playingLoop
                }
                if (!from) {
                    to.play(Util.now(), 0, false);
                    return Util.now()
                }
                var bps = 60 / bpm;
                var spb = bpm / 60;
                var p1 = from ? from.position : 0;
                p1 = p1 || 0;
                var beat1 = p1 * spb;
                var sync = sync || 4;
                var toNextBar = sync - beat1 % sync;
                if (toNextBar < 0.5) {
                    toNextBar += sync
                }
                var toNextBarSec = toNextBar * bps;
                if (!from.playing) {
                    toNextBarSec = 0
                }
                var scheduleTime = Util.now() + toNextBarSec;
                to.play(scheduleTime, 0, false);
                from && from.fadeOutAndStop(fadeOutTime, scheduleTime);
                return scheduleTime
            }
            Util.transition = transition;

            function getTimeToBeat(from, bpm, sync, offset) {
                var bpm = bpm || 120;
                var from = from;
                var offset = offset || 0;
                if (Array.isArray(from)) {
                    var playingLoop;
                    for (var i = 0; i < from.length; i++) {
                        if (from[i].playing) {
                            playingLoop = from[i];
                            break
                        }
                    }
                    from = playingLoop
                }
                if (!from) {
                    return
                }
                var bps = 60 / bpm;
                var spb = bpm / 60;
                var p1 = from.position;
                p1 = p1 || 0;
                if (from._loopStart > 0) {
                    if (p1 < from._loopStart) {
                        p1 = 0
                    } else {
                        p1 -= from._loopStart
                    }
                }
                var beat1 = p1 * spb;
                var sync = sync || 4;
                var toNextBar = sync - beat1 % sync;
                toNextBar += offset;
                var toNextBarSec = toNextBar * bps;
                if (!from.playing) {
                    toNextBarSec = 0
                }
                return toNextBarSec
            }
            Util.getTimeToBeat = getTimeToBeat;

            function stopPlayingExcept() {
                var exceptions = [];
                for (var _i = 0; _i < arguments.length - 0; _i++) {
                    exceptions[_i] = arguments[_i + 0]
                }
                var sequencerArgs = [{
                    beat: 0,
                    fadeOut: 2
                }];
                for (var ix = exceptions.length - 1; ix >= 0; ix--) {
                    var instance = Klang.core.Core.instance.findInstance(exceptions[ix]);
                    if (instance.type == "Pattern") {
                        sequencerArgs.push(exceptions[ix])
                    }
                }
                var objects = Klang.core.Core.instance._objectTable;
                for (var o in Klang.core.Core.instance._objectTable) {
                    var obj = objects[o];
                    if (obj._type == "AudioSource" && exceptions.indexOf(o) == -1) {
                        if (obj.loop && obj.playing) {
                            obj.fadeOutAndStop(1)
                        }
                    } else {
                        if (obj._type == "Sequencer") {
                            obj.stopAll.apply(obj, sequencerArgs)
                        } else {
                            if (obj._type == "AdvancedProcess") {
                                if (obj.started && exceptions.indexOf(o) == -1) {
                                    obj.stop()
                                }
                            }
                        }
                    }
                }
            }
            Util.stopPlayingExcept = stopPlayingExcept;

            function shuffle(array) {
                var counter = array.length,
                    temp, index;
                while (counter--) {
                    index = Math.random() * counter | 0;
                    temp = array[counter];
                    array[counter] = array[index];
                    array[index] = temp
                }
                return array
            }
            Util.shuffle = shuffle;

            function cloneObject(obj) {
                if (obj === null || typeof obj !== "object") {
                    return obj
                }
                var temp = obj.constructor();
                for (var key in obj) {
                    temp[key] = cloneObject(obj[key])
                }
                return temp
            }
            Util.cloneObject = cloneObject;

            function logFreq(value) {
                if (value == 0) {
                    return 0
                }
                var min = 20;
                var max = 20000;
                if (min == 0) {
                    min = 0.01
                }
                var position = value;
                var minp = min;
                var maxp = max;
                var minv = Math.log(minp);
                var maxv = Math.log(maxp);
                var scale = (maxv - minv) / (maxp - minp);
                return Math.exp(minv + scale * (position - minp))
            }
            Util.logFreq = logFreq;

            function generateIdString(len) {
                var seed = "";
                while (seed.length < len) {
                    seed += "0"
                }
                return (seed + (Math.random() * Math.pow(36, len) << 0).toString(36)).slice(-len)
            }
            Util.generateIdString = generateIdString;
            Util.MidiHandler = {
                midiAccess: null,
                midiIn: null,
                midiOut: null,
                inputs: [],
                outputs: [],
                init: function(done) {
                    this.MIDIUtils.initUtils();
                    var _this = this;
                    window.navigator.requestMIDIAccess().then(function(e) {
                        _this.onMIDIStarted(e);
                        done && done()
                    }, this.onMIDISystemError)
                },
                onMIDISystemError: function(msg) {
                    console.log("Error encountered:", msg)
                },
                onMIDIStarted: function(midi) {
                    Util.MidiHandler.midiAccess = midi;
                    var inputs = midi.inputs;
                    inputs.forEach(function(port) {
                        Util.MidiHandler.inputs.push(port)
                    });
                    var outputs = midi.outputs;
                    outputs.forEach(function(port) {
                        Util.MidiHandler.outputs.push(port)
                    });
                    if (Util.MidiHandler.inputs.length) {
                        Util.MidiHandler.midiIn = Util.MidiHandler.inputs[0];
                        Util.MidiHandler.midiIn.onmidimessage = Util.MidiHandler.midiMessageReceived;
                        Util.MidiHandler.midiOut = Util.MidiHandler.outputs[0]
                    } else {
                        console.error("No midi inputs found");
                        return
                    }
                },
                midiMessageReceived: function(ev) {
                    var a = ev.data[0];
                    var cmd = ev.data[0] >> 4;
                    var channel = ev.data[0] & 15;
                    var noteNumber = ev.data[1];
                    var velocity = ev.data[2];
                    Util.MidiHandler.handleMidiData(a, cmd, channel, noteNumber, velocity)
                },
                handleMidiData: function(a, cmd, channel, noteNumber, velocity) {},
                changeMidi: function(index) {
                    this.midiOut = this.outputs[index];
                    this.midiIn = this.inputs[index]
                },
                MIDIUtils: {
                    noteMap: {},
                    noteNumberMap: [],
                    notes: ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"],
                    initUtils: function(argument) {
                        for (var i = 0; i < 127; i++) {
                            var index = i,
                                key = this.notes[index % 12],
                                octave = (index / 12 | 0) - 1;
                            if (key.length === 1) {
                                key = key + "-"
                            }
                            key += octave;
                            this.noteMap[key] = i;
                            this.noteNumberMap[i] = key
                        }
                    },
                    getBaseLog: function(value, base) {
                        return Math.log(value) / Math.log(base)
                    },
                    noteNameToNoteNumber: function(name) {
                        return this.noteMap[name]
                    },
                    noteNumberToFrequency: function(note) {
                        return 440 * Math.pow(2, (note - 69) / 12)
                    },
                    noteNumberToName: function(note) {
                        return this.noteNumberMap[note]
                    },
                    frequencyToNoteNumber: function(f) {
                        return Math.round(12 * this.getBaseLog(f / 440, 2) + 69)
                    }
                },
                play: function(note, noteLength, velocity) {
                    if (typeof velocity === "undefined") {
                        velocity = 100
                    }
                    this.midiOut.send([144, note, velocity]);
                    console.log("On");
                    this.midiOut.send([128, note, 0], window.performance.now() + noteLength)
                },
                panic: function() {
                    for (var i = 1; i < 128; ++i) {
                        this.midiOut.send([128, i, 0])
                    }
                }
            }
        }(Util || (Util = {})));
        Util.__extends = function(d, b) {
            function __() {
                this.constructor = d
            }
            __.prototype = b.prototype;
            d.prototype = new __()
        };
        return Klang.Util = Util
    });
    Module(function(Klang) {
        function Core() {
            this._initComplete = false;
            this._blurFadeOut = false;
            this._masterBusId = null;
            this._preLoadInitStack = [];
            this._postLoadInitStack = [];
            this._connectStack = [];
            this._superMasterOutput = Klang.context ? Klang.context.createGain() : null;
            this._eventHistory = [];
            if (Klang.Util.getParameterByName("klang_log")) {
                Klang.loggingEnabled = true
            }
        }
        Core.debugSettings = {};
        Core.inst = null;
        Core.isInited = function isInited() {
            if (Core.inst == null) {
                return false
            }
            return Core.inst._initComplete
        };
        Object.defineProperty(Core.prototype, "initComplete", {
            get: function() {
                return this._initComplete
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Core, "instance", {
            get: function() {
                if (Core.inst == null) {
                    Core.inst = new Core()
                }
                return Core.inst
            },
            enumerable: true,
            configurable: true
        });
        Core.prototype.setCallbacks = function(callbacks) {
            this._callbacks = callbacks
        };
        Object.defineProperty(Core, "callbacks", {
            get: function() {
                return Core.instance._callbacks
            },
            enumerable: true,
            configurable: true
        });
        Core.deinit = function deinit() {
            Core.inst = null
        };
        Core.prototype.stopAll = function() {
            if (window.KlangVisual) {
                KlangVisual.stop()
            }
            for (var p in this._objectTable) {
                if (this._objectTable[p].stop) {
                    try {
                        this._objectTable[p].stop()
                    } catch (ex) {}
                }
            }
        };
        Core.prototype.loadJSON = function(options, readyCallback, progressCallback, url) {
            this._readyCallback = readyCallback;
            this._progressCallback = progressCallback || function() {};
            if (typeof options === "object") {
                Klang.log("Loading config (editor)");
                var data = this.createConfigNode(options);
                Core.settings = data.settings;
                Core.instance.initContent(data, null, url);
                if (window.KlangVisual) {
                    KlangVisual.init(options)
                }
            } else {
                if (typeof options === "string") {
                    Klang.log("Loading config (client)");
                    var request = new XMLHttpRequest();
                    request.open("GET", options, true);
                    var _this = this;
                    request.onreadystatechange = function() {
                        if (request.readyState == 4 && request.status == 200) {
                            var configText = request.responseText;
                            var data = _this.parseConfigJSON(configText);
                            Core.settings = data.settings;
                            Core.instance.initContent(data, null, options);
                            if (window.KlangVisual) {
                                KlangVisual.init(JSON.parse(configText))
                            }
                        } else {
                            if (request.status == 404) {
                                throw "Klang exception: config file not found: '" + options + "'"
                            } else {
                                if (request.status != 200) {
                                    throw "Klang exception: unable to load config file: '" + options + "'"
                                }
                            }
                        }
                    };
                    request.send(null)
                } else {
                    throw "Klang exception: unrecognized options: '" + options + "'"
                }
            }
        };
        Core.prototype.parseConfigJSON = function(jsonString) {
            if (typeof jsonString === "string") {
                return JSON.parse(jsonString, function(key, value) {
                    if (value && typeof value === "object" && typeof value.type === "string") {
                        if (!Klang.Model[value.type]) {
                            Klang.warn("Core: Type not found: " + value.type);
                            return null
                        }
                        return new Klang.Model[value.type](value, key)
                    }
                    return value
                })
            } else {
                for (var key in Object.keys(jsonString)) {
                    var value = jsonString[key];
                    if (!Klang.Model[value.type]) {
                        Klang.warn("Core: Type not found: " + value.type);
                        return null
                    }
                    return new Klang.Model[value.type](value, key)
                }
            }
        };
        Core.prototype.createConfigNode = function(node) {
            if (typeof node === "object") {
                for (var key in node) {
                    var prop = node[key];
                    if (typeof prop === "object" && typeof prop.type === "string") {
                        if (!Klang.Model[prop.type]) {
                            Klang.warn("Core: Type not found: " + prop.type)
                        }
                        if (prop.type == "channel") {
                            continue
                        }
                        node[key] = this.createConfigNode(prop);
                        node[key] = new Klang.Model[prop.type](prop, key)
                    } else {
                        node[key] = this.createConfigNode(prop)
                    }
                }
            }
            return node
        };
        Core.prototype.createObject = function(name, data, options) {
            if (!options) {
                options = {}
            }
            if (!Klang.Model[data.type]) {
                Klang.warn("Core: Type not found: " + data.type);
                return
            }
            if (!options.excludeFromTable && this._objectTable[name]) {
                Klang.warn("Core: Duplicate object: " + name)
            }
            var obj = new Klang.Model[data.type](data, name);
            if (!options.excludeFromTable) {
                this._objectTable[name] = obj
            }
            if (!options.noInit && obj.init) {
                obj.init()
            }
            if (!options.noConnect && obj.destinationName && obj.connect) {
                if (obj.destinationName == "$OUT") {
                    obj.connect(this._superMasterOutput)
                } else {
                    var destination = this.findInstance(obj.destinationName);
                    if (!destination) {
                        Klang.warn("Core: Destination not found: " + obj.destinationName)
                    }
                    if (destination._type != "Bus") {
                        Klang.warn("Core: Destination is not a bus: " + obj.destinationName)
                    }
                    obj.connect(destination.input)
                }
            }
            return obj
        };
        Core.prototype.updateObject = function(object, data) {
            var obj = typeof object == "string" ? this._objectTable[object] : object;
            if (obj._type == "SimpleProcess" && data.type == "AdvancedProcess") {
                var advancedProcess = newAdvancedProcess(data, object);
                advancedProcess.init();
                this._objectTable[object] = advancedProcess
            } else {
                if (obj._type == "AdvancedProcess" && data.type == "SimpleProcess") {
                    var simpleProcess = newSimpleProcess(data, object);
                    simpleProcess.init();
                    this._objectTable[object] = simpleProcess
                } else {
                    if (obj.setData) {
                        obj.setData(data)
                    }
                }
            }
        };
        Core.prototype.createEvent = function(name, target) {
            if (this._eventTable[name]) {
                Klang.warn("Core: Duplicate event: " + name)
            }
            this._eventTable[name] = target
        };
        Core.prototype.visChange = function(fadeTime) {
            if (this.isHidden()) {
                if (this._blurFadeOut) {
                    Klang.Util.curveParamLin(this._superMasterOutput.gain, 0, fadeTime)
                }
            } else {
                Klang.Util.curveParamLin(this._superMasterOutput.gain, 1, fadeTime)
            }
        };
        Core.prototype.initContent = function(data, files, url) {
            var relativePath = data.settings.relative_path;
            var baseURL;
            var filePath = data.settings.file_path || "";
            if (relativePath) {
                if (url.lastIndexOf("/") != -1) {
                    baseURL = url.substring(0, url.lastIndexOf("/"));
                    if (baseURL.charAt(baseURL.length - 1) !== "/") {
                        baseURL += "/"
                    }
                    baseURL += filePath
                } else {
                    baseURL = filePath
                }
            } else {
                baseURL = filePath
            }
            Klang.log("Initializing core");
            var startTimeStamp = Klang.context.currentTime;
            if (data.settings.blur_fade_time != -1) {
                this._blurFadeOut = true;
                var fadeTime = data.settings.blur_fade_time || 0.5;
                if (fadeTime < 0 && fadeTime != -1) {
                    Klang.warn("Core: Invalid blur_fade_time value. Must be -1 or >= 0.")
                }
                var _this = this;
                var visProp = this.getHiddenProp();
                if (visProp) {
                    var evtname = "visibilitychange";
                    document.addEventListener(evtname, function() {
                        _this.visChange(fadeTime)
                    })
                }
            }
            Klang.core.FileHandler.instance.fileInfo = (files !== undefined && files !== null ? files : data.files) || [];
            this._eventTable = data.events || {};
            this._objectTable = {};
            for (var p in data.audio) {
                this._objectTable[p] = data.audio[p]
            }
            for (var p in data.busses) {
                this._objectTable[p] = data.busses[p]
            }
            for (var p in data.sequencers) {
                this._objectTable[p] = data.sequencers[p]
            }
            for (var p in data.processes) {
                this._objectTable[p] = data.processes[p]
            }
            for (var p in data.synths) {
                this._objectTable[p] = data.synths[p]
            }
            for (var p in data.lfos) {
                this._objectTable[p] = data.lfos[p]
            }
            for (var p in data.automations) {
                this._objectTable[p] = data.automations[p]
            }
            for (var p in data.data) {
                this._objectTable[p] = data.data[p]
            }
            this.setVars(data.vars);
            this._masterBusId = data.masterBus;
            this._exportedSymbols = data.exportedSymbols || {};
            this._logIgnore = data.debug.log_ignore || data.log_ignore || {};
            Klang.Util.createCurves(data.curves);
            this._loadStartTimestamp = new Date().getTime();
            if (data.debug) {
                Klang.debugData.ignoredEvents = data.debug.ignored_events || Klang.debugData.ignoredEvents;
                Klang.debugData.logToConsole = data.debug.log_to_console || Klang.debugData.logToConsole
            }
            Klang.log("Pre load initialization started");
            for (var ix = 0, len = this._preLoadInitStack.length; ix < len; ix++) {
                var element = this._preLoadInitStack[ix];
                if (element.init) {
                    element.init()
                }
            }
            Klang.log("Pre load initialization finished");
            Klang.log("Connecting nodes");
            this._superMasterOutput.connect(Klang.context.destination);
            for (var ix = 0, len = this._connectStack.length; ix < len; ix++) {
                var element = this._connectStack[ix];
                switch (element.destinationName) {
                    case "$OUT":
                        element.connect(this._superMasterOutput);
                        break;
                    case "$PARENT":
                        break;
                    default:
                        var destination = this.findInstance(element.destinationName);
                        if (!destination) {
                            Klang.warn("Core: Destination not found: " + element.destinationName)
                        }
                        if (destination._type != "Bus") {
                            Klang.warn("Core: Destination is not a bus: " + element.destinationName)
                        }
                        element.connect(destination.input);
                        break
                }
            }
            Klang.log("Nodes connected");
            this._preLoadInitStack = null;
            this._connectStack = null;
            this._timeHandler = new Klang.core.TimeHandler();
            this._initComplete = true;
            Klang.log("Core initialized");
            Klang.core.FileHandler.instance.baseURL = baseURL;
            if (!Klang.initOptions || Klang.initOptions && !Klang.initOptions.noAutoLoad) {
                Klang.core.FileHandler.instance.loadFiles("auto", Core.soundsLoaded, this._progressCallback)
            } else {
                setTimeout(Core.soundsLoaded, 4)
            }
        };
        Core.prototype.isHidden = function() {
            var prop = this.getHiddenProp();
            if (!prop) {
                return false
            }
            return document[prop]
        };
        Core.prototype.getHiddenProp = function() {
            var prefixes = ["webkit", "moz", "ms", "o"];
            if ("hidden" in document) {
                return "hidden"
            }
            for (var i = 0; i < prefixes.length; i++) {
                if (prefixes[i] + "Hidden" in document) {
                    return prefixes[i] + "Hidden"
                }
            }
            return null
        };
        Core.prototype.setVars = function(vars) {
            if (vars) {
                for (var key in vars) {
                    if (typeof vars[key] == "string" && vars[key].indexOf("me.") > -1) {
                        vars[key] = this.findInstance(vars[key].split("me.")[1])
                    } else {
                        if (typeof vars[key] == "object") {
                            var obj = vars[key];
                            for (var prop in obj) {
                                if (obj.hasOwnProperty(prop)) {
                                    if (typeof obj[prop] == "string" && obj[prop].indexOf("me.") > -1) {
                                        obj[prop] = this.findInstance(obj[prop].split("me.")[1])
                                    }
                                }
                            }
                        }
                    }
                }
                Klang.Util.vars = vars
            }
        };
        Core.prototype.loadSoundFiles = function(name, callback, progressCallback, loadFailedCallback) {
            var start = new Date().getTime();
            if (progressCallback) {
                this._progressCallback = progressCallback
            }
            var _this = this;
            Klang.core.FileHandler.instance.loadFiles(name, function(success, loadedFiles) {
                for (var i = 0; i < loadedFiles.length; i++) {
                    var fileId = loadedFiles[i].id;
                    for (var j in _this._objectTable) {
                        if (_this._objectTable.hasOwnProperty(j)) {
                            var obj = _this._objectTable[j];
                            if (obj._type === "AudioSource" && obj._fileId === fileId) {
                                obj.init()
                            }
                        }
                    }
                }
                var end = new Date().getTime();
                var time = end - start;
                Klang.log("Execution time for loadgroup: " + time);
                callback && callback(true)
            }, this._progressCallback, loadFailedCallback)
        };
        Core.prototype.freeSoundFiles = function(name) {
            Klang.core.FileHandler.instance.freeSoundFiles(name);
            for (var p in this._objectTable) {
                var obj = this._objectTable[p];
                if (obj._type == "AudioSource") {
                    var fileInfo = Klang.core.FileHandler.instance.getFileInfo(obj._fileId);
                    if (fileInfo && fileInfo.load_group == name) {
                        obj.freeBuffer()
                    }
                }
            }
        };
        Core.soundsLoaded = function soundsLoaded() {
            Klang.log("Post load initialization started");
            var _this = Core.instance;
            for (var i = 0, len = _this._postLoadInitStack.length; i < len; i++) {
                _this._postLoadInitStack[i].init()
            }
            Klang.log("Post load initialization finished");
            _this._postLoadInitStack = null;
            if (_this._readyCallback) {
                _this._readyCallback(true)
            }
        };
        Core.prototype.pushToPreLoadInitStack = function(instance) {
            if (this._preLoadInitStack) {
                this._preLoadInitStack.push(instance);
                return true
            }
            return false
        };
        Core.prototype.pushToPostLoadInitStack = function(instance) {
            if (this._postLoadInitStack) {
                this._postLoadInitStack.push(instance);
                return true
            }
            return false
        };
        Core.prototype.pushToConnectStack = function(instance) {
            if (this._connectStack) {
                this._connectStack.push(instance);
                return true
            }
            return false
        };
        Core.prototype.findInstance = function(name) {
            var instance = this._objectTable[name];
            if (!instance) {
                Klang.warn("Core: Unknown reference: '" + name + "'")
            }
            return instance
        };
        Core.prototype.triggerEvent = function(id) {
            var eventArgs = [];
            for (var _i = 0; _i < arguments.length - 1; _i++) {
                eventArgs[_i] = arguments[_i + 1]
            }
            Klang.Util.lastEvent = id;
            if (Klang.debugData.ignoredEvents[id]) {
                return
            }
            if (!this._eventTable) {
                Klang.logc("Klang Core: eventTable is undefined");
                return
            }
            if (!this._eventTable[id]) {
                if (Klang.debugData.logToConsole && !this._logIgnore[id]) {
                    Klang.logc("Klang Core: Incoming sound event: '" + id + "', " + eventArgs, Klang.Util.LOG_UNIMPLEMENTED_EVENT_COLOR)
                }
            } else {
                if (Klang.debugData.logToConsole && !this._logIgnore[id]) {
                    Klang.logc("Klang Core: Incoming sound event: '" + id + "', " + eventArgs, Klang.Util.LOG_EVENT_COLOR)
                }
            }
            var process = this._eventTable[id];
            if (typeof process == "string") {
                if (!this._objectTable[process]) {
                    Klang.warn("Core: Unknown process: '" + process + "'")
                }
                if (this._objectTable[process]._type != "SimpleProcess" && this._objectTable[process]._type != "AdvancedProcess") {
                    Klang.warn("Core: Object is not a process: '" + process + "'")
                }
                this._objectTable[process].start(eventArgs[0])
            } else {
                if (process instanceof Array) {
                    for (var ix = 0, len = process.length; ix < len; ix++) {
                        if (!this._objectTable[process[ix]]) {
                            Klang.warn("Core: Unknown process: '" + process[ix] + "'")
                        }
                        if (this._objectTable[process[ix]]._type != "SimpleProcess" && this._objectTable[process[ix]]._type != "AdvancedProcess") {
                            Klang.warn("Core: Object is not a process: '" + process + "'")
                        }
                        this._objectTable[process[ix]].start(eventArgs[0])
                    }
                }
            }
        };
        Core.prototype.getSymbolId = function(symbol) {
            return this._exportedSymbols[symbol]
        };
        Core.prototype.initIOS = function() {
            var src = Klang.context.createBufferSource();
            src.start(0)
        };
        Object.defineProperty(Core.prototype, "timeHandler", {
            get: function() {
                return this._timeHandler
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Core.prototype, "output", {
            get: function() {
                return this._superMasterOutput
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Core.prototype, "blurFadeOut", {
            get: function() {
                return this._blurFadeOut
            },
            set: function(state) {
                this._blurFadeOut = state
            },
            enumerable: true,
            configurable: true
        });
        return Klang.core.Core = Core
    });
    Module(function(Klang) {
        Klang.READY_STATE_NOT_INITIATED = 0;
        Klang.READY_STATE_INITIATED = 1;
        Klang.READY_STATE_LOADED = 2;
        Klang.klangInited = false;
        Klang.readyState = Klang.READY_STATE_NOT_INITIATED;
        var _eventQue;

        function pushToEventQue(name) {
            _eventQue = _eventQue || {};
            _eventQue[name] = arguments
        }
        Klang.pushToEventQue = pushToEventQue;

        function triggerEvent(name) {
            var args = [];
            for (var _i = 0; _i < arguments.length - 1; _i++) {
                args[_i] = arguments[_i + 1]
            }
            if (!Klang.core.Core.isInited) {
                return
            }
            try {
                if (Klang.engineVersion === "webaudio") {
                    if (!Klang.context) {
                        return
                    }
                    Klang.core.Core.instance.triggerEvent(name, args)
                } else {
                    if (Klang.engineVersion === "audiotag") {
                        if (Klang.audioTagHandler) {
                            Klang.audioTagHandler.triggerEvent(name, args)
                        }
                    }
                }
            } catch (ex) {
                Klang.err("Klang exception: unable to trigger event: '" + name + "': " + ex.name + ": " + ex.message)
            }
        }
        Klang.triggerEvent = Klang.trigger = triggerEvent;

        function getDestinationForEvent(eventName) {
            var process = Klang.core.Core.instance.findInstance(Klang.getEvents()[eventName]);
            if (process) {
                return process.destination()
            }
            return null
        }
        Klang.getDestinationForEvent = getDestinationForEvent;

        function processEventQue() {
            if (_eventQue) {
                for (var i in _eventQue) {
                    if (_eventQue.hasOwnProperty(i)) {
                        Klang.triggerEvent.apply(Klang, _eventQue[i])
                    }
                }
                _eventQue = null
            }
        }

        function init(json, readyCallback, progressCallback, loadFailedCallback, options) {
            var start = new Date().getTime();
            Klang.initOptions = options = options || {};
            Klang.isMobile = Klang.Util.checkMobile();
            Klang.isIOS = Klang.Util.checkIOS();
            if (options.useMonoBuffers) {
                Klang.useMonoBuffers = options.useMonoBuffers
            }
            if (typeof json == "object" && json.settings && json.settings.force_logging) {
                Klang.loggingEnabled = true
            }
            if (Klang.klangInited) {
                Klang.warn("Klang already initialized");
                return
            }
            Klang.klangInited = true;
            Klang.readyState = Klang.READY_STATE_NOT_INITIATED;
            var doWebaudio = options.forceMode === "webaudio" || !options.forceMode && window.AudioContext !== undefined;
            var doAudioTag = options.forceMode === "audiotag" || !options.forceMode && !window.AudioContext;
            if (doWebaudio) {
                if (!Klang.context) {
                    Klang.context = Klang.engines.webAudio.Util.createAudioContext()
                }
            } else {
                Klang.engineVersion = "audiotag";
                try {
                    if (typeof json === "string" && json.indexOf(".json") === -1 && json.indexOf(".js") > 1) {
                        var oldKLANG_CONFIG = window.KLANGCONFIG;
                        Klang.Util.loadScriptFile(json, function() {
                            var config = window.KLANG_CONFIG;
                            window.KLANG_CONFIG = oldKLANG_CONFIG;
                            Klang.audioTagHandler = new AudioTagHandler(config, function(success) {
                                Klang.readyState = Klang.READY_STATE_LOADED;
                                readyCallback && readyCallback(success);
                                processEventQue()
                            }, progressCallback, json)
                        }, function() {})
                    } else {
                        Klang.audioTagHandler = new AudioTagHandler(json, function(success) {
                            Klang.readyState = Klang.READY_STATE_LOADED;
                            readyCallback && readyCallback(success);
                            var end = new Date().getTime();
                            var time = end - start;
                            Klang.log("Execution time: " + time);
                            processEventQue()
                        }, progressCallback, json)
                    }
                } catch (ex) {
                    Klang.err("Klang exception: unable to initialize audio tag fallback");
                    Klang.engineVersion = "failed audiotag";
                    readyCallback(false);
                    return false
                }
                return true
            }
            try {
                Klang.engineVersion = "webaudio";
                if (Klang.core.Core.isInited()) {
                    Klang.warn("Klang already initialized")
                }
                if (typeof json === "string" && json.indexOf(".json") === -1 && json.indexOf(".js") > 1) {
                    var oldKLANG_CONFIG = window.KLANG_CONFIG;
                    Klang.Util.loadScriptFile(json, function() {
                        var config = window.KLANG_CONFIG;
                        window.KLANG_CONFIG = oldKLANG_CONFIG;
                        Klang.core.Core.instance.loadJSON(config, function(success) {
                            Klang.readyState = Klang.READY_STATE_LOADED;
                            readyCallback && readyCallback(success);
                            processEventQue()
                        }, progressCallback, json)
                    }, function() {})
                } else {
                    Klang.core.Core.instance.loadJSON(json, function(success) {
                        Klang.readyState = Klang.READY_STATE_LOADED;
                        readyCallback && readyCallback(success);
                        processEventQue();
                        var end = new Date().getTime();
                        var time = end - start;
                        Klang.log("Execution time: " + time)
                    }, progressCallback, json)
                }
                return true
            } catch (ex) {
                Klang.err("Klang exception: unable to parse config file: '" + json + "': " + ex.name + ": " + ex.message);
                Klang.engineVersion = "failed web audio";
                readyCallback(false);
                return false
            }
        }
        Klang.init = init;

        function initIOS(gui) {
            if (Klang.engineVersion == "webaudio") {
                try {
                    Klang.core.Core.instance.initIOS()
                } catch (ex) {
                    Klang.err("Klang exception: unable to init iOS: " + ex.name + ": " + ex.message)
                }
            } else {
                if (Klang.engineVersion == "audiotag" && Klang.isMobile) {
                    Klang.audioTagHandler.initIOS()
                }
            }
        }
        Klang.initIOS = function(debugButton) {
            initIOS()
        };

        function getLoadGroups() {
            var listOfGroups = [];
            var fileHandler;
            if (Klang.engineVersion === "webaudio") {
                fileHandler = Klang.core.FileHandler.instance
            } else {
                if (Klang.engineVersion === "audiotag") {
                    fileHandler = Klang.audioTagHandler
                } else {
                    return []
                }
            }
            listOfGroups = fileHandler.getLoadGroups();
            var autoIndex = listOfGroups.indexOf("auto");
            if (autoIndex !== -1) {
                listOfGroups.splice(autoIndex, 1)
            }
            return listOfGroups
        }
        Klang.getLoadGroups = getLoadGroups;
        Klang.getCoreInstance = function() {
            return Klang.core.Core.instance
        };
        Klang.getFileHandlerInstance = function() {
            return Klang.core.FileHandler.instance
        };

        function getUtil() {
            return Util
        }
        Klang.getUtil = getUtil;

        function getModel() {
            return Model
        }
        Klang.getModel = getModel;

        function schedule(time, fn) {
            if (Klang.engineVersion !== "webaudio") {
                Klang.err("Schedule only availible in WebAudio version");
                return this
            }
            if (typeof time === "number" && typeof fn === "function") {
                Klang.core.Core.instance.scheduler.at(time, fn)
            } else {
                Klang.err(".schedule requires arg0 - time in seconds and arg1 - a callback function")
            }
            return this
        }
        Klang.schedule = schedule;

        function createObject(name, options) {
            if (!Model[name]) {
                throw new Error("No such object")
            }
            return new Model[name](options)
        }
        Klang.createObject = createObject;

        function setDebugFlag(flagName, value) {
            Klang.core.Core.debugSettings[flagName] = value
        }
        Klang.setDebugFlag = setDebugFlag;

        function load(name, readyCallback, progressCallback, loadFailedCallback) {
            try {
                Klang.logc("Klang: Loading: '" + name + "'", Klang.Util.LOG_LOAD_COLOR);
                if (Klang.engineVersion == "webaudio") {
                    Klang.core.Core.instance.loadSoundFiles(name, readyCallback, progressCallback, loadFailedCallback)
                } else {
                    if (Klang.engineVersion == "audiotag") {
                        Klang.audioTagHandler.loadSoundFiles(name, readyCallback, progressCallback, loadFailedCallback)
                    } else {
                        if (progressCallback) {
                            progressCallback(1)
                        }
                        if (readyCallback) {
                            readyCallback(false)
                        }
                    }
                }
            } catch (ex) {
                Klang.err("Klang exception: unable to load file group: '" + name + "': " + ex.name + ": " + ex.message)
            }
        }
        Klang.load = load;

        function free(name) {
            try {
                Klang.logc("Klang: Freeing: '" + name + "'", Klang.Util.LOG_LOAD_COLOR);
                if (Klang.engineVersion == "webaudio") {
                    Klang.core.Core.instance.freeSoundFiles(name)
                } else {
                    if (Klang.engineVersion == "audiotag") {}
                }
            } catch (ex) {
                Klang.err("Klang exception: unable to free file group: '" + name + "': " + ex.name + ": " + ex.message)
            }
        }
        Klang.free = free;

        function getLoadProgress() {
            return FileHandler.instance.progress
        }
        Klang.getLoadProgress = getLoadProgress;

        function stopAll() {
            if (Klang.engineVersion == "webaudio") {
                if (Klang.core.Core.isInited()) {
                    Klang.core.Core.instance.stopAll()
                }
            } else {
                if (Klang.engineVersion == "audiotag") {
                    Klang.audioTagHandler.stopAll()
                }
            }
        }
        Klang.stopAll = stopAll;

        function $(symbol, args) {
            if (Klang.engineVersion == "webaudio") {
                if (Klang.core.Core.isInited()) {
                    if (symbol.indexOf(".") === 0) {
                        var type = symbol.substring(1);
                        var ret = [];
                        var entities = Klang.getCoreInstance()._objectTable;
                        for (var i in entities) {
                            if (entities.hasOwnProperty(i)) {
                                var entity = entities[i];
                                if (entity._type === type) {
                                    ret.push(entity)
                                }
                            }
                        }
                        return ret
                    } else {
                        var id = Klang.core.Core.instance.getSymbolId(symbol);
                        return Klang.core.Core.instance.findInstance(id)
                    }
                }
            } else {
                if (Klang.engineVersion == "audiotag") {}
            }
        }
        Klang.$ = $
    });
    Module(function(Klang) {
        function log() {
            var args = [];
            for (var _i = 0; _i < arguments.length - 0; _i++) {
                args[_i] = arguments[_i + 0]
            }
            if (Klang.loggingEnabled) {
                if (Klang.browser == "Chrome") {
                    console.log("%c[" + getTimeString() + "] " + args.join(), "color:" + Klang.Util.LOG_TIME_COLOR)
                } else {
                    console.log.apply(console, args)
                }
            }
        }
        Klang.log = log;

        function logc(message, color) {
            if (Klang.loggingEnabled) {
                if (Klang.browser == "Chrome") {
                    if (!color) {
                        color = "gray"
                    }
                    console.log("%c[" + getTimeString() + "] " + message, "color:" + color)
                } else {
                    console.log(message)
                }
            }
        }
        Klang.logc = logc;

        function warn() {
            var args = [];
            for (var _i = 0; _i < arguments.length - 0; _i++) {
                args[_i] = arguments[_i + 0]
            }
            if (Klang.loggingEnabled) {
                if (Klang.browser == "Chrome") {
                    console.warn("%c[" + Klang.getTimeString() + "] " + args.join(), "color:" + Klang.Util.LOG_WARN_COLOR)
                } else {
                    console.warn.apply(console, args)
                }
            }
        }
        Klang.warn = warn;

        function err() {
            var args = [];
            for (var _i = 0; _i < arguments.length - 0; _i++) {
                args[_i] = arguments[_i + 0]
            }
            if (Klang.loggingEnabled) {
                if (Klang.browser == "Chrome") {
                    console.warn("%c[" + Klang.getTimeString() + "] " + args.join(), "color:" + Klang.Util.LOG_ERROR_COLOR)
                } else {
                    console.warn.apply(console, args)
                }
            }
        }
        Klang.err = err;

        function zeropad(num, digits) {
            var str = num.toString();
            while (str.length < digits) {
                str = "0" + str
            }
            return str
        }
        Klang.zeropad = zeropad;

        function getTimeStamp(time) {
            return zeropad(time.getUTCMinutes(), 2) + ":" + zeropad(time.getUTCSeconds(), 2) + "." + zeropad(time.getUTCMilliseconds(), 3)
        }
        Klang.getTimeStamp = getTimeStamp;

        function getTimeString(t) {
            if (t === undefined) {
                t = Klang.context.currentTime
            }
            var ms = Math.round(t * 1000);
            var s = Math.floor(ms / 1000 % 60);
            var m = Math.floor(ms / (1000 * 60) % 60);
            var h = Math.floor(ms / (1000 * 60 * 60) % 24);
            return zeropad(h, 2) + ":" + zeropad(m, 2) + ":" + zeropad(s, 2) + "." + zeropad(ms % 1000, 3)
        }
        Klang.getTimeString = getTimeString;

        function getEvents() {
            if (Klang.engineVersion === "flash") {
                return null
            } else {
                if (Klang.engineVersion == "audiotag") {
                    return Klang.audioTagHandler._events
                }
            }
            return Klang.core.Core.instance._eventTable
        }
        Klang.getEvents = getEvents;
        Klang.debugData = {
            ignoredEvents: {},
            logToConsole: true
        };
        Klang.visualWindow;

        function setCallbacks(callbacks) {
            Klang.core.Core.instance.setCallbacks(callbacks)
        }
        Klang.setCallbacks = setCallbacks;

        function schedulePredefinedEvents(events) {
            var nextEventIx = 0;
            var eventInterval = setInterval(function() {
                var now = Klang.context.currentTime;
                var e = events[nextEventIx];
                while (e.time < now) {
                    triggerEvent(e.name, e.args);
                    nextEventIx++;
                    if (nextEventIx == events.length) {
                        clearInterval(eventInterval);
                        break
                    } else {
                        e = events[nextEventIx]
                    }
                }
            }, 10)
        }
        Klang.schedulePredefinedEvents = schedulePredefinedEvents;

        function deinit(url, readyCallback) {
            Klang.klangInited = false;
            if (Klang.engineVersion == "webaudio") {
                if (Klang.core.Core.isInited()) {
                    Klang.core.Core.instance.stopAll();
                    Klang.core.Core.deinit()
                }
            } else {
                if (Klang.engineVersion == "audiotag") {
                    Klang.audioTagHandler.stopAll()
                }
            }
            Klang.engineVersion = "n/a"
        }
        Klang.deinit = deinit
    });
    Module(function(Klang) {
        function EventEmitter() {}
        EventEmitter.prototype.on = function(name, callback, context) {
            this._events = this._events || {};
            var events = this._events[name] || (this._events[name] = []);
            events.push({
                callback: callback,
                ctxArg: context,
                context: context || this
            });
            return this
        };
        EventEmitter.prototype.off = function(name, callback, context) {
            var i, len, listener, retain;
            if (!this._events || !this._events[name]) {
                return this
            }
            if (!name && !callback && !context) {
                this._events = {}
            }
            var eventListeners = this._events[name];
            if (eventListeners) {
                retain = [];
                if (callback && context) {
                    for (i = 0, len = eventListeners.length; i < len; i++) {
                        listener = eventListeners[i];
                        if (callback !== listener.callback && context !== listener.ctxArg) {
                            retain.push(eventListeners[i])
                        }
                    }
                } else {
                    if (callback) {
                        for (i = 0, len = eventListeners.length; i < len; i++) {
                            listener = eventListeners[i];
                            if (callback !== listener.callback) {
                                retain.push(eventListeners[i])
                            }
                        }
                    } else {
                        if (context) {
                            for (i = 0, len = eventListeners.length; i < len; i++) {
                                listener = eventListeners[i];
                                if (context !== listener.ctxArg) {
                                    retain.push(eventListeners[i])
                                }
                            }
                        }
                    }
                }
                this._events[name] = retain
            }
            if (!this._events[name].length) {
                delete this._events[name]
            }
            return this
        };
        EventEmitter.prototype.trigger = function(name) {
            var args = [];
            for (var _i = 0; _i < arguments.length - 1; _i++) {
                args[_i] = arguments[_i + 1]
            }
            if (!this._events || !this._events[name]) {
                return this
            }
            var i, binding, listeners;
            listeners = this._events[name];
            args = [].splice.call(arguments, 1);
            for (i = listeners.length - 1; i >= 0; i--) {
                binding = listeners[i];
                binding.callback.apply(binding.context, args)
            }
            return this
        };
        return Klang.core.EventEmitter = EventEmitter
    });
    Module(function(Klang) {
        function SyncCountdown(targetStep, process, args) {
            this._currentStep = 0;
            this._targetStep = targetStep;
            this._process = process;
            this._args = args
        }
        SyncCountdown.prototype.advance = function(step) {
            this._currentStep += step
        };
        SyncCountdown.prototype.performAction = function() {
            if (typeof this._process == "string") {
                new Function("Core", "Model", "Util", "args", this._process)(Klang.core.Core, Klang.Model, Klang.Util, this._args)
            } else {
                this._process.start(this._args)
            }
        };
        Object.defineProperty(SyncCountdown.prototype, "finished", {
            get: function() {
                return this._currentStep >= this._targetStep
            },
            enumerable: true,
            configurable: true
        });
        return Klang.core.SyncCountdown = SyncCountdown
    });
    Module(function(Klang) {
        function SyncHandler() {
            this._timers = []
        }
        SyncHandler.prototype.addSyncCountdown = function(countdown) {
            this._timers.push(countdown)
        };
        SyncHandler.prototype.update = function(step) {
            for (var ix = 0; ix < this._timers.length; ix++) {
                var countdown = this._timers[ix];
                countdown.advance(step);
                if (countdown.finished) {
                    countdown.performAction();
                    this._timers.splice(ix, 1);
                    ix--
                }
            }
        };
        return Klang.core.SyncHandler = SyncHandler
    });
    Module(function() {});
    Module(function(Klang) {
        function Audio(data, name) {
            this.data = data;
            this._name = name;
            this._type = data.type;
            this._output = Klang.context.createGain();
            this._volume = data.volume !== undefined ? data.volume : 1;
            this._output.gain.value = this._volume;
            if (data.destination_name) {
                this.destinationName = data.destination_name;
                if (!Klang.core.Core.instance.initComplete) {
                    Klang.core.Core.instance.pushToConnectStack(this)
                }
            }
        }
        Audio.prototype.connect = function(destination) {
            Klang.warn("Audio: Invocation of abstract method: Audio.connect in", this);
            return this
        };
        Audio.prototype.disconnect = function() {
            Klang.warn("Audio: Invocation of abstract method: Audio.disconnect in", this);
            return this
        };
        Audio.prototype.play = function(when, offset) {
            Klang.warn("Audio: Invocation of abstract method: Audio.play in", this);
            return this
        };
        Audio.prototype.stop = function(when) {
            Klang.warn("Audio: Invocation of abstract method: Audio.stop in", this);
            return this
        };
        Audio.prototype.pause = function() {
            Klang.warn("Audio: Invocation of abstract method: Audio.pause in", this);
            return this
        };
        Audio.prototype.unpause = function() {
            Klang.warn("Audio: Invocation of abstract method: Audio.unpause in", this);
            return this
        };
        Audio.prototype.curvePlaybackRate = function(value, duration) {
            Klang.warn("Audio: Invocation of abstract method: Audio.curvePlaybackRate in", this);
            return this
        };
        Audio.prototype.fadeInAndPlay = function(duration, when) {
            console.warn("Audio: Invocation of abstract method: Audio.fadeInAndPlay in", this);
            return this
        };
        Audio.prototype.fadeOutAndStop = function(duration, when) {
            console.warn("Audio: Invocation of abstract method: Audio.fadeOutAndStop in", this);
            return this
        };
        Audio.prototype.deschedule = function() {
            console.warn("Audio: Invocation of abstract method: Audio.deschedule in", this);
            return this
        };
        Object.defineProperty(Audio.prototype, "playbackRate", {
            set: function(value) {
                Klang.warn("Audio: Invocation of abstract property: Audio.playbackRate in", this);
                return this
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "playing", {
            get: function() {
                Klang.warn("Audio: Invocation of abstract property: Audio.playing in", this);
                return false
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "duration", {
            get: function() {
                Klang.warn("Audio: Invocation of abstract property: Audio.duration in", this);
                return 0
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "output", {
            get: function() {
                return this._output
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "playbackState", {
            get: function() {
                Klang.warn("Audio: Invocation of abstract property: Audio.playbackState in", this);
                return 0
            },
            enumerable: true,
            configurable: true
        });
        Audio.prototype.setData = function(data) {
            this._volume = data.volume === undefined ? 1 : data.volume;
            this._output.gain.value = this._volume;
            if (this.destinationName != data.destination_name) {
                this.destinationName = data.destination_name;
                this.disconnect();
                this.connect(Klang.core.Core.instance.findInstance(this.destinationName).input)
            }
        };
        Audio.prototype.clone = function() {
            var clone = new this["constructor"](this.data, this._name);
            clone.connect(Klang.core.Core.instance.findInstance(this.destinationName).input);
            return clone
        };
        return Klang.Model.Audio = Audio
    });
    Module(function(Klang) {
        var AudioSource = function(_super) {
            Klang.Util.__extends(AudioSource, _super);

            function AudioSource(data, name) {
                _super.call(this, data, name);
                this._sources = [];
                this._startTime = 0;
                this._loopStartTime = 0;
                this._scheduleAhead = 0.2;
                this._stopping = false;
                this._fading = false;
                this._paused = false;
                this._pauseTime = -1;
                this._pauseStartTime = -1;
                this.editorName = data.editorName;
                this._fileId = data.file_id;
                this._playbackRate = data.playback_rate || 1;
                this._endTime = 0;
                this._loop = data.loop !== undefined ? data.loop : false;
                this._loopStart = data.loop_start;
                this._loopEnd = data.loop_end;
                this._offset = data.offset || 0;
                this._duration = data.duration || 0;
                this._reverse = data.reverse;
                this._retrig = data.retrig !== undefined ? data.retrig : true;
                this._lockPlaybackrate = data.lock_playback_rate !== undefined ? data.lock_playback_rate : false;
                this._volumeStartRange = data.volume_start_range;
                this._volumeEndRange = data.volume_end_range;
                this._pitchStartRange = data.pitch_start_range;
                this._pitchEndRange = data.pitch_end_range;
                this._maxSources = data.max_sources || -1;
                if (data.panner) {
                    this._panner = data.panner
                }
                if (data.granular) {
                    this._granular = {
                        bufferDuration: 0,
                        speed: data.granular.speed || 0.3333,
                        pitch: data.granular.pitch || 0,
                        pitchRandomization: data.granular.pitch_randomization || 0,
                        timeRandomization: data.granular.time_randomization || 0,
                        realTime: 0,
                        grainTime: 0,
                        grainDuration: data.granular.grain_duration || 0.09,
                        grainSpacing: data.granular.grain_spacing || 0.5 * 0.09,
                        grainWindow: null
                    };
                    var grainWindowLength = 16384;
                    this._granular.grainWindow = new Float32Array(grainWindowLength);
                    for (var i = 0; i < grainWindowLength; ++i) {
                        this._granular.grainWindow[i] = Math.sin(Math.PI * i / grainWindowLength)
                    }
                }
                if (!Klang.core.Core.instance.pushToPostLoadInitStack(this)) {
                    this.init()
                }
            }
            AudioSource.prototype.init = function() {
                if (this._fileId) {
                    if (typeof this._fileId == "string") {
                        this._buffer = Klang.core.FileHandler.instance.getFile(this._fileId)
                    } else {
                        if (this._fileId.sampleRate) {
                            this._buffer = this._fileId
                        }
                    }
                }
                if (!this._buffer) {
                    return
                }
                if (!this._duration) {
                    this._duration = this._buffer.duration
                }
                if (this._granular) {
                    this._granular.bufferDuration = this._buffer.duration - 0.05
                }
                if (Klang.detector.browser.name == "Edge" && this._loop) {
                    this._loopStart = (this._loopStart || 0) + 0.07;
                    this._loopEnd = (this._loopEnd || this.duration) + 0.07;
                    this.data.xfade = this.data.xfade || 0.1
                }
                if (this._reverse) {
                    var reverseBuffer = Klang.context.createBuffer(this._buffer.numberOfChannels, this._buffer.length, Klang.context.sampleRate);
                    for (var c = 0; c < this._buffer.numberOfChannels; c++) {
                        var channelBuffer = this._buffer.getChannelData(c);
                        var reverseChannelBuffer = reverseBuffer.getChannelData(c);
                        for (var len = channelBuffer.length, ix = len - 1; ix >= 0; ix--) {
                            reverseChannelBuffer[len - ix] = channelBuffer[ix]
                        }
                    }
                    this._buffer = reverseBuffer
                }
                if (this.data.xfade) {
                    var newBuffer = Klang.context.createBuffer(this._buffer.numberOfChannels, this._buffer.length, Klang.context.sampleRate);
                    for (var c = 0; c < this._buffer.numberOfChannels; c++) {
                        var channelBuffer = this._buffer.getChannelData(c);
                        var newChannelBuffer = newBuffer.getChannelData(c);
                        for (var len = channelBuffer.length, ix = len - 1; ix >= 0; ix--) {
                            newChannelBuffer[ix] = channelBuffer[ix]
                        }
                    }
                    this._buffer = newBuffer;
                    var sampleRate = Klang.context.sampleRate;
                    var fadeLength = this.data.xfade === true ? 11025 : this.data.xfade * sampleRate;
                    var loopStart = this._loopStart === undefined ? fadeLength : Math.round(this._loopStart * sampleRate);
                    var loopEnd = this._loopEnd === undefined ? this._buffer.length : Math.round(this._loopEnd * sampleRate);
                    crossfade(this._buffer, loopStart, loopEnd, fadeLength)
                }
            };
            AudioSource.prototype.setLoopRegion = function(loopStart, loopEnd) {
                this._loopStart = loopStart || this._loopStart;
                this._loopEnd = loopEnd || this._loopEnd;
                for (var ix = 0, len = this._sources.length; ix < len; ix++) {
                    var source = this._sources[ix];
                    source.loopStart = this._loopStart;
                    source.loopEnd = this._loopEnd
                }
                return this
            };
            AudioSource.prototype.connect = function(destination, forceConnect) {
                if (!this._destination || forceConnect) {
                    this._destination = destination;
                    if (this._panner) {
                        this._output.connect(this._panner.input);
                        this._panner.output.connect(destination)
                    } else {
                        this._output.connect(destination)
                    }
                }
                return this
            };
            AudioSource.prototype.disconnect = function() {
                this._output.disconnect();
                this._destination = null;
                if (this._panner) {
                    this._panner.output.disconnect()
                }
                return this
            };
            AudioSource.prototype.scheduleGrain = function() {
                if (!this._buffer) {
                    return
                }
                var g = this._granular;
                var source = Klang.context.createBufferSource();
                source.buffer = this._buffer;
                var r1 = Math.random();
                var r2 = Math.random();
                var r3 = Math.random();
                var r4 = Math.random();
                var r5 = Math.random();
                r1 = (r1 - 0.5) * 2;
                r2 = (r2 - 0.5) * 2;
                r3 = (r3 - 0.5) * 2;
                r4 = (r4 - 0.5) * 2;
                var grainWindowNode = Klang.context.createGain();
                source.connect(grainWindowNode);
                grainWindowNode.connect(this._output);
                var totalPitch = this._granular.pitch + r1 * g.pitchRandomization;
                var pitchRate = Math.pow(2, totalPitch / 1200);
                source.playbackRate.value = pitchRate;
                var randomGrainOffset = r2 * g.timeRandomization;
                source.start(g.realTime, g.grainTime + randomGrainOffset, g.grainDuration);
                var windowDuration = g.grainDuration / pitchRate;
                grainWindowNode.gain.value = 0;
                grainWindowNode.gain.setValueCurveAtTime(g.grainWindow, g.realTime, windowDuration);
                var lastGrainTime = g.grainTime;
                g.realTime += g.grainSpacing;
                g.grainTime += g.speed * g.grainSpacing;
                if (g.grainTime > g.bufferDuration) {
                    g.grainTime = 0;
                    if (!this._loop) {
                        this.stop()
                    }
                }
                if (g.grainTime < 0) {
                    g.grainTime += g.bufferDuration;
                    if (!this._loop) {
                        this.stop()
                    }
                }
            };
            AudioSource.prototype.granularSchedule = function(when) {
                while (this._granular.realTime < when + 0.1) {
                    this.scheduleGrain()
                }
                var _this = this;
                this._granular.scheduleId = setTimeout(function() {
                    _this.granularSchedule(Klang.context.currentTime)
                }, 20)
            };
            AudioSource.prototype.play = function(when, offset, duration, resume) {
                if (typeof when === "undefined") {
                    when = 0
                }
                if (typeof offset === "undefined") {
                    offset = 0
                }
                if (typeof resume === "undefined") {
                    resume = false
                }
                this.removeUnusedSources();
                if (this._maxSources > -1 && this._sources.length > this._maxSources) {
                    Klang.warn("AudioSource: Max sources reached", this._name);
                    return
                }
                if (!duration) {
                    if (this._loop) {
                        duration = 9999999999
                    } else {
                        duration = this._duration
                    }
                }
                if (!this._buffer) {
                    this.init();
                    if (!this._buffer) {
                        Klang.warn("AudioSource: Buffer not found!", this._name);
                        return
                    }
                }
                when = when || 0;
                if (this._granular) {
                    this.granularSchedule(when)
                } else {
                    if (when != 0 && when + 0.01 <= Klang.context.currentTime) {
                        Klang.warn("AudioSource: Returned, playTime < currentTime", this._name);
                        return this
                    } else {
                        if (when == 0) {
                            when = Klang.context.currentTime
                        }
                    }
                    this.output.gain.cancelScheduledValues(when);
                    if (this._volumeStartRange !== undefined) {
                        this.output.gain.setValueAtTime(this._volume * (Math.random() * (this._volumeEndRange - this._volumeStartRange) + this._volumeStartRange), when)
                    } else {
                        this.output.gain.setValueAtTime(this._volume, when)
                    }
                    if (!this.paused) {
                        this._pauseStartTime = when
                    }
                    if (!resume) {
                        this._pauseTime = 0
                    }
                    this._startTime = when;
                    this._loopStartTime = when + this.duration;
                    this._paused = false;
                    if (this._stopping && !this._retrig) {
                        this.output.gain.cancelScheduledValues(when);
                        this.output.gain.setValueAtTime(this.output.gain.value, when);
                        this.output.gain.linearRampToValueAtTime(this._volume, when + 0.25);
                        clearTimeout(this._stoppingId);
                        this._stopping = false;
                        return
                    } else {
                        if (!this._fading) {}
                    }
                    this._fading = false;
                    if (!this._retrig && !this.loop) {
                        if (when < this._endTime) {
                            return
                        }
                    } else {
                        if (this.loop && !this._retrig) {
                            if (this._endTime == -1 || when < this._endTime) {
                                return
                            }
                        } else {
                            if (this.loop && this._retrig && this.playing && !this._stopping) {
                                return
                            } else {
                                if (this._stopping) {
                                    this._stopping = false
                                } else {
                                    if (Math.round(this._endTime * 1000) / 1000 == Math.round((when + this._buffer.duration) * 1000) / 1000) {
                                        Klang.warn("AudioSource: Returned, Doubletrig", this._name);
                                        return this
                                    }
                                }
                            }
                        }
                    }
                    this._endTime = this.loop ? -1 : when + this._buffer.duration;
                    var source = this.createBufferSource();
                    source.buffer = this._buffer;
                    if (this._loop) {
                        source.loop = true;
                        source.loopStart = this._loopStart ? this._loopStart : 0;
                        source.loopEnd = this._loopEnd ? this._loopEnd : this._buffer.duration
                    }
                    if (!this._destination) {
                        Klang.warn("AudioSource: no destination node")
                    }
                    if (typeof this._destination != "object") {
                        Klang.warn("AudioSource: destination is not an object", this._name)
                    }
                    source.connect(this._output);
                    if (offset > this._duration) {
                        offset = offset % this._duration
                    }
                    this._startOffset = this._offset + offset;
                    if (this._pitchStartRange !== undefined) {
                        source.playbackRate.value = this._playbackRate * (Math.random() * (this._pitchEndRange - this._pitchStartRange) + this._pitchStartRange)
                    }
                    source.startTime = when;
                    if (this._loop) {
                        source.start(when, this._startOffset)
                    } else {
                        source.start(when, this._startOffset, duration || source.buffer.duration)
                    }
                    if (Klang.core.Core.callbacks && Klang.core.Core.callbacks.scheduleAudioSource) {
                        Klang.core.Core.callbacks.scheduleAudioSource({
                            audio: this,
                            startTime: when
                        })
                    }
                }
                return this
            };
            AudioSource.prototype.getNumberOfSamples = function() {
                return this._buffer.length
            };
            AudioSource.prototype.stop = function(when) {
                if (typeof when === "undefined") {
                    when = 0
                }
                if (this._granular) {
                    clearTimeout(this._granular.scheduleId)
                } else {
                    if (this._stopping) {
                        this._stopping = false;
                        clearTimeout(this._stoppingId)
                    }
                    var numSources = this._sources.length;
                    if (numSources > 0) {
                        when = when || Klang.Util.now();
                        if (this._loop) {
                            this._loopPlaying = false
                        }
                        this._endTime = when;
                        if (this._retrig) {
                            this._sources[this._sources.length - 1].stop(when);
                            this._sources.splice(this._sources.length - 1, 1)
                        } else {
                            for (var ix = 0; ix < numSources; ix++) {
                                var source = this._sources[ix];
                                source.stop(when);
                                this._endTime = Klang.Util.now()
                            }
                            this._sources = []
                        }
                    } else {
                        this._loopPlaying = false
                    }
                }
                return this
            };
            AudioSource.prototype.deschedule = function() {
                for (var ix = 0; ix < this._sources.length; ix++) {
                    var source = this._sources[ix];
                    if (source.startTime > Klang.context.currentTime) {
                        source.stop(0);
                        this._sources[ix].disconnect();
                        source.disconnect();
                        this._sources.splice(ix, 1);
                        ix--
                    }
                }
                return this
            };
            AudioSource.prototype.pause = function() {
                if (this._endTime > Klang.Util.now()) {
                    this._paused = true;
                    var pauseDelta = Klang.Util.now() - this._startTime;
                    this._pauseTime += pauseDelta;
                    this.stop()
                }
                return this
            };
            AudioSource.prototype.unpause = function() {
                if (this.paused) {
                    var realOffset = this._offset;
                    this._offset += this._pauseTime;
                    this.play(0, 0, null, true);
                    this._offset = realOffset;
                    this._paused = false
                }
                return this
            };
            AudioSource.prototype.createBufferSource = function() {
                var source = Klang.context.createBufferSource();
                source.playbackRate.value = this._playbackRate;
                this._sources.push(source);
                return source
            };
            AudioSource.prototype.fadeInAndPlay = function(fadeDuration, when, offset, duration) {
                if (typeof offset === "undefined") {
                    offset = 0
                }
                if (typeof duration === "undefined") {
                    duration = this._duration
                }
                var now = Klang.context.currentTime;
                if (!when) {
                    when = now
                }
                if (this.loop && (!this._retrig && (this._endTime == -1 || when < this._endTime)) && !this._stopping) {
                    return
                } else {
                    if (this.loop && this._retrig && this.playing && !this._stopping) {
                        return
                    }
                }
                this.output.gain.cancelScheduledValues(when);
                if (this._stopping) {
                    clearTimeout(this._stoppingId);
                    this.output.gain.setValueAtTime(this.output.gain.value, when)
                } else {
                    this._fading = true;
                    this.play(when == now ? 0 : when, offset, duration);
                    this.output.gain.setValueAtTime(0, when)
                }
                this._stopping = false;
                this.output.gain.linearRampToValueAtTime(this._volume, when + fadeDuration);
                return this
            };
            AudioSource.prototype.fadeOutAndStop = function(duration, when) {
                if (!this.playing) {
                    return
                }
                if (when === undefined) {
                    when = Klang.context.currentTime
                }
                if (this._stopping) {
                    clearTimeout(this._stoppingId)
                }
                this.output.gain.cancelScheduledValues(when);
                this.output.gain.setValueAtTime(this.output.gain.value || this._volume, when);
                this.output.gain.linearRampToValueAtTime(0, when + duration);
                var _this = this;
                this._stoppingId = setTimeout(function() {
                    if (!_this._stopping) {
                        return
                    }
                    _this._stopping = false;
                    if (_this.loop) {
                        _this._loopPlaying = false
                    }
                    _this.stop(when + duration)
                }, (duration + (when - Klang.Util.now()) - _this._scheduleAhead) / 0.001);
                this._stopping = true;
                return this
            };
            AudioSource.prototype.removeUnusedSources = function() {
                for (var ix = 0; ix < this._sources.length; ix++) {
                    var source = this._sources[ix];
                    if (!source.buffer || !this.loop && source.startTime + source.buffer.duration < Klang.context.currentTime) {
                        this._sources[ix].disconnect();
                        this._sources.splice(ix, 1);
                        ix--
                    }
                }
            };
            AudioSource.prototype.curvePlaybackRate = function(value, duration, when) {
                if (this._lockPlaybackrate) {
                    return
                }
                var startTime = when ? when : Klang.Util.now();
                var node = this.playbackRateNode;
                if (node) {
                    node.cancelScheduledValues(startTime);
                    node.setValueAtTime(node.value == 0 ? Klang.Util.EXP_MIN_VALUE : node.value, startTime);
                    node.exponentialRampToValueAtTime(value, startTime + duration)
                }
                this._playbackRate = value;
                return this
            };
            Object.defineProperty(AudioSource.prototype, "lastSource", {
                get: function() {
                    var numSources = this._sources.length;
                    if (numSources == 0) {
                        return null
                    }
                    return this._sources[numSources - 1]
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "loop", {
                get: function() {
                    return this._loop
                },
                set: function(value) {
                    this._loop = value
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "offset", {
                get: function() {
                    return this._offset
                },
                set: function(value) {
                    if (typeof value === "string" && value.indexOf("%") !== -1) {
                        value = this._duration * parseFloat(value)
                    }
                    this._offset = value
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "position", {
                get: function() {
                    if (!this.playing || !this._duration) {
                        return 0
                    }
                    var duration = this._duration;
                    if (this._loopStart || this._loopEnd) {
                        duration = (this._loopEnd || duration) - (this._loopStart || 0)
                    }
                    var timePlayed = Klang.Util.now() - this._startTime;
                    var loopTimePlayed = Klang.Util.now() + this._startOffset - this._loopStartTime;
                    if (this._startOffset + timePlayed > this._duration) {
                        return (this._loopStart || 0) + loopTimePlayed % duration
                    } else {
                        return this._startOffset + timePlayed
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "duration", {
                get: function() {
                    return this._duration
                },
                set: function(value) {
                    this._duration = value
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "paused", {
                get: function() {
                    return this._paused
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "playbackRate", {
                get: function() {
                    return this._playbackRate
                },
                set: function(value) {
                    if (this._lockPlaybackrate) {
                        return
                    }
                    var node = this.playbackRateNode;
                    if (node) {
                        node.cancelScheduledValues(Klang.Util.now())
                    }
                    this._playbackRate = value;
                    for (var ix = 0, len = this._sources.length; ix < len; ix++) {
                        this._sources[ix].playbackRate.value = this._playbackRate
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "nextPlaybackRate", {
                set: function(value) {
                    if (this._lockPlaybackrate) {
                        return
                    }
                    this._playbackRate = value
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "playbackRateNode", {
                get: function() {
                    var source = this.lastSource;
                    return source && source.playbackRate
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "buffer", {
                get: function() {
                    if (!this._buffer) {
                        this._buffer = Klang.core.FileHandler.instance.getFile(this._fileId)
                    }
                    return this._buffer
                },
                set: function(buffer) {
                    this._buffer = buffer
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "playing", {
                get: function() {
                    return this._endTime == -1 || this._endTime > Klang.Util.now()
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "playbackState", {
                get: function() {
                    var source = this.lastSource;
                    if (source) {
                        return source.playbackState
                    }
                    return 0
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "output", {
                get: function() {
                    if (this._panner) {
                        return this._panner.output
                    } else {
                        return this._output
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AudioSource.prototype, "panner", {
                get: function() {
                    return this._panner
                },
                enumerable: true,
                configurable: true
            });
            AudioSource.prototype.freeBuffer = function() {
                this._buffer = null;
                for (var ix = 0, len = this._sources.length; ix < len; ix++) {
                    try {
                        this._sources[ix].stop(0)
                    } catch (ex) {}
                    this._sources[ix].disconnect();
                    this._sources[ix] = null
                }
                this._sources = []
            };
            AudioSource.prototype.setData = function(data) {
                _super.prototype.setData.call(this, data);
                var reinit = false;
                this._volumeStartRange = data.volume_start_range;
                this._volumeEndRange = data.volume_end_range;
                this._pitchEndRange = data.pitch_end_range;
                this._pitchStartRange = data.pitch_start_range;
                if (data.file_id !== undefined && this._fileId != data.file_id) {
                    this._fileId = data.file_id;
                    reinit = true
                }
                this._playbackRate = data.playback_rate === undefined ? 1 : data.playback_rate;
                if (this.playbackRateNode) {
                    this.playbackRateNode.value = this._playbackRate
                }
                this._loop = data.loop === undefined ? false : data.loop;
                if (this.lastSource) {
                    this.lastSource.loop = this._loop
                }
                if (!this._loop) {
                    this._loopPlaying = false
                }
                this._loopStart = data.loop_start === undefined ? 0 : data.loop_start;
                if (this.lastSource) {
                    this.lastSource.loopStart = this._loopStart
                }
                this._loopEnd = data.loop_end === undefined ? 0 : data.loop_end;
                if (this.lastSource) {
                    this.lastSource.loopEnd = this._loopEnd
                }
                var offset = data.offset === undefined ? 0 : data.offset;
                if (this._offset != offset) {
                    this._offset = offset;
                    reinit = true
                }
                var duration = data.duration === undefined ? 0 : data.duration;
                if (this._duration != duration) {
                    this._duration = duration;
                    reinit = true
                }
                this._retrig = data.retrig === undefined ? true : data.retrig;
                if (data.reverse === undefined) {
                    data.reverse = false
                }
                if (this._reverse != data.reverse) {
                    this._reverse = data.reverse;
                    reinit = true
                }
                if (data.xfade === undefined) {
                    data.xfade = false
                }
                if (this.data.xfade != data.xfade) {
                    reinit = true
                }
                this.data = data;
                if (reinit) {
                    this.init()
                }
                if (data.granular) {
                    if (this._granular) {
                        if (data.granular.speed !== undefined) {
                            this._granular.speed = data.granular.speed
                        }
                        if (data.granular.pitch !== undefined) {
                            this._granular.pitch = data.granular.pitch
                        }
                        if (data.granular.pitch_randomization !== undefined) {
                            this._granular.pitchRandomization = data.granular.pitch_randomization
                        }
                        if (data.granular.time_randomization !== undefined) {
                            this._granular.timeRandomization = data.granular.time_randomization
                        }
                        if (data.granular.grain_duration !== undefined) {
                            this._granular.grainDuration = data.granular.grain_duration
                        }
                        if (data.granular.grain_spacing !== undefined) {
                            this._granular.grainSpacing = data.granular.grain_spacing
                        }
                    } else {
                        this._granular = {
                            bufferDuration: this._buffer.duration - 0.05,
                            speed: data.granular.speed || 0.3333,
                            pitch: data.granular.pitch || 0,
                            pitchRandomization: data.granular.pitch_randomization || 0,
                            timeRandomization: data.granular.time_randomization || 0,
                            realTime: 0,
                            grainTime: 0,
                            grainDuration: data.granular.grain_duration || 0.09,
                            grainSpacing: data.granular.grain_spacing || 0.5 * 0.09,
                            grainWindow: null
                        };
                        var grainWindowLength = 16384;
                        var grainWindow = new Float32Array(grainWindowLength);
                        for (var i = 0; i < grainWindowLength; ++i) {
                            grainWindow[i] = Math.sin(Math.PI * i / grainWindowLength)
                        }
                        this._granular.grainWindow = grainWindow
                    }
                } else {
                    if (this._granular) {
                        clearTimeout(this._granular.scheduleId);
                        this._granular = null
                    }
                }
                if (data.panner) {
                    if (!this._panner) {
                        var d = this._destination;
                        this.disconnect();
                        this._panner = newPanner(data.panner);
                        this.connect(d)
                    } else {
                        this._panner.setData(data.panner)
                    }
                } else {
                    if (!data.panner) {
                        if (this._panner) {
                            var d = this._destination;
                            this.disconnect();
                            this._panner = null;
                            this.connect(d)
                        }
                    }
                }
            };
            return AudioSource
        }(Klang.Model.Audio);

        function crossfade(buf, loopStart, loopEnd, length, type) {
            if (typeof type === "undefined") {
                type = "equalpower"
            }
            var funA;
            var funB;
            if (type == "linear") {
                funA = function(x) {
                    return 1 - x
                };
                funB = function(x) {
                    return x
                }
            } else {
                if (type == "equalpower") {
                    funA = function(x) {
                        return Math.pow(1 - x, 0.5)
                    };
                    funB = function(x) {
                        return Math.pow(x, 0.5)
                    }
                } else {
                    return
                }
            }
            loopEnd = Math.min(loopEnd, buf.length);
            length = Math.min(length, loopStart);
            for (var c = 0; c < buf.numberOfChannels; c++) {
                var data = buf.getChannelData(c);
                var a = loopEnd - 1;
                var b = loopStart - 1;
                for (var i = length - 1; i >= 0; i--) {
                    var ratio = (i + 1) / (length + 1);
                    data[a] = data[a] * funA(ratio) + data[b] * funB(ratio);
                    a--;
                    b--
                }
                var le = loopEnd;
                var ls = loopStart;
                while (le < buf.length) {
                    data[le++] = data[ls++]
                }
            }
        }
        Klang.Model.crossfade = crossfade;
        return Klang.Model.AudioSource = AudioSource
    });
    Module(function(Klang) {
        var GroupType = {
            CONCURRENT: 0,
            STEP: 1,
            RANDOM: 2,
            SHUFFLE: 3,
            BACKWARDS: 4
        };
        var QueueType = {
            NONE: 0,
            ONE: 1,
            INFINITE: 2
        };

        function AudioGroup(data, name) {
            this._adder = 0;
            this._currentId = 0;
            this._paused = false;
            this.data = data;
            this.editorName = data.editorName;
            this._name = name;
            this._type = data.type;
            this._groupType = data.group_type !== undefined ? data.group_type : GroupType.STEP;
            this._retrig = data.retrig !== undefined ? data.retrig : true;
            this._queue = data.queue !== undefined ? data.queue : QueueType.NONE;
            this._content = data.content || [];
            Klang.core.Core.instance.pushToPreLoadInitStack(this)
        }
        AudioGroup.prototype.init = function() {
            var newContent = [];
            for (var ix = 0, len = this._content.length; ix < len; ix++) {
                newContent.push(Klang.core.Core.instance.findInstance(this._content[ix]))
            }
            this._content = newContent
        };
        AudioGroup.prototype.play = function(when, audioSource, forcePlay) {
            if (!this._content.length) {
                return
            }
            var latestPlaying = this.latestPlayed ? this.latestPlayed.playing : false;
            if (!forcePlay && !this._retrig && latestPlaying) {
                if (this._queue != QueueType.NONE) {
                    if (this._queue == QueueType.ONE && this._latestStartTime > Klang.context.currentTime) {
                        this.latestPlayed.stop();
                        this.play(this._latestStartTime, audioSource, true)
                    } else {
                        this.play(this._latestStartTime + this.latestPlayed.duration, audioSource, true)
                    }
                }
                return this
            }
            this._paused = false;
            if (audioSource !== undefined) {
                var asId;
                if (typeof audioSource == "number") {
                    asId = audioSource
                } else {
                    if (typeof audioSource == "string") {
                        asId = this.getIdFromString(audioSource)
                    } else {
                        if (audioSource._name) {
                            asId = this.getIdFromString(audioSource._name)
                        }
                    }
                }
                this._content[asId].play(when);
                this._latestPlayed = this._content[asId]
            } else {
                if (this._groupType == GroupType.CONCURRENT) {
                    for (var ix = 0, len = this._content.length; ix < len; ix++) {
                        this._content[ix].play(when)
                    }
                } else {
                    this._currentId = this.getIdToPlay();
                    this._content[this._currentId].play(when)
                }
                if (this._groupType === GroupType.CONCURRENT) {
                    this._latestPlayed = this._content[0]
                } else {
                    this._latestPlayed = this._content[this._currentId]
                }
            }
            this._latestStartTime = when || Klang.context.currentTime;
            return this
        };
        AudioGroup.prototype.getIdToPlay = function() {
            var _id;
            if (this._groupType == GroupType.STEP) {
                if (this._adder < 0) {
                    _id = this._content.length - 1 + this._adder % this._content.length
                } else {
                    _id = this._adder % this._content.length
                }
                this._adder++
            } else {
                if (this._groupType == GroupType.RANDOM) {
                    var random = Math.floor(Math.random() * (this._content.length - 1));
                    if (this._content.length > 1 && random == this._adder) {
                        random = (random + 1) % this._content.length
                    }
                    _id = this._adder = random
                } else {
                    if (this._groupType == GroupType.SHUFFLE) {
                        if (this._adder % this._content.length == 0) {
                            Klang.Util.shuffle(this._content)
                        }
                        _id = this._adder % this._content.length;
                        this._adder++
                    } else {
                        if (this._groupType == GroupType.BACKWARDS) {
                            if (this._adder < 0) {
                                _id = this._content.length - 1 + this._adder % this._content.length
                            } else {
                                _id = this._adder % this._content.length
                            }
                            this._adder--
                        }
                    }
                }
            }
            return _id
        };
        AudioGroup.prototype.stop = function(when) {
            this._content[this._currentId].stop(when);
            return this
        };
        AudioGroup.prototype.stopAll = function(when) {
            for (var ix = 0, len = this._content.length; ix < len; ix++) {
                this._content[ix].stop(when)
            }
            return this
        };
        AudioGroup.prototype.pause = function() {
            this._paused = true;
            if (this._latestPlayed) {
                this._latestPlayed.pause()
            }
            return this
        };
        AudioGroup.prototype.unpause = function() {
            this._paused = false;
            if (this._latestPlayed) {
                this._latestPlayed.unpause()
            }
            return this
        };
        AudioGroup.prototype.fadeInAndPlay = function(duration, when) {
            var latestPlaying = this.latestPlayed ? this.latestPlayed.playing : false;
            if (!this._retrig && latestPlaying) {
                return
            }
            this._currentId = this.getIdToPlay();
            this._latestPlayed = this._content[this._currentId];
            this._content[this._currentId].fadeInAndPlay(duration, when);
            return this
        };
        AudioGroup.prototype.fadeOutAndStop = function(duration, when) {
            if (when === undefined) {
                when = Klang.context.currentTime
            }
            if (this._latestPlayed) {
                this._latestPlayed.fadeOutAndStop(duration, when)
            }
            return this
        };
        AudioGroup.prototype.curvePlaybackRate = function(value, duration, when) {
            var startTime = when ? when : Klang.Util.now();
            for (var ix = 0, len = this._content.length; ix < len; ix++) {
                this._content[ix].curvePlaybackRate(value, duration, when)
            }
            return this
        };
        AudioGroup.prototype.deschedule = function() {
            for (var ix = 0, len = this._content.length; ix < len; ix++) {
                this._content[ix].deschedule()
            }
            return this
        };
        AudioGroup.prototype.getIdFromString = function(str) {
            for (var ix = 0, len = this._content.length; ix < len; ix++) {
                if (this._content[ix]._name == str) {
                    return ix
                }
            }
        };
        Object.defineProperty(AudioGroup.prototype, "playbackRate", {
            set: function(value) {
                for (var ix = 0, len = this._content.length; ix < len; ix++) {
                    this._content[ix].playbackRate = value
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioGroup.prototype, "groupType", {
            get: function() {
                return this._groupType
            },
            set: function(value) {
                this._groupType = value
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioGroup.prototype, "content", {
            get: function() {
                return this._content
            },
            set: function(value) {
                this._content = value;
                this.init()
            },
            enumerable: true,
            configurable: true
        });
        AudioGroup.prototype.addContent = function(audio) {
            this._content.push(audio)
        };
        AudioGroup.prototype.removeContent = function(name) {
            for (var i = 0; i < this._content.length; i++) {
                if (this._content[i]._name === name) {
                    this._content.splice(i, 1)
                }
            }
        };
        Object.defineProperty(AudioGroup.prototype, "playing", {
            get: function() {
                return this._latestPlayed ? this._latestPlayed.playing : false
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioGroup.prototype, "duration", {
            get: function() {
                return this._latestPlayed ? this._latestPlayed.duration : this._content[0].duration
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioGroup.prototype, "playbackState", {
            get: function() {
                return this._content[this._currentId].playbackState
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioGroup.prototype, "latestPlayed", {
            get: function() {
                return this._latestPlayed
            },
            enumerable: true,
            configurable: true
        });
        AudioGroup.prototype.setData = function(data) {
            this._groupType = data.group_type === undefined ? GroupType.STEP : data.group_type;
            this._retrig = data.retrig === undefined ? true : data.retrig;
            this._queue = data.queue === undefined ? QueueType.NONE : data.queue;
            if (data.content) {
                this._content = data.content;
                this.init()
            }
        };
        return Klang.Model.AudioGroup = AudioGroup
    });
    Module(function(Klang) {
        function Automation(data) {
            this._startValue = data.start_value || 0;
            this._points = data.points || []
        }
        Automation.prototype.automate = function(param, when) {
            when = when || Klang.context.currentTime;
            param.cancelScheduledValues(when);
            param.setValueAtTime(this._startValue, when);
            var lastEndTime = 0;
            for (var ix = 0, len = this._points.length; ix < len; ix++) {
                var p = this._points[ix];
                switch (p.curve) {
                    case "lin":
                        param.linearRampToValueAtTime(p.value, when + p.time);
                        break;
                    case "exp":
                        param.exponentialRampToValueAtTime(p.value, when + p.time);
                        break;
                    default:
                        if (Klang.Util.CUSTOM_CURVES[p.curve]) {
                            Klang.warn("Automation: Invalid curve type: " + p.curve);
                            break
                        }
                        param.setValueCurveAtTime(Klang.Util.CUSTOM_CURVES[p.curve], when + lastEndTime, p.time - lastEndTime);
                        break
                }
                lastEndTime = p.time
            }
        };
        return Klang.Model.Automation = Automation
    });
    Module(function(Klang) {
        function Bus(data, name) {
            this._name = name;
            this._type = data.type;
            this._input = Klang.context.createGain();
            this._output = Klang.context.createGain();
            this._effects = data.effects || [];
            for (var i = 0, len = this._effects.length; i < len; i++) {
                if (data.effects[i].active === false) {
                    this._effects[i].setActive(false)
                }
            }
            this._input.gain.value = data.input_vol !== undefined ? data.input_vol : 1;
            this._output.gain.value = data.output_vol !== undefined ? data.output_vol : 1;
            if (data.destination_name) {
                this.destinationName = data.destination_name;
                Klang.core.Core.instance.pushToConnectStack(this)
            }
            Klang.core.Core.instance.pushToPreLoadInitStack(this)
        }
        Bus.prototype.init = function() {
            var lastNode = this._input;
            for (var i = 0, len = this._effects.length; i < len; i++) {
                lastNode.disconnect();
                lastNode.connect(this._effects[i].input);
                lastNode = this._effects[i]
            }
            lastNode.connect(this._output)
        };
        Bus.prototype.connect = function(destination) {
            this._output.connect(destination);
            this._destination = destination;
            return this
        };
        Bus.prototype.disconnect = function() {
            this._output.disconnect();
            return this
        };
        Bus.prototype.refreshAudioNodes = function() {
            for (var i = 0; i < this.effects.length; i++) {
                this.effects[i].disconnect();
                if (this.effects[i].refreshAudioNodes) {
                    this.effects[i].refreshAudioNodes()
                }
            }
            var outVol = this._output.gain.value;
            this._output.gain.cancelScheduledValues(Klang.context.currentTime);
            this._output.disconnect();
            this._output = Klang.context.createGain();
            this._output.gain.setValueAtTime(outVol, Klang.context.currentTime);
            this.init();
            if (this._destination) {
                this._output.connect(this._destination)
            }
        };
        Bus.prototype.insertEffect = function(effectData, index) {
            var effect = Klang.core.Core.instance.createObject(undefined, effectData, {
                excludeFromTable: true
            });
            if (index === undefined) {
                this._effects.push(effect)
            } else {
                this._effects.splice(index, 0, effect)
            }
            this.init();
            return this
        };
        Bus.prototype.moveEffect = function(fromIndex, toIndex) {
            for (var i = 0, len = this._effects.length; i < len; i++) {
                this._effects[i].disconnect()
            }
            var effect = this._effects[fromIndex];
            this._effects.splice(fromIndex, 1);
            this._effects.splice(toIndex, 0, effect);
            this.init();
            return this
        };
        Object.defineProperty(Bus.prototype, "input", {
            get: function() {
                return this._input
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Bus.prototype, "output", {
            get: function() {
                return this._output
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Bus.prototype, "effects", {
            get: function() {
                return this._effects
            },
            enumerable: true,
            configurable: true
        });
        Bus.prototype.setData = function(data) {
            this._input.gain.value = data.input_vol === undefined ? 1 : data.input_vol;
            this._output.gain.value = data.output_vol === undefined ? 1 : data.output_vol;
            if (data.effects.length < this.effects.length) {
                this.input.disconnect();
                var found = false;
                for (var ix = 0; ix < this._effects.length; ix++) {
                    this._effects[ix].disconnect();
                    if (!found) {
                        if (data.effects[ix] === undefined) {
                            this._effects.splice(ix, 1);
                            found = true
                        } else {
                            if (this._effects[ix]._type != data.effects[ix].type) {
                                this._effects.splice(ix, 1);
                                ix--;
                                found = true
                            }
                        }
                    }
                }
                this.init()
            } else {
                if (data.effects.length > this.effects.length) {
                    this.insertEffect(data.effects[data.effects.length - 1])
                } else {
                    for (var ix = 0, len = this._effects.length; ix < len; ix++) {
                        this._effects[ix].setData(data.effects[ix])
                    }
                }
            }
            if (this.destinationName != data.destination_name) {
                this.destinationName = data.destination_name;
                this.disconnect();
                if (this.destinationName == "$OUT") {
                    this.connect(Klang.core.Core.instance._superMasterOutput)
                } else {
                    this.connect(Klang.core.Core.instance.findInstance(this.destinationName).input)
                }
            }
        };
        return Klang.Model.Bus = Bus
    });
    Module(function(Klang) {
        Klang.engines = Klang.engines || {};
        Klang.engines.webAudio = {}
    });
    Module(function(Klang) {
        Klang.audioUtil = Klang.engines.webAudio.Util = {}
    });
    Module(function(Klang) {
        var scales = {
            diatonic: [0, -1, 0, -1, 0, 0, -1, 0, -1, 0, -1, 0],
            dorian: [0, 1, 0, 0, -1, 0, 1, 0, 1, 0, 0, -1],
            phrygian: [0, 0, -1, 0, -1, 0, 1, 0, 0, -1, 0, -1],
            lydian: [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],
            mixolydian: [0, 1, 0, 1, 0, 0, -1, 0, -1, 0, 0, -1],
            aeolian: [0, -1, 0, 0, -1, 0, -1, 0, 0, -1, 0, -1],
            locrian: [0, 0, -1, 0, -1, 0, 0, -1, 0, -1, 0, -1],
            harmonicMinor: [0, 1, 0, 0, -1, 0, 1, 0, 0, -1, 1, 0],
            melodicMinor: [0, 1, 0, 0, -1, 0, 1, 0, -1, 0, 1, 0],
            majorPentatonic: [0, 1, 0, 1, 0, -1, 1, 0, 1, 0, -1, 1],
            minorPentatonic: [0, -1, 1, 0, -1, 0, 1, 0, -1, 1, 0, -1],
            doubleHarmonic: [0, 0, -1, 1, 0, 0, 1, 0, 0, -1, 1, 0],
            halfDim: [0, 1, 0, 0, -1, 0, 0, -1, 0, -1, 0, -1],
            chromatic: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            custom: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        };
        var getTransposeFromScale = function(midiNoteNumber, scale, root) {
            var scaleStep = midiNoteNumber % 12 - root;
            if (scaleStep < 0) {
                scaleStep += 12
            }
            var transpose = this.scales[scale][scaleStep];
            return transpose
        };
        var getNoteInScale = function(midiNoteNumber, scale, root) {
            var transpose;
            if (scale) {
                var orgNote = midiNoteNumber;
                var scaleStep = orgNote % 12 - root;
                if (scaleStep < 0) {
                    scaleStep += 12
                }
                transpose = this.scales[scale][scaleStep]
            }
            return midiNoteNumber + transpose
        };
        Klang.engines.webAudio.Util.getNoteInScale = getNoteInScale;
        Klang.engines.webAudio.Util.getTransposeFromScale = getTransposeFromScale;
        Klang.engines.webAudio.Util.scales = scales
    });
    Module(function(Klang) {
        function Audio(data, name) {
            this.data = data;
            this._name = name;
            this._type = data.type;
            this._output = Klang.context.createGain();
            this._volume = data.volume !== undefined ? data.volume : 1;
            this._output.gain.value = this._volume;
            if (data.destination_name) {
                this.destinationName = data.destination_name;
                if (!Klang.core.Core.instance.initComplete) {
                    Klang.core.Core.instance.pushToConnectStack(this)
                }
            }
        }
        Audio.prototype.connect = function(destination) {
            Klang.warn("Audio: Invocation of abstract method: Audio.connect in", this);
            return this
        };
        Audio.prototype.disconnect = function() {
            Klang.warn("Audio: Invocation of abstract method: Audio.disconnect in", this);
            return this
        };
        Audio.prototype.play = function(when, offset) {
            Klang.warn("Audio: Invocation of abstract method: Audio.play in", this);
            return this
        };
        Audio.prototype.stop = function(when) {
            Klang.warn("Audio: Invocation of abstract method: Audio.stop in", this);
            return this
        };
        Audio.prototype.pause = function() {
            Klang.warn("Audio: Invocation of abstract method: Audio.pause in", this);
            return this
        };
        Audio.prototype.unpause = function() {
            Klang.warn("Audio: Invocation of abstract method: Audio.unpause in", this);
            return this
        };
        Audio.prototype.curvePlaybackRate = function(value, duration) {
            Klang.warn("Audio: Invocation of abstract method: Audio.curvePlaybackRate in", this);
            return this
        };
        Audio.prototype.fadeInAndPlay = function(duration, when) {
            console.warn("Audio: Invocation of abstract method: Audio.fadeInAndPlay in", this);
            return this
        };
        Audio.prototype.fadeOutAndStop = function(duration, when) {
            console.warn("Audio: Invocation of abstract method: Audio.fadeOutAndStop in", this);
            return this
        };
        Audio.prototype.deschedule = function() {
            console.warn("Audio: Invocation of abstract method: Audio.deschedule in", this);
            return this
        };
        Object.defineProperty(Audio.prototype, "playbackRate", {
            set: function(value) {
                Klang.warn("Audio: Invocation of abstract property: Audio.playbackRate in", this);
                return this
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "playing", {
            get: function() {
                Klang.warn("Audio: Invocation of abstract property: Audio.playing in", this);
                return false
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "duration", {
            get: function() {
                Klang.warn("Audio: Invocation of abstract property: Audio.duration in", this);
                return 0
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "output", {
            get: function() {
                return this._output
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "playbackState", {
            get: function() {
                Klang.warn("Audio: Invocation of abstract property: Audio.playbackState in", this);
                return 0
            },
            enumerable: true,
            configurable: true
        });
        Audio.prototype.setData = function(data) {
            this._volume = data.volume === undefined ? 1 : data.volume;
            this._output.gain.value = this._volume;
            if (this.destinationName != data.destination_name) {
                this.destinationName = data.destination_name;
                this.disconnect();
                this.connect(Klang.core.Core.instance.findInstance(this.destinationName).input)
            }
        };
        Audio.prototype.clone = function() {
            var clone = new this["constructor"](this.data, this._name);
            clone.connect(Klang.core.Core.instance.findInstance(this.destinationName).input);
            return clone
        };
        return Klang.Model.Audio = Audio
    });
    Module(function(Klang) {
        (function(PatternState) {
            PatternState._map = [];
            PatternState._map[0] = "PrePlaying";
            PatternState.PrePlaying = 0;
            PatternState._map[1] = "Playing";
            PatternState.Playing = 1;
            PatternState._map[2] = "PreStopping";
            PatternState.PreStopping = 2;
            PatternState._map[3] = "PostStop";
            PatternState.PostStop = 3;
            PatternState._map[4] = "Stopped";
            PatternState.Stopped = 4
        }(Klang.Model.PatternState || (Klang.Model.PatternState = {})));
        var PatternState = Klang.Model.PatternState;

        function getPatternStateString(state) {
            switch (state) {
                case PatternState.PrePlaying:
                    return "PrePlaying";
                case PatternState.Playing:
                    return "Playing";
                case PatternState.PreStopping:
                    return "PreStopping";
                case PatternState.PostStop:
                    return "PostStop";
                case PatternState.Stopped:
                    return "Stopped"
            }
        }
        Klang.Model.getPatternStateString = getPatternStateString;
        var Pattern = function(_super) {
            Klang.Util.__extends(Pattern, _super);

            function Pattern(data, name) {
                _super.call(this, data, name);
                this._startStep = 0;
                this._totalStep = 0;
                this._currentStep = 0;
                this._syncStep = 0;
                this._stepCount = 0;
                this._fadeTime = 0;
                this._length = 2;
                this._loop = true;
                this._tail = false;
                this._forceFade = false;
                this._activeUpbeat = -1;
                this._startOffset = 0;
                this._state = PatternState.Stopped;
                this._beatSubscription = data.beat_subscription || 0.25;
                this._length = data.length || 0;
                this._startStep = data.start_step || 0;
                this._loop = data.loop !== undefined ? data.loop : true;
                this._tail = data.tail !== undefined ? data.tail : false;
                this._clips = [];
                this._upbeats = [];
                this._sequencerName = data.sequencer;
                this._initData = {
                    dummyClips: data.content,
                    dummyUpbeats: data.upbeats
                };
                Klang.core.Core.instance.pushToPreLoadInitStack(this)
            }
            Pattern.prototype.init = function() {
                if (this._initData.dummyClips) {
                    for (var ix = 0, len = this._initData.dummyClips.length; ix < len; ix++) {
                        var dummy = this._initData.dummyClips[ix];
                        if (dummy.audio) {
                            this._clips.push({
                                audio: Klang.core.Core.instance.findInstance(dummy.audio),
                                process: null,
                                args: null,
                                step: dummy.step
                            });
                            this._clips[this._clips.length - 1].audio._parentType = this._type
                        } else {
                            this._clips.push({
                                audio: null,
                                process: Klang.core.Core.instance.findInstance(dummy.process),
                                args: dummy.args,
                                step: dummy.step
                            })
                        }
                    }
                }
                if (this._initData.dummyUpbeats) {
                    for (var ix = 0, ilen = this._initData.dummyUpbeats.length; ix < ilen; ix++) {
                        var dummyUpbeat = this._initData.dummyUpbeats[ix];
                        var upbeatClips = [];
                        for (var jx = 0, jlen = dummyUpbeat.content.length; jx < jlen; jx++) {
                            var dummyClip = dummyUpbeat.content[jx];
                            if (dummyClip.audio) {
                                upbeatClips.push({
                                    audio: Klang.core.Core.instance.findInstance(dummyClip.audio),
                                    process: null,
                                    args: null,
                                    step: dummyClip.step
                                });
                                this._clips[this._clips.length - 1].audio._parentType = this._type
                            } else {
                                upbeatClips.push({
                                    audio: null,
                                    process: Klang.core.Core.instance.findInstance(dummyClip.process),
                                    args: dummyClip.args,
                                    step: dummyClip.step
                                })
                            }
                        }
                        dummyUpbeat.clips = upbeatClips;
                        this._upbeats.push({
                            length: dummyUpbeat.length,
                            clips: upbeatClips
                        })
                    }
                    this._upbeats.sort(function(a, b) {
                        return b.length - a.length
                    })
                }
                this._sequencer = Klang.core.Core.instance.findInstance(this._sequencerName);
                this._sequencer.registerPattern(this);
                this._initData = null
            };
            Pattern.prototype.connect = function(destination) {
                for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                    var a = this._clips[ix].audio;
                    if (a && (!a.destinationName || Klang.core.Core.instance.findInstance(a.destinationName).destinationName == "$OUT")) {
                        a.disconnect();
                        a.connect(this._output)
                    }
                }
                this._output.connect(destination);
                return this
            };
            Pattern.prototype.disconnect = function() {
                this._output.disconnect();
                return this
            };
            Pattern.prototype.changeState = function(state) {
                if (state == this._state) {
                    return
                }
                if (Klang.core.Core.callbacks && Klang.core.Core.callbacks.changePatternState) {
                    Klang.core.Core.callbacks.changePatternState({
                        pattern: this,
                        lastState: this._state,
                        newState: state,
                        step: this._sequencer.currentStep
                    })
                }
                this._state = state
            };
            Pattern.prototype.prePlaySchedule = function(steps, syncStep, restart, fadeIn, duration, offset) {
                restart = restart || false;
                var t = Klang.context.currentTime;
                if (this._state == PatternState.PreStopping || this._state == PatternState.PostStop) {
                    this._output.gain.cancelScheduledValues(t);
                    this._output.gain.setValueAtTime(this._output.gain.value, t);
                    this._output.gain.linearRampToValueAtTime(this._volume, t + 0.5);
                    this.changeState(PatternState.Playing);
                    clearTimeout(this._stoppingId);
                    return this
                } else {
                    if (this._output.gain.value != this._volume || PatternState.Stopped) {
                        var v;
                        if (this._state === PatternState.Stopped && fadeIn) {
                            v = 0
                        } else {
                            v = this._output.gain.value
                        }
                        this._output.gain.cancelScheduledValues(t);
                        this._output.gain.setValueAtTime(v, t);
                        this._output.gain.linearRampToValueAtTime(this._volume, t + duration)
                    } else {
                        if (fadeIn) {
                            var playTime = this._sequencer.getBeatTime(steps);
                            this._output.gain.cancelScheduledValues(playTime);
                            this._output.gain.setValueAtTime(0, playTime);
                            this._output.gain.linearRampToValueAtTime(this._volume, playTime + duration)
                        }
                    }
                }
                if (this._state == PatternState.Playing || this._state == PatternState.PrePlaying) {
                    if (restart) {
                        this._syncStep = syncStep;
                        this.stop(steps, true, 0)
                    } else {
                        return this
                    }
                }
                if (offset !== undefined) {
                    this._startOffset = offset
                }
                this._syncStep = syncStep % this._length + this._startStep;
                if (steps > 0 || restart) {
                    this._stepCount = steps;
                    this._currentStep = this._startStep;
                    this._totalStep = 0;
                    this._activeUpbeat = -1;
                    for (var ix = 0, len = this._upbeats.length; ix < len; ix++) {
                        var upbeat = this._upbeats[ix];
                        if (upbeat.length <= steps) {
                            if (this._activeUpbeat == -1 || this._upbeats[this._activeUpbeat].length < upbeat.length) {
                                this._activeUpbeat = ix
                            }
                        }
                    }
                    this.changeState(PatternState.PrePlaying)
                } else {
                    this.changeState(PatternState.Playing)
                }
                return this
            };
            Pattern.prototype.play = function(when) {
                if (this._state == PatternState.Playing || this._state == PatternState.PrePlaying) {
                    return this
                } else {
                    if (this._state == PatternState.PreStopping || this._state == PatternState.PostStop) {
                        clearTimeout(this._stoppingId)
                    }
                }
                this._currentStep = this._sequencer.currentStep % this._length + this._startStep;
                this.changeState(PatternState.Playing);
                if (!this._sequencer.started) {
                    this._sequencer.start()
                }
                return this
            };
            Pattern.prototype.stop = function(when, beat, fadeTime, wait) {
                if (this._state == PatternState.Stopped) {
                    return this
                } else {
                    if (this._state === PatternState.PrePlaying) {
                        this.changeState(PatternState.Stopped);
                        return
                    }
                }
                if (when === undefined) {
                    this.changeState(PatternState.Stopped);
                    this._currentStep = 0;
                    return this
                }
                if (beat === undefined) {
                    beat = true
                }
                if (beat) {
                    this._stepCount = this._sequencer.getStepsToNext(this._sequencer.beatLength * when) || 0;
                    this._fadeTime = fadeTime;
                    this.changeState(PatternState.PreStopping);
                    if (wait > 0) {
                        this._stepCount += wait
                    }
                } else {
                    if (fadeTime) {
                        var fadeBeats = fadeTime / this._sequencer.getNoteTime(1);
                        this._stepCount = Math.ceil(fadeBeats);
                        this.changeState(PatternState.Stopped);
                        var t = Klang.context.currentTime;
                        for (var i = 0; i < this._clips.length; i++) {
                            if (this._clips[i].audio) {
                                this._clips[i].audio.fadeOutAndStop(fadeTime, when)
                            }
                        }
                    } else {
                        this.changeState(PatternState.Stopped);
                        this._currentStep = 0;
                        for (var i = 0; i < this._clips.length; i++) {
                            if (this._clips[i].audio) {
                                this._clips[i].audio.stop(when + this._sequencer.getNoteTime(this._sequencer.resolution))
                            }
                        }
                    }
                }
                return this
            };
            Pattern.prototype.pause = function() {
                for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                    if (this._clips[ix].audio) {
                        this._clips[ix].audio.pause()
                    }
                }
                return this
            };
            Pattern.prototype.unpause = function() {
                for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                    if (this._clips[ix].audio) {
                        this._clips[ix].audio.unpause()
                    }
                }
                return this
            };
            Pattern.prototype.playStep = function(currentStep, scheduleTime) {
                if (this._currentStep >= this._length + this._startStep) {
                    if (this._loop) {
                        this._currentStep = this._startStep
                    } else {
                        if (!this._loop) {
                            this.changeState(PatternState.Stopped)
                        }
                    }
                }
                for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                    if (this._clips[ix].step == this._currentStep) {
                        var clip = this._clips[ix];
                        if (clip.audio) {
                            clip.audio.play(scheduleTime, this._startOffset)
                        } else {
                            clip.process.start(clip.args)
                        }
                    }
                }
                this._totalStep += this._beatSubscription;
                this._currentStep += this._beatSubscription
            };
            Pattern.prototype.update = function(currentStep, scheduleTime) {
                if (this._state != PatternState.Stopped && currentStep % this._beatSubscription == 0) {
                    switch (this._state) {
                        case PatternState.PrePlaying:
                            if (this._activeUpbeat != -1) {
                                var upbeat = this._upbeats[this._activeUpbeat];
                                for (var ix = 0, len = upbeat.clips.length; ix < len; ix++) {
                                    var clip = upbeat.clips[ix];
                                    if (clip.step == upbeat.length - this._stepCount) {
                                        if (clip.audio) {
                                            clip.audio.play(scheduleTime)
                                        } else {
                                            clip.process.start(clip.args)
                                        }
                                    }
                                }
                            }
                            this._stepCount -= this._beatSubscription;
                            if (this._stepCount <= 0) {
                                this._currentStep = this._startStep + this._syncStep % this._length;
                                this._syncStep = 0;
                                this.changeState(PatternState.Playing)
                            }
                            break;
                        case PatternState.Playing:
                            this.playStep(currentStep, scheduleTime);
                            break;
                        case PatternState.PreStopping:
                            this._stepCount -= this._beatSubscription;
                            if (this._stepCount <= 0) {
                                if (!this._tail || this._forceFade) {
                                    this.stop(scheduleTime, false, this._fadeTime)
                                } else {
                                    this.changeState(PatternState.Stopped);
                                    this._currentStep = 0
                                }
                            } else {
                                this.playStep(currentStep, scheduleTime)
                            }
                            break;
                        case PatternState.PostStop:
                            this.playStep(currentStep, scheduleTime);
                            this._stepCount -= this._beatSubscription;
                            if (this._stepCount <= 0) {
                                this._forceFade = false;
                                this.changeState(PatternState.Stopped);
                                this._currentStep = 0
                            }
                            break
                    }
                }
                return this
            };
            Pattern.prototype.deschedule = function(steps) {
                if (steps === undefined) {
                    steps = this._length
                }
                if (this._state != PatternState.Stopped) {
                    steps = steps % this._length;
                    for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                        var clip = this._clips[ix];
                        if (clip.audio) {
                            clip.audio.deschedule()
                        }
                    }
                    clearTimeout(this._stoppingId);
                    this._output.gain.cancelScheduledValues(Klang.Util.now());
                    this._currentStep = this._currentStep - steps;
                    if (this._currentStep < this._startStep) {
                        var stepDelta = this._startStep - this._currentStep;
                        this._currentStep = this._startStep + this._length - stepDelta
                    }
                }
                return this
            };
            Pattern.prototype.fadeInAndPlay = function(duration, when) {
                return this
            };
            Pattern.prototype.fadeOutAndStop = function(duration, when) {
                when = when || Klang.Util.now();
                this.stop(when, false, duration);
                return this
            };
            Pattern.prototype.curvePlaybackRate = function(value, duration) {
                for (var i = 0, l = this._clips.length; i < l; i++) {
                    this._clips[i].audio.curvePlaybackRate(value, duration)
                }
                return this
            };
            Pattern.prototype.getNextBar = function(x) {
                var nextBar = Math.ceil(this._currentStep / x);
                if (this._currentStep > this._length - x) {
                    nextBar = 0
                }
                return nextBar
            };
            Object.defineProperty(Pattern.prototype, "forceFade", {
                set: function(value) {
                    this._forceFade = value
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "playbackRate", {
                set: function(value) {
                    for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                        this._clips[ix].audio.playbackRate = value
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "length", {
                get: function() {
                    return this._length
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "loop", {
                get: function() {
                    return this._loop
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "state", {
                get: function() {
                    return this._state
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "playing", {
                get: function() {
                    var _playing = false;
                    if (this._state === 1 || this._state === 1) {
                        _playing = true
                    }
                    return _playing
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "duration", {
                get: function() {
                    return this._length * this._sequencer.getNoteTime(1)
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "playbackState", {
                get: function() {
                    return 0
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "currentStep", {
                get: function() {
                    return this._currentStep
                },
                enumerable: true,
                configurable: true
            });
            Pattern.prototype.setData = function(data) {
                _super.prototype.setData.call(this, data);
                var reinit = false;
                this._beatSubscription = data.beat_subscription !== undefined ? data.beat_subscription : 0.25;
                this._length = data.length !== undefined ? data.length : 0;
                this._startStep = data.start_step !== undefined ? data.start_step : 0;
                this._loop = data.loop === undefined ? true : data.loop;
                this._tail = data.tail === undefined ? false : data.tail;
                if (data.sequencer !== undefined && this._sequencerName != data.sequencer) {
                    this._sequencerName = data.sequencer;
                    reinit = true
                }
                this._initData = {
                    dummyClips: null,
                    dummyUpbeats: null
                };
                if (data.content) {
                    this._initData.dummyClips = data.content;
                    this._clips = [];
                    reinit = true
                }
                if (data.upbeats) {
                    this._initData.dummyUpbeats = data.upbeats;
                    this._upbeats = [];
                    reinit = true
                }
                if (reinit) {
                    this._sequencer.unregisterPattern(this);
                    this.init()
                }
            };
            return Pattern
        }(Klang.Model.Audio);
        return Klang.Model.Pattern = Pattern
    });
    Module(function(Klang) {
        var PatternState = Klang.Model.PatternState;
        var audioUtil = Klang.engines.webAudio.Util;
        var MidiPattern = function(_super) {
            Klang.Util.__extends(MidiPattern, _super);

            function MidiPattern(data, name) {
                _super.call(this, data, name);
                this._startStep = 0;
                this._totalStep = 0;
                this._currentStep = 0;
                this._syncStep = 0;
                this._stepCount = 0;
                this._fadeTime = 0;
                this._transpose = 0;
                this._updatedClips = [];
                this._state = PatternState.Stopped;
                this._beatSubscription = data.beat_subscription || 0.25;
                this._midiFileId = data.file_id;
                this._midiTrackIx = data.midi_track || 0;
                this._sequencerName = data.sequencer;
                this._synthName = data.synth;
                this._loop = data.loop !== undefined ? data.loop : true;
                this._length = data.length || 0;
                this._nextClip = 0;
                this._startStep = data.start_step || 0;
                this._root = data.root || 0;
                this._transpose = this._orgTranspose = data.transpose || 0;
                this._scale = this._orgScale = data.scale;
                this._rootNote = data.root_note || 36;
                this._activeUpbeat = -1;
                this._dataClips = data.clips || undefined;
                if (data.upbeats) {
                    this._upbeats = [];
                    this._upbeatLoopOffset = 0;
                    for (var ix = 0, len = data.upbeats.length; ix < len; ix++) {
                        this._upbeats.push({
                            length: data.upbeats[ix].length,
                            step: data.upbeats[ix].step,
                            targetStep: data.upbeats[ix].target_step,
                            playInLoop: data.upbeats[ix].play_in_loop
                        })
                    }
                }
                Klang.core.Core.instance.pushToPostLoadInitStack(this)
            }
            MidiPattern.prototype.init = function() {
                this._sequencer = Klang.core.Core.instance.findInstance(this._sequencerName);
                this._sequencer.registerPattern(this);
                if (this._synthName === "progression") {
                    this._synth = "progression";
                    this._progression = true;
                    this._currentChord = []
                } else {
                    this._synth = Klang.core.Core.instance.findInstance(this._synthName)
                }
                this._midiFile = Klang.core.FileHandler.instance.getFile(this._midiFileId);
                if (this._midiFile) {
                    this.setupFile()
                } else {
                    if (this._dataClips) {
                        this._clips = this._dataClips
                    } else {
                        this._clips = []
                    }
                }
            };
            MidiPattern.prototype.setupFile = function() {
                this._midiTrack = this._midiFile.tracks[this._midiTrackIx];
                if (this._midiTrack === undefined) {
                    Klang.warn("MidiPattern: midi track out of bounds: " + this._midiTrackIx)
                }
                this.recalculateBPM(this._sequencer.bpm);
                var ticksPerBeat = this._midiFile.header.ticksPerBeat;
                var step = 0;
                var ticks = 0;
                this._clips = [];
                for (var ix = 0, len = this._midiTrack.length; ix < len; ix++) {
                    var ev = this._midiTrack[ix];
                    ticks += ev.deltaTime;
                    var of = ticks / ticksPerBeat % this._sequencer.resolution;
                    var st = ticks / ticksPerBeat - of;
                    this._clips.push({
                        event: ev,
                        step: st,
                        offset: ticks % (ticksPerBeat * this._sequencer.resolution)
                    })
                }
                return this
            };
            MidiPattern.prototype.connect = function(destination) {
                this._output.connect(destination);
                return this
            };
            MidiPattern.prototype.disconnect = function() {
                this._output.disconnect();
                return this
            };
            MidiPattern.prototype.changeState = function(state) {
                if (state == this._state) {
                    return
                }
                if (Klang.core.Core.callbacks && Klang.core.Core.callbacks.changePatternState) {
                    Klang.core.Core.callbacks.changePatternState({
                        pattern: this,
                        lastState: this._state,
                        newState: state,
                        step: this._sequencer.currentStep
                    })
                }
                this._state = state
            };
            MidiPattern.prototype.prePlaySchedule = function(steps, syncStep, restart) {
                if (!this._midiFile) {
                    this._midiFile = Klang.core.FileHandler.instance.getFile(this._midiFileId);
                    if (!this._midiFile) {
                        Klang.log("MidiPattern: midifile not found: " + this._name + ". Playing without midifile.")
                    } else {
                        this.setupFile()
                    }
                }
                restart = restart || false;
                if (this._state == PatternState.Playing) {
                    if (restart) {
                        this._syncStep = syncStep;
                        this.stop(steps, true)
                    } else {
                        return this
                    }
                }
                var startTime = this._sequencer._scheduleTime + steps * this._sequencer.getNoteTime(0.25);
                this.trigger("start", startTime);
                this._syncStep = syncStep % this._length;
                this._currentStep = this._startStep;
                this.findNextClip(this._currentStep);
                if (steps > 0) {
                    this._stepCount = steps;
                    this._currentStep += this._syncStep;
                    this._syncStep = 0;
                    this._totalStep = 0;
                    this.changeState(PatternState.PrePlaying);
                    if (this._upbeats) {
                        this._activeUpbeat = -1;
                        for (var ix = 0, len = this._upbeats.length; ix < len; ix++) {
                            var upbeat = this._upbeats[ix];
                            if (upbeat.length <= steps) {
                                if (this._activeUpbeat == -1 || this._upbeats[this._activeUpbeat].length < upbeat.length) {
                                    this._activeUpbeat = ix
                                }
                            }
                        }
                        if (this._activeUpbeat != -1 && this._upbeats[this._activeUpbeat].playInLoop) {
                            this._upbeatLoopOffset = this._upbeats[this._activeUpbeat].length
                        }
                    }
                    this.findNextClip(this._activeUpbeat == -1 ? this._currentStep : this._upbeats[this._activeUpbeat].step)
                } else {
                    this.changeState(PatternState.Playing)
                }
                this._patternStartTime = Klang.Util.now();
                return this
            };
            MidiPattern.prototype.play = function(when) {
                if (!this._midiFile) {
                    this._midiFile = Klang.core.FileHandler.instance.getFile(this._midiFileId);
                    if (!this._midiFile) {
                        Klang.log("MidiPattern: midifile not found: " + this._name + ". Playing without midifile.")
                    } else {
                        this.setupFile()
                    }
                }
                if (this._state == PatternState.Playing) {
                    return this
                }
                if (when && when != 0) {
                    var targetVol = this._output.gain.value;
                    this._output.gain.setValueAtTime(0, 0);
                    this._output.gain.setValueAtTime(targetVol, when)
                }
                this._currentStep = this._sequencer.currentStep % this._length + this._startStep;
                this.changeState(PatternState.Playing);
                this.findNextClip(this._currentStep);
                if (!this._sequencer.started) {
                    this._sequencer.start()
                }
                return this
            };
            MidiPattern.prototype.restart = function() {
                this._currentStep = this._startStep;
                this._nextClip = 0;
                return this
            };
            MidiPattern.prototype.stop = function(when, beat) {
                this.trigger("stop", when);
                if (this._synth.deschedule && this._sequencer._scheduleAheadTime > 0.5) {
                    this._synth.deschedule()
                }
                if (when === undefined || this._state == PatternState.Stopped) {
                    this.changeState(PatternState.Stopped);
                    return this
                }
                if (beat === undefined) {
                    beat = true
                }
                if (beat) {
                    this._stepCount = this._sequencer.getStepsToNext(this._sequencer.beatLength * when);
                    this.changeState(PatternState.PreStopping)
                } else {
                    this.changeState(PatternState.Stopped);
                    if (this._synth !== "progression" && this._synth._loopedSamples) {
                        this._synth.stop(when)
                    }
                }
                return this
            };
            MidiPattern.prototype.pause = function() {
                return this
            };
            MidiPattern.prototype.unpause = function() {
                return this
            };
            MidiPattern.prototype.sendMidiEvents = function(step, scheduleTime, bypassNoteOn) {
                if (!this._clips.length) {
                    return
                }
                var startClip = this._nextClip;
                while (this._clips[this._nextClip].step == step) {
                    var nextClip = this._clips[this._nextClip];
                    if (!this._progression) {
                        var transpose = 0;
                        if (nextClip.event.noteNumber) {
                            if (this._scale) {
                                transpose = audioUtil.getTransposeFromScale(nextClip.event.noteNumber, this._scale, this._root)
                            }
                            if (this._transpose != 0) {
                                transpose += this._transpose
                            }
                        }
                        if (!(bypassNoteOn && nextClip.event.subtype === "noteOn")) {
                            var offset = this._midiFile ? nextClip.offset * this._secPerTick : nextClip.offset;
                            this._synth.handleMidiEvent(nextClip.event, scheduleTime + offset, transpose);
                            if (nextClip.duration != "undefined") {
                                var newEvent = Klang.Util.cloneObject(nextClip.event);
                                newEvent.subtype = "noteOff";
                                var noteOffTime = nextClip.duration * (this._sequencer.getNoteTime(0.25) * 4);
                                this._synth.handleMidiEvent(newEvent, scheduleTime + noteOffTime + offset, transpose)
                            }
                        }
                    } else {
                        if (nextClip.event.subtype === "noteOn") {
                            this._currentChord.push(nextClip.event.noteNumber)
                        } else {
                            if (nextClip.event.subtype === "noteOff") {
                                var id = this._currentChord.indexOf(nextClip.event.noteNumber);
                                if (id > -1) {
                                    this._currentChord.splice(id, 1)
                                }
                            }
                        }
                    }
                    this._nextClip++;
                    if (this._nextClip == this._clips.length) {
                        this._nextClip = 0
                    }
                    if (this._nextClip === startClip) {
                        Klang.log("MidiPattern", this._name, "got stuck, check if you're playing the correct midi track.");
                        break
                    }
                }
                if (this._progression && this._currentChord.length) {
                    this._currentChord.sort(function(a, b) {
                        return a - b
                    });
                    var chordRootMidiNote = this._currentChord[0];
                    var root = chordRootMidiNote % 12;
                    var transpose = 0;
                    if (root != this._root) {
                        transpose = chordRootMidiNote - this._rootNote
                    }
                    var scale = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                    var chordNormalized = [];
                    for (var j = 0; j < this._currentChord.length; j++) {
                        var n = this._currentChord[j] % 12 - root;
                        if (n < 0) {
                            n += 12
                        }
                        chordNormalized.push(n)
                    }
                    chordNormalized.sort(function(a, b) {
                        return a - b
                    });
                    for (var i = 0; i < scale.length; i++) {
                        var closest = this.getClosestValues(chordNormalized, i);
                        if (closest !== undefined) {
                            scale[i] = closest - i
                        }
                    }
                    this._sequencer.customScale = scale;
                    this._sequencer.transpose = transpose;
                    this._rootNote = chordRootMidiNote
                }
            };
            MidiPattern.prototype.getClosestValues = function(a, x) {
                var lo = -1,
                    hi = a.length;
                while (hi - lo > 1) {
                    var mid = Math.round((lo + hi) / 2);
                    if (a[mid] <= x) {
                        lo = mid
                    } else {
                        hi = mid
                    }
                }
                var closest;
                if (a[lo] == x) {
                    closest = hi = lo
                }
                if (Math.abs(x - hi) > Math.abs(x - lo)) {
                    closest = lo
                } else {
                    if (Math.abs(x - hi) < Math.abs(x - lo)) {
                        closest = hi
                    } else {
                        closest = lo
                    }
                }
                return a[closest]
            };
            MidiPattern.prototype.findNextClip = function(step) {
                for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                    if (this._clips[ix].step >= step) {
                        this._nextClip = ix;
                        return ix;
                        break
                    }
                }
            };
            MidiPattern.prototype.playStep = function(currentStep, scheduleTime) {
                var playThisStep = true;
                if (this._currentStep >= this._length + this._startStep) {
                    this.sendMidiEvents(this._length, scheduleTime, true);
                    this._currentStep = this._startStep;
                    this.findNextClip(this._currentStep);
                    if (!this._loop) {
                        this.changeState(PatternState.Stopped);
                        playThisStep = false
                    }
                    if (this._updatedClips.length) {
                        var newArray = this._clips.concat(this._updatedClips);
                        newArray.sort(function(a, b) {
                            return a.step - b.step
                        });
                        this._clips = newArray;
                        this._updatedClips = []
                    }
                }
                if (playThisStep) {
                    this.sendMidiEvents(this._currentStep, scheduleTime, false)
                }
                this._totalStep += this._beatSubscription;
                this._currentStep += this._beatSubscription
            };
            MidiPattern.prototype.update = function(currentStep, scheduleTime) {
                if (this._state != PatternState.Stopped && currentStep % this._beatSubscription == 0) {
                    if (this._upbeats && this._activeUpbeat != -1 && this._upbeats[this._activeUpbeat].playInLoop && this._state == PatternState.Playing) {
                        if (this._currentStep >= this._length + this._startStep - this._upbeatLoopOffset) {
                            if (this._upbeatLoopOffset > 0) {
                                this._stepCount = this._upbeatLoopOffset;
                                this.changeState(PatternState.PrePlaying)
                            }
                            this.sendMidiEvents(this._currentStep, scheduleTime, true);
                            this._currentStep = this._startStep;
                            this.findNextClip(this._upbeats[this._activeUpbeat].step)
                        }
                    }
                    switch (this._state) {
                        case PatternState.PrePlaying:
                            if (this._activeUpbeat != -1) {
                                var upbeat = this._upbeats[this._activeUpbeat];
                                var currentUpbeatStep = upbeat.length - this._stepCount;
                                if (currentUpbeatStep >= 0) {
                                    this.sendMidiEvents(upbeat.step + currentUpbeatStep, scheduleTime, false)
                                }
                            }
                            this._stepCount -= this._beatSubscription;
                            if (this._stepCount <= 0) {
                                if (this._activeUpbeat != -1 && upbeat.targetStep) {
                                    this._currentStep = upbeat.targetStep
                                }
                                this.findNextClip(this._currentStep);
                                this.changeState(PatternState.Playing)
                            }
                            break;
                        case PatternState.Playing:
                            this.playStep(currentStep, scheduleTime);
                            break;
                        case PatternState.PreStopping:
                            this._stepCount -= this._beatSubscription;
                            if (this._stepCount <= 0) {
                                this.stop(scheduleTime, false)
                            } else {
                                this.playStep(currentStep, scheduleTime)
                            }
                            break;
                        case PatternState.PostStop:
                            break
                    }
                }
                return this
            };
            MidiPattern.prototype.recalculateBPM = function(bpm) {
                var ticksPerBeat = this._midiFile.header.ticksPerBeat;
                var microsecPerQuarterNote = 60000000 / bpm;
                var secPerQuarterNote = microsecPerQuarterNote / 1000000;
                this._secPerTick = secPerQuarterNote / ticksPerBeat
            };
            MidiPattern.prototype.getNextBar = function(x) {
                var nextBar = Math.ceil(this._currentStep / x);
                if (this._currentStep > this._length - x) {
                    nextBar = 0
                }
                return nextBar
            };
            MidiPattern.prototype.fadeInAndPlay = function(duration, when) {
                this.play(when);
                this.output.gain.value = 0;
                Klang.Util.curveParamLin(this.output.gain, 1, duration, when);
                return this
            };
            MidiPattern.prototype.fadeOutAndStop = function(duration, when) {
                if (when === undefined) {
                    when = Klang.context.currentTime
                }
                this.output.gain.cancelScheduledValues(when);
                Klang.Util.curveParamLin(this.output.gain, 0, duration, when);
                Klang.Util.setParam(this.output.gain, this._volume, when + duration);
                this.stop(when + duration);
                return this
            };
            MidiPattern.prototype.deschedule = function(steps) {
                if (steps === undefined) {
                    steps = this._length
                }
                if (this._synth.deschedule) {
                    this._synth.deschedule()
                }
                if (this._state != PatternState.Stopped) {
                    steps = steps % this._length;
                    this._currentStep = this._currentStep - steps;
                    if (this._currentStep < this._startStep) {
                        var stepDelta = this._startStep - this._currentStep;
                        this._currentStep = this._startStep + this._length - stepDelta
                    }
                    for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                        if (this._clips[ix].step >= this._currentStep) {
                            this._nextClip = ix;
                            break
                        }
                    }
                }
                return this
            };
            MidiPattern.prototype.resetTranspose = function() {
                this._transpose = this._orgTranspose
            };
            Object.defineProperty(MidiPattern.prototype, "length", {
                get: function() {
                    return this._length
                },
                set: function(length) {
                    this._length = length
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MidiPattern.prototype, "startStep", {
                set: function(step) {
                    this._startStep = step;
                    this._currentStep = this._sequencer.currentStep % this._length + this._startStep;
                    for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                        if (this._clips[ix].step >= this._currentStep) {
                            this._nextClip = ix;
                            break
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MidiPattern.prototype, "scale", {
                set: function(scale) {
                    if (!this._progression) {
                        if (scale === "reset") {
                            this._scale = this._orgScale
                        } else {
                            this._scale = scale
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MidiPattern.prototype, "customScale", {
                set: function(obj) {
                    if (!this._progression) {
                        Klang.audioUtil.scales.custom = obj;
                        this._scale = "custom"
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MidiPattern.prototype, "transpose", {
                get: function() {
                    return this._transpose
                },
                set: function(transpose) {
                    this._transpose = transpose
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MidiPattern.prototype, "loop", {
                get: function() {
                    return this._loop
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MidiPattern.prototype, "state", {
                get: function() {
                    return this._state
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MidiPattern.prototype, "playing", {
                get: function() {
                    var _playing = false;
                    if (this._state === 1 || this._state === 1) {
                        _playing = true
                    }
                    return _playing
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MidiPattern.prototype, "duration", {
                get: function() {
                    return this._length * this._sequencer.getNoteTime(1)
                },
                enumerable: true,
                configurable: true
            });
            MidiPattern.prototype.getNoteInScale = function(midiNumber) {
                return Klang.audioUtil.getNoteInScale(midiNumber, this._scale, this._root)
            };
            MidiPattern.prototype.getPositionInPattern = function() {
                var patternLength = this.length;
                var lengthSeconds = this._sequencer.getNoteTime(patternLength);
                var positionSeconds = (Klang.Util.now() - this._patternStartTime) % lengthSeconds;
                var sixteenNote = this._sequencer.getNoteTime(0.25);
                var positionStepsRaw = positionSeconds / sixteenNote;
                var positionSteps = Math.floor(positionStepsRaw);
                var delta = positionStepsRaw - positionSteps;
                var offset = sixteenNote * delta;
                var step = positionSteps / 4 - 0.25;
                return {
                    step: step,
                    offset: offset
                }
            };
            MidiPattern.prototype.addNote = function(noteNumber, velocity, step, duration, offset) {
                this.addSingleEvent("noteOn", noteNumber, velocity, step, offset);
                var noteOffStep = step + duration;
                if (noteOffStep > this.length) {
                    noteOffStep = noteOffStep - this.length
                }
                this.addSingleEvent("noteOff", noteNumber, velocity, noteOffStep, offset)
            };
            MidiPattern.prototype.addSingleEvent = function(type, noteNumber, velocity, step, offset) {
                this._updatedClips.push({
                    event: {
                        type: "channel",
                        subtype: type,
                        noteNumber: noteNumber,
                        velocity: velocity
                    },
                    step: step,
                    offset: offset || 0
                });
                this._updatedClips.sort(function(a, b) {
                    return a.step - b.step
                })
            };
            MidiPattern.prototype.setData = function(data) {
                _super.prototype.setData.call(this, data);
                var reinit = false;
                this._beatSubscription = data.beat_subscription === undefined ? 0.25 : data.beat_subscription;
                if (this._midiFile != data.file_id) {
                    this._midiFile = data.file_id
                }
                if (this._midiTrackIx != data.midi_track) {
                    this._midiTrackIx = data.midi_track
                }
                if (data.sequener !== undefined && this._sequencerName != data.sequencer) {
                    this._sequencerName = data.sequencer;
                    reinit = true
                }
                if (data.synth !== undefined && this._synthName != data.synth) {
                    this._synthName = data.synth;
                    reinit = true
                }
                if (data.clips) {
                    this._clips = data.clips
                }
                this._loop = data.loop === undefined ? false : data.loop;
                this._length = data.length === undefined ? 0 : data.length;
                this._root = data.root === undefined ? 0 : data.root;
                this._orgTranspose = data.transpose === undefined ? 0 : data.transpose;
                this._transpose = this._orgTranspose;
                this._orgScale = data.scale === undefined ? 0 : data.scale;
                this._scale = this._orgScale;
                this._rootNote = data.root_note === undefined ? 36 : data.root_note;
                this._activeUpbeat = -1;
                if (data.upbeats) {
                    this._upbeats = [];
                    this._upbeatLoopOffset = 0;
                    for (var ix = 0, len = data.upbeats.length; ix < len; ix++) {
                        this._upbeats.push({
                            length: data.upbeats[ix].length,
                            step: data.upbeats[ix].step,
                            targetStep: data.upbeats[ix].target_step,
                            playInLoop: data.upbeats[ix].play_in_loop
                        })
                    }
                    reinit = true
                }
                if (reinit) {
                    this._sequencer.unregisterPattern(this);
                    this.init()
                }
            };
            return MidiPattern
        }(Klang.Model.Audio);
        return Klang.Model.MidiPattern = MidiPattern
    });
    Module(function(Klang) {
        (function(PatternState) {
            PatternState._map = [];
            PatternState._map[0] = "PrePlaying";
            PatternState.PrePlaying = 0;
            PatternState._map[1] = "Playing";
            PatternState.Playing = 1;
            PatternState._map[2] = "PreStopping";
            PatternState.PreStopping = 2;
            PatternState._map[3] = "PostStop";
            PatternState.PostStop = 3;
            PatternState._map[4] = "Stopped";
            PatternState.Stopped = 4
        }(Klang.Model.PatternState || (Klang.Model.PatternState = {})));
        var PatternState = Klang.Model.PatternState;

        function getPatternStateString(state) {
            switch (state) {
                case PatternState.PrePlaying:
                    return "PrePlaying";
                case PatternState.Playing:
                    return "Playing";
                case PatternState.PreStopping:
                    return "PreStopping";
                case PatternState.PostStop:
                    return "PostStop";
                case PatternState.Stopped:
                    return "Stopped"
            }
        }
        Klang.Model.getPatternStateString = getPatternStateString;
        var Pattern = function(_super) {
            Klang.Util.__extends(Pattern, _super);

            function Pattern(data, name) {
                _super.call(this, data, name);
                this._startStep = 0;
                this._totalStep = 0;
                this._currentStep = 0;
                this._syncStep = 0;
                this._stepCount = 0;
                this._fadeTime = 0;
                this._length = 2;
                this._loop = true;
                this._tail = false;
                this._forceFade = false;
                this._activeUpbeat = -1;
                this._startOffset = 0;
                this._state = PatternState.Stopped;
                this._beatSubscription = data.beat_subscription || 0.25;
                this._length = data.length || 0;
                this._startStep = data.start_step || 0;
                this._loop = data.loop !== undefined ? data.loop : true;
                this._tail = data.tail !== undefined ? data.tail : false;
                this._clips = [];
                this._upbeats = [];
                this._sequencerName = data.sequencer;
                this._initData = {
                    dummyClips: data.content,
                    dummyUpbeats: data.upbeats
                };
                Klang.core.Core.instance.pushToPreLoadInitStack(this)
            }
            Pattern.prototype.init = function() {
                if (this._initData.dummyClips) {
                    for (var ix = 0, len = this._initData.dummyClips.length; ix < len; ix++) {
                        var dummy = this._initData.dummyClips[ix];
                        if (dummy.audio) {
                            this._clips.push({
                                audio: Klang.core.Core.instance.findInstance(dummy.audio),
                                process: null,
                                args: null,
                                step: dummy.step
                            });
                            this._clips[this._clips.length - 1].audio._parentType = this._type
                        } else {
                            this._clips.push({
                                audio: null,
                                process: Klang.core.Core.instance.findInstance(dummy.process),
                                args: dummy.args,
                                step: dummy.step
                            })
                        }
                    }
                }
                if (this._initData.dummyUpbeats) {
                    for (var ix = 0, ilen = this._initData.dummyUpbeats.length; ix < ilen; ix++) {
                        var dummyUpbeat = this._initData.dummyUpbeats[ix];
                        var upbeatClips = [];
                        for (var jx = 0, jlen = dummyUpbeat.content.length; jx < jlen; jx++) {
                            var dummyClip = dummyUpbeat.content[jx];
                            if (dummyClip.audio) {
                                upbeatClips.push({
                                    audio: Klang.core.Core.instance.findInstance(dummyClip.audio),
                                    process: null,
                                    args: null,
                                    step: dummyClip.step
                                });
                                this._clips[this._clips.length - 1].audio._parentType = this._type
                            } else {
                                upbeatClips.push({
                                    audio: null,
                                    process: Klang.core.Core.instance.findInstance(dummyClip.process),
                                    args: dummyClip.args,
                                    step: dummyClip.step
                                })
                            }
                        }
                        dummyUpbeat.clips = upbeatClips;
                        this._upbeats.push({
                            length: dummyUpbeat.length,
                            clips: upbeatClips
                        })
                    }
                    this._upbeats.sort(function(a, b) {
                        return b.length - a.length
                    })
                }
                this._sequencer = Klang.core.Core.instance.findInstance(this._sequencerName);
                this._sequencer.registerPattern(this);
                this._initData = null
            };
            Pattern.prototype.connect = function(destination) {
                for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                    var a = this._clips[ix].audio;
                    if (a && (!a.destinationName || Klang.core.Core.instance.findInstance(a.destinationName).destinationName == "$OUT")) {
                        a.disconnect();
                        a.connect(this._output)
                    }
                }
                this._output.connect(destination);
                return this
            };
            Pattern.prototype.disconnect = function() {
                this._output.disconnect();
                return this
            };
            Pattern.prototype.changeState = function(state) {
                if (state == this._state) {
                    return
                }
                if (Klang.core.Core.callbacks && Klang.core.Core.callbacks.changePatternState) {
                    Klang.core.Core.callbacks.changePatternState({
                        pattern: this,
                        lastState: this._state,
                        newState: state,
                        step: this._sequencer.currentStep
                    })
                }
                this._state = state
            };
            Pattern.prototype.prePlaySchedule = function(steps, syncStep, restart, fadeIn, duration, offset) {
                restart = restart || false;
                var t = Klang.context.currentTime;
                if (this._state == PatternState.PreStopping || this._state == PatternState.PostStop) {
                    this._output.gain.cancelScheduledValues(t);
                    this._output.gain.setValueAtTime(this._output.gain.value, t);
                    this._output.gain.linearRampToValueAtTime(this._volume, t + 0.5);
                    this.changeState(PatternState.Playing);
                    clearTimeout(this._stoppingId);
                    return this
                } else {
                    if (this._output.gain.value != this._volume || PatternState.Stopped) {
                        var v;
                        if (this._state === PatternState.Stopped && fadeIn) {
                            v = 0
                        } else {
                            v = this._output.gain.value
                        }
                        this._output.gain.cancelScheduledValues(t);
                        this._output.gain.setValueAtTime(v, t);
                        this._output.gain.linearRampToValueAtTime(this._volume, t + duration)
                    } else {
                        if (fadeIn) {
                            var playTime = this._sequencer.getBeatTime(steps);
                            this._output.gain.cancelScheduledValues(playTime);
                            this._output.gain.setValueAtTime(0, playTime);
                            this._output.gain.linearRampToValueAtTime(this._volume, playTime + duration)
                        }
                    }
                }
                if (this._state == PatternState.Playing || this._state == PatternState.PrePlaying) {
                    if (restart) {
                        this._syncStep = syncStep;
                        this.stop(steps, true, 0)
                    } else {
                        return this
                    }
                }
                if (offset !== undefined) {
                    this._startOffset = offset
                }
                this._syncStep = syncStep % this._length + this._startStep;
                if (steps > 0 || restart) {
                    this._stepCount = steps;
                    this._currentStep = this._startStep;
                    this._totalStep = 0;
                    this._activeUpbeat = -1;
                    for (var ix = 0, len = this._upbeats.length; ix < len; ix++) {
                        var upbeat = this._upbeats[ix];
                        if (upbeat.length <= steps) {
                            if (this._activeUpbeat == -1 || this._upbeats[this._activeUpbeat].length < upbeat.length) {
                                this._activeUpbeat = ix
                            }
                        }
                    }
                    this.changeState(PatternState.PrePlaying)
                } else {
                    this.changeState(PatternState.Playing)
                }
                return this
            };
            Pattern.prototype.play = function(when) {
                if (this._state == PatternState.Playing || this._state == PatternState.PrePlaying) {
                    return this
                } else {
                    if (this._state == PatternState.PreStopping || this._state == PatternState.PostStop) {
                        clearTimeout(this._stoppingId)
                    }
                }
                this._currentStep = this._sequencer.currentStep % this._length + this._startStep;
                this.changeState(PatternState.Playing);
                if (!this._sequencer.started) {
                    this._sequencer.start()
                }
                return this
            };
            Pattern.prototype.stop = function(when, beat, fadeTime, wait) {
                if (this._state == PatternState.Stopped) {
                    return this
                } else {
                    if (this._state === PatternState.PrePlaying) {
                        this.changeState(PatternState.Stopped);
                        return
                    }
                }
                if (when === undefined) {
                    this.changeState(PatternState.Stopped);
                    this._currentStep = 0;
                    return this
                }
                if (beat === undefined) {
                    beat = true
                }
                if (beat) {
                    this._stepCount = this._sequencer.getStepsToNext(this._sequencer.beatLength * when) || 0;
                    this._fadeTime = fadeTime;
                    this.changeState(PatternState.PreStopping);
                    if (wait > 0) {
                        this._stepCount += wait
                    }
                } else {
                    if (fadeTime) {
                        var fadeBeats = fadeTime / this._sequencer.getNoteTime(1);
                        this._stepCount = Math.ceil(fadeBeats);
                        this.changeState(PatternState.Stopped);
                        var t = Klang.context.currentTime;
                        for (var i = 0; i < this._clips.length; i++) {
                            if (this._clips[i].audio) {
                                this._clips[i].audio.fadeOutAndStop(fadeTime, when)
                            }
                        }
                    } else {
                        this.changeState(PatternState.Stopped);
                        this._currentStep = 0;
                        for (var i = 0; i < this._clips.length; i++) {
                            if (this._clips[i].audio) {
                                this._clips[i].audio.stop(when + this._sequencer.getNoteTime(this._sequencer.resolution))
                            }
                        }
                    }
                }
                return this
            };
            Pattern.prototype.pause = function() {
                for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                    if (this._clips[ix].audio) {
                        this._clips[ix].audio.pause()
                    }
                }
                return this
            };
            Pattern.prototype.unpause = function() {
                for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                    if (this._clips[ix].audio) {
                        this._clips[ix].audio.unpause()
                    }
                }
                return this
            };
            Pattern.prototype.playStep = function(currentStep, scheduleTime) {
                if (this._currentStep >= this._length + this._startStep) {
                    if (this._loop) {
                        this._currentStep = this._startStep
                    } else {
                        if (!this._loop) {
                            this.changeState(PatternState.Stopped)
                        }
                    }
                }
                for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                    if (this._clips[ix].step == this._currentStep) {
                        var clip = this._clips[ix];
                        if (clip.audio) {
                            clip.audio.play(scheduleTime, this._startOffset)
                        } else {
                            clip.process.start(clip.args)
                        }
                    }
                }
                this._totalStep += this._beatSubscription;
                this._currentStep += this._beatSubscription
            };
            Pattern.prototype.update = function(currentStep, scheduleTime) {
                if (this._state != PatternState.Stopped && currentStep % this._beatSubscription == 0) {
                    switch (this._state) {
                        case PatternState.PrePlaying:
                            if (this._activeUpbeat != -1) {
                                var upbeat = this._upbeats[this._activeUpbeat];
                                for (var ix = 0, len = upbeat.clips.length; ix < len; ix++) {
                                    var clip = upbeat.clips[ix];
                                    if (clip.step == upbeat.length - this._stepCount) {
                                        if (clip.audio) {
                                            clip.audio.play(scheduleTime)
                                        } else {
                                            clip.process.start(clip.args)
                                        }
                                    }
                                }
                            }
                            this._stepCount -= this._beatSubscription;
                            if (this._stepCount <= 0) {
                                this._currentStep = this._startStep + this._syncStep % this._length;
                                this._syncStep = 0;
                                this.changeState(PatternState.Playing)
                            }
                            break;
                        case PatternState.Playing:
                            this.playStep(currentStep, scheduleTime);
                            break;
                        case PatternState.PreStopping:
                            this._stepCount -= this._beatSubscription;
                            if (this._stepCount <= 0) {
                                if (!this._tail || this._forceFade) {
                                    this.stop(scheduleTime, false, this._fadeTime)
                                } else {
                                    this.changeState(PatternState.Stopped);
                                    this._currentStep = 0
                                }
                            } else {
                                this.playStep(currentStep, scheduleTime)
                            }
                            break;
                        case PatternState.PostStop:
                            this.playStep(currentStep, scheduleTime);
                            this._stepCount -= this._beatSubscription;
                            if (this._stepCount <= 0) {
                                this._forceFade = false;
                                this.changeState(PatternState.Stopped);
                                this._currentStep = 0
                            }
                            break
                    }
                }
                return this
            };
            Pattern.prototype.deschedule = function(steps) {
                if (steps === undefined) {
                    steps = this._length
                }
                if (this._state != PatternState.Stopped) {
                    steps = steps % this._length;
                    for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                        var clip = this._clips[ix];
                        if (clip.audio) {
                            clip.audio.deschedule()
                        }
                    }
                    clearTimeout(this._stoppingId);
                    this._output.gain.cancelScheduledValues(Klang.Util.now());
                    this._currentStep = this._currentStep - steps;
                    if (this._currentStep < this._startStep) {
                        var stepDelta = this._startStep - this._currentStep;
                        this._currentStep = this._startStep + this._length - stepDelta
                    }
                }
                return this
            };
            Pattern.prototype.fadeInAndPlay = function(duration, when) {
                return this
            };
            Pattern.prototype.fadeOutAndStop = function(duration, when) {
                when = when || Klang.Util.now();
                this.stop(when, false, duration);
                return this
            };
            Pattern.prototype.curvePlaybackRate = function(value, duration) {
                for (var i = 0, l = this._clips.length; i < l; i++) {
                    this._clips[i].audio.curvePlaybackRate(value, duration)
                }
                return this
            };
            Pattern.prototype.getNextBar = function(x) {
                var nextBar = Math.ceil(this._currentStep / x);
                if (this._currentStep > this._length - x) {
                    nextBar = 0
                }
                return nextBar
            };
            Object.defineProperty(Pattern.prototype, "forceFade", {
                set: function(value) {
                    this._forceFade = value
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "playbackRate", {
                set: function(value) {
                    for (var ix = 0, len = this._clips.length; ix < len; ix++) {
                        this._clips[ix].audio.playbackRate = value
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "length", {
                get: function() {
                    return this._length
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "loop", {
                get: function() {
                    return this._loop
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "state", {
                get: function() {
                    return this._state
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "playing", {
                get: function() {
                    var _playing = false;
                    if (this._state === 1 || this._state === 1) {
                        _playing = true
                    }
                    return _playing
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "duration", {
                get: function() {
                    return this._length * this._sequencer.getNoteTime(1)
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "playbackState", {
                get: function() {
                    return 0
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Pattern.prototype, "currentStep", {
                get: function() {
                    return this._currentStep
                },
                enumerable: true,
                configurable: true
            });
            Pattern.prototype.setData = function(data) {
                _super.prototype.setData.call(this, data);
                var reinit = false;
                this._beatSubscription = data.beat_subscription !== undefined ? data.beat_subscription : 0.25;
                this._length = data.length !== undefined ? data.length : 0;
                this._startStep = data.start_step !== undefined ? data.start_step : 0;
                this._loop = data.loop === undefined ? true : data.loop;
                this._tail = data.tail === undefined ? false : data.tail;
                if (data.sequencer !== undefined && this._sequencerName != data.sequencer) {
                    this._sequencerName = data.sequencer;
                    reinit = true
                }
                this._initData = {
                    dummyClips: null,
                    dummyUpbeats: null
                };
                if (data.content) {
                    this._initData.dummyClips = data.content;
                    this._clips = [];
                    reinit = true
                }
                if (data.upbeats) {
                    this._initData.dummyUpbeats = data.upbeats;
                    this._upbeats = [];
                    reinit = true
                }
                if (reinit) {
                    this._sequencer.unregisterPattern(this);
                    this.init()
                }
            };
            return Pattern
        }(Klang.Model.Audio);
        return Klang.Model.Pattern = Pattern
    });
    Module(function(Klang) {
        function Effect(data) {
            this.active = true;
            this._type = data.type;
            this._input = Klang.context.createGain !== undefined ? Klang.context.createGain() : Klang.context.createGainNode();
            this._output = Klang.context.createGain !== undefined ? Klang.context.createGain() : Klang.context.createGainNode();
            if (data.active === false) {
                this.active = false
            }
        }
        Effect.prototype.connect = function(destination) {
            this._output.connect(destination);
            return this
        };
        Effect.prototype.disconnect = function() {
            this._output.disconnect();
            return this
        };
        Effect.prototype.setActive = function(state) {
            Klang.warn("Effect: Invocation of abstract method: Effect.setActive in", this);
            return this
        };
        Object.defineProperty(Effect.prototype, "input", {
            get: function() {
                return this._input
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Effect.prototype, "output", {
            get: function() {
                return this._output
            },
            enumerable: true,
            configurable: true
        });
        return Klang.Model.Effect = Effect
    });
    Module(function(Klang) {
        var EffectSend = function(_super) {
            Klang.Util.__extends(EffectSend, _super);

            function EffectSend(data) {
                _super.call(this, data);
                this._wet = Klang.context.createGain();
                this._wet.gain.value = data.wet;
                this._input.connect(this._wet);
                this._input.connect(this._output);
                this.destinationName = data.destination_name;
                Klang.core.Core.instance.pushToPreLoadInitStack(this)
            }
            EffectSend.prototype.init = function() {
                var destination = Klang.core.Core.instance.findInstance(this.destinationName);
                if (destination) {
                    this._wet.connect(destination.input)
                }
            };
            EffectSend.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._wet);
                    this._input.connect(this._output)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            Object.defineProperty(EffectSend.prototype, "wet", {
                get: function() {
                    return this._wet.gain
                },
                enumerable: true,
                configurable: true
            });
            EffectSend.prototype.setData = function(data) {
                if (data.wet !== undefined) {
                    this.wet.value = data.wet
                }
                if (data.destination_name != this.destinationName) {
                    this.destinationName = data.destination_name;
                    this._wet.disconnect();
                    this.init()
                }
            };
            return EffectSend
        }(Klang.Model.Effect);
        return Klang.Model.EffectSend = EffectSend
    });
    Module(function(Klang) {
        var Equalizer = function(_super) {
            Klang.Util.__extends(Equalizer, _super);

            function Equalizer(data) {
                _super.call(this, data);
                this._filters = [];
                if (Klang.detector.browser.name == "Firefox") {
                    this._input.connect(this._output);
                    return
                }
                if (data.bands.length == 0) {
                    Klang.warn("Equalizer: No bands specified");
                    this._input.connect(this.output)
                } else {
                    for (var ix = 0, len = data.bands.length; ix < len; ix++) {
                        var band = data.bands[ix];
                        var filter = Klang.context.createBiquadFilter();
                        if (band.filter_type) {
                            filter.type = Klang.Util.safeFilterType(band.filter_type)
                        }
                        if (band.frequency) {
                            filter.frequency.value = band.frequency
                        }
                        if (band.gain) {
                            filter.gain.value = band.gain
                        }
                        if (band.Q) {
                            filter.Q.value = band.Q
                        }
                        if (ix == 0) {
                            this._input.connect(filter)
                        } else {
                            this._filters[ix - 1].connect(filter)
                        }
                        this._filters.push(filter)
                    }
                    this._filters[this._filters.length - 1].connect(this._output)
                }
            }
            Equalizer.prototype.addFilter = function(type, frequency, q, gain) {
                var filter = Klang.context.createBiquadFilter();
                filter.type = type;
                filter.frequency.value = frequency;
                filter.gain.value = gain;
                filter.Q.value = q;
                if (this._filters.length == 0) {
                    this._input.disconnect();
                    this._input.connect(filter)
                } else {
                    this._filters[this._filters.length - 1].disconnect();
                    this._filters[this._filters.length - 1].connect(filter)
                }
                filter.connect(this.output);
                this._filters.push(filter)
            };
            Equalizer.prototype.removeFilter = function(index) {
                this._filters[index].disconnect();
                if (index == 0 && this._filters.length > 1) {
                    this._input.disconnect();
                    this._input.connect(this._filters[1])
                } else {
                    if (index == 0) {
                        this._input.disconnect();
                        this._input.connect(this._output)
                    } else {
                        if (index == this._filters.length - 1) {
                            this._filters[index - 1].disconnect();
                            this._filters[index - 1].connect(this._output)
                        } else {
                            this._filters[index - 1].disconnect();
                            this._filters[index - 1].connect(this._filters[index + 1])
                        }
                    }
                }
                this._filters.splice(index, 1)
            };
            Equalizer.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    if (this._filters.length == 0) {
                        this._input.connect(this._output)
                    } else {
                        this._input.connect(this._filters[0])
                    }
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            Object.defineProperty(Equalizer.prototype, "filters", {
                get: function() {
                    return this._filters
                },
                enumerable: true,
                configurable: true
            });
            Equalizer.prototype.setData = function(data) {
                for (var ix = 0, len = this._filters.length; ix < len; ix++) {
                    var filterData = data.bands[ix];
                    var filter = this._filters[ix];
                    if (filter && filterData) {
                        filter.frequency.value = filterData.frequency;
                        filter.Q.value = filterData.Q;
                        filter.gain.value = filterData.gain;
                        var newType = Klang.Util.safeFilterType(filterData.filter_type);
                        if (filter.type != newType) {
                            filter.type = newType
                        }
                    }
                }
            };
            return Equalizer
        }(Klang.Model.Effect);
        return Klang.Model.Equalizer = Equalizer
    });
    Module(function(Klang) {
        var BiquadFilter = function(_super) {
            Klang.Util.__extends(BiquadFilter, _super);

            function BiquadFilter(data) {
                _super.call(this, data);
                this.init(data)
            }
            BiquadFilter.prototype.init = function(data) {
                this._data = data;
                this._filter = Klang.context.createBiquadFilter();
                this._filter.type = Klang.Util.safeFilterType(data.filter_type);
                this._input.connect(this._filter);
                this._filter.connect(this._output);
                this._filter.frequency.value = data.frequency !== undefined ? data.frequency : 1000;
                this._filter.Q.value = data.Q !== undefined ? data.Q : 1;
                this._filter.gain.value = data.gain !== undefined ? data.gain : 0
            };
            BiquadFilter.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._filter)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            Object.defineProperty(BiquadFilter.prototype, "frequency", {
                get: function() {
                    return this._filter.frequency
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BiquadFilter.prototype, "Q", {
                get: function() {
                    return this._filter.Q
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BiquadFilter.prototype, "gain", {
                get: function() {
                    return this._filter.gain
                },
                enumerable: true,
                configurable: true
            });
            BiquadFilter.prototype.refreshAudioNodes = function() {
                var fValue = this._filter.frequency.value;
                var qValue = this._filter.Q.value;
                var gValue = this._filter.gain.value;
                this._filter.frequency.cancelScheduledValues(Klang.context.currentTime);
                this._filter.Q.cancelScheduledValues(Klang.context.currentTime);
                this._filter.gain.cancelScheduledValues(Klang.context.currentTime);
                this._filter.disconnect();
                this.init(this._data);
                this._filter.frequency.value = fValue;
                this._filter.Q.value = qValue;
                this._filter.gain.value = gValue
            };
            BiquadFilter.prototype.setData = function(data) {
                if (data.filter_type === undefined) {
                    data.filter_type = "lowpass"
                }
                if (this._filter.type != data.filter_type) {
                    this._filter.type = Klang.Util.safeFilterType(data.filter_type)
                }
                this._filter.frequency.value = data.frequency === undefined ? 1000 : data.frequency;
                this._filter.Q.value = data.Q === undefined ? 1 : data.Q;
                this._filter.gain.value = data.gain === undefined ? 0 : data.gain
            };
            return BiquadFilter
        }(Klang.Model.Effect);
        return Klang.Model.BiquadFilter = BiquadFilter
    });
    Module(function(Klang) {
        var Bitcrusher = function(_super) {
            Klang.Util.__extends(Bitcrusher, _super);

            function Bitcrusher(data) {
                _super.call(this, data);
                this._pro = Klang.context.createScriptProcessor(data.buffer_size || 4096, 2, 2);
                var _this = this;
                this._pro.onaudioprocess = function(e) {
                    var inp = e.inputBuffer,
                        out = e.outputBuffer,
                        iL = inp.getChannelData(0),
                        iR = inp.getChannelData(1),
                        oL = out.getChannelData(0),
                        oR = out.getChannelData(1),
                        step = Math.pow(0.5, _this._bits),
                        len = inp.length,
                        sample = 0,
                        lastL = 0,
                        lastR = 0,
                        i = 0;
                    for (; i < len; ++i) {
                        if ((sample += _this._reduction) >= 1) {
                            sample--;
                            lastL = step * Math.floor(iL[i] / step);
                            lastR = step * Math.floor(iR[i] / step)
                        }
                        oL[i] = lastL;
                        oR[i] = lastR
                    }
                };
                this._bits = data.bits || 4;
                this._reduction = data.reduction || 0.2;
                this._input.connect(this._pro);
                this._pro.connect(this._output)
            }
            Bitcrusher.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._pro);
                    this._input.connect(this._output)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            Object.defineProperty(Bitcrusher.prototype, "bits", {
                get: function() {
                    return this._bits
                },
                set: function(value) {
                    this._bits = value
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Bitcrusher.prototype, "reduction", {
                get: function() {
                    return this._reduction
                },
                set: function(value) {
                    this._reduction = value
                },
                enumerable: true,
                configurable: true
            });
            Bitcrusher.prototype.setData = function(data) {
                this._bits = data.bits !== undefined ? data.bits : 4;
                this._reduction = data.reduction !== undefined ? data.reduction : 0.2
            };
            return Bitcrusher
        }(Klang.Model.Effect);
        return Klang.Model.Bitcrusher = Bitcrusher
    });
    Module(function(Klang) {
        var Compressor = function(_super) {
            Klang.Util.__extends(Compressor, _super);

            function Compressor(data) {
                _super.call(this, data);
                this._bypass = data.bypass;
                if (Klang.isMobile) {
                    this._input.connect(this._output);
                    return
                }
                this._dynamicsCompressor = Klang.context.createDynamicsCompressor();
                this._makeUpGain = Klang.context.createGain();
                this._input.connect(this._dynamicsCompressor);
                this._dynamicsCompressor.connect(this._makeUpGain);
                this._makeUpGain.connect(this._output);
                if (this._bypass) {
                    this._input.connect(this._output);
                    this._makeUpGain.gain.value = 0
                }
                this._dynamicsCompressor.threshold.value = data.threshold || this._dynamicsCompressor.threshold.value;
                this._dynamicsCompressor.knee.value = data.knee || this._dynamicsCompressor.knee.value;
                this._dynamicsCompressor.ratio.value = data.ratio || this._dynamicsCompressor.ratio.value;
                this._dynamicsCompressor.attack.value = data.attack || this._dynamicsCompressor.attack.value;
                this._dynamicsCompressor.release.value = data.release || this._dynamicsCompressor.release.value;
                this._makeUpGain.gain.value = data.make_up_gain || this._makeUpGain.gain.value
            }
            Compressor.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._dynamicsCompressor);
                    if (this._bypass) {
                        this._input.connect(this._output)
                    }
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            Object.defineProperty(Compressor.prototype, "threshold", {
                get: function() {
                    return this._dynamicsCompressor.threshold
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Compressor.prototype, "knee", {
                get: function() {
                    return this._dynamicsCompressor.knee
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Compressor.prototype, "ratio", {
                get: function() {
                    return this._dynamicsCompressor.ratio
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Compressor.prototype, "attack", {
                get: function() {
                    return this._dynamicsCompressor.attack
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Compressor.prototype, "release", {
                get: function() {
                    return this._dynamicsCompressor.release
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Compressor.prototype, "reduction", {
                get: function() {
                    return this._dynamicsCompressor.reduction
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Compressor.prototype, "makeUpGain", {
                get: function() {
                    return this._makeUpGain.gain
                },
                enumerable: true,
                configurable: true
            });
            Compressor.prototype.setData = function(data) {
                if (data.threshold !== undefined) {
                    this.threshold.value = data.threshold
                }
                if (data.knee !== undefined) {
                    this.knee.value = data.knee
                }
                if (data.ratio !== undefined) {
                    this.ratio.value = data.ratio
                }
                if (data.attack !== undefined) {
                    this.attack.value = data.attack
                }
                if (data.release !== undefined) {
                    this.release.value = data.release
                }
                if (data.make_up_gain !== undefined) {
                    this.makeUpGain.value = data.make_up_gain
                }
            };
            return Compressor
        }(Klang.Model.Effect);
        return Klang.Model.Compressor = Compressor
    });
    Module(function(Klang) {
        var Convolver = function(_super) {
            Klang.Util.__extends(Convolver, _super);

            function Convolver(data) {
                _super.call(this, data);
                this._soundName = data.sound;
                this._convolver = Klang.context.createConvolver();
                this._wetGain = Klang.context.createGain();
                this._dryGain = Klang.context.createGain();
                this._wetGain.gain.value = 1;
                this._dryGain.gain.value = 0;
                this._wetGain.connect(this._convolver);
                this._dryGain.connect(this._output);
                this._input.connect(this._wetGain);
                this._input.connect(this._dryGain);
                this._convolver.connect(this._output);
                Klang.core.Core.instance.pushToPostLoadInitStack(this)
            }
            Convolver.prototype.dryWet = function(mix) {
                mix = Math.max(0, Math.min(1, mix));
                this._wetGain.gain.value = mix;
                this._dryGain.gain.value = 1 - mix
            };
            Convolver.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._convolver)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            Convolver.prototype.init = function() {
                var soundInstance = Klang.core.Core.instance.findInstance(this._soundName);
                this._convolver.buffer = soundInstance.buffer
            };
            Convolver.prototype.setData = function(data) {
                if (data.sound && data.sound != this._soundName) {
                    this._soundName = data.sound;
                    this.init()
                }
            };
            return Convolver
        }(Klang.Model.Effect);
        return Klang.Model.Convolver = Convolver
    });
    Module(function(Klang) {
        var DelayBase = function(_super) {
            Klang.Util.__extends(DelayBase, _super);

            function DelayBase(data) {
                _super.call(this, data);
                this._sync = data.sync
            }
            DelayBase.prototype.init = function() {
                if (this._sync) {
                    var seq = Klang.core.Core.instance.findInstance(this._sync);
                    this.updateSync(seq.bpm);
                    seq.registerBPMSync(this)
                }
            };
            DelayBase.prototype.setSync = function(sequencer, rate) {
                if (sequencer) {
                    this._sync = sequencer;
                    this._syncResolution = rate || 1;
                    this.init()
                } else {
                    this._sync = null;
                    this._syncResolution = null
                }
                return this
            };
            DelayBase.prototype.setSyncRate = function(rate) {
                if (this._sync) {
                    this._syncResolution = rate;
                    this.updateSync(Klang.core.Core.instance.findInstance(this._sync).bpm)
                }
                return this
            };
            DelayBase.prototype.updateSync = function(bpm) {
                Klang.warn("DelayBase: Invocation of abstract method: DelayBase.updateSync in", this);
                return this
            };
            Object.defineProperty(DelayBase.prototype, "sync", {
                get: function() {
                    return this._sync
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DelayBase.prototype, "syncResolution", {
                get: function() {
                    return this._syncResolution
                },
                set: function(value) {
                    this._syncResolution = value
                },
                enumerable: true,
                configurable: true
            });
            return DelayBase
        }(Klang.Model.Effect);
        return Klang.Model.DelayBase = DelayBase
    });
    Module(function(Klang) {
        var Delay = function(_super) {
            Klang.Util.__extends(Delay, _super);

            function Delay(data) {
                _super.call(this, data);
                this._feedback = Klang.context.createGain();
                this._delay = Klang.context.createDelay();
                if (data.filter) {
                    this._filter = Klang.context.createBiquadFilter();
                    this._input.connect(this._filter);
                    this._filter.connect(this._delay);
                    this._filter.type = Klang.Util.safeFilterType(data.filter.filter_type);
                    this._filter.frequency.value = data.filter.frequency || 1000;
                    this._filter.Q.value = data.filter.Q || 4;
                    this._filter.gain.value = data.filter.gain || 1
                } else {
                    this._input.connect(this._delay)
                }
                this._delay.connect(this._feedback);
                this._delay.connect(this._output);
                this._feedback.connect(this._delay);
                if (this.sync) {
                    Klang.core.Core.instance.pushToPreLoadInitStack(this);
                    this.syncResolution = data.delay_time || 1
                } else {
                    this._delay.delayTime.value = data.delay_time || 0.125
                }
                this._feedback.gain.value = data.feedback || 0.3;
                this._output.gain.value = data.output_vol || data.wet || 1
            }
            Delay.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._delay)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            Delay.prototype.updateSync = function(bpm) {
                this._delay.delayTime.value = 60 / bpm * this.syncResolution;
                return this
            };
            Object.defineProperty(Delay.prototype, "delayTime", {
                get: function() {
                    return this._delay.delayTime
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Delay.prototype, "feedback", {
                get: function() {
                    return this._feedback.gain
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Delay.prototype, "filter", {
                get: function() {
                    return this._filter
                },
                enumerable: true,
                configurable: true
            });
            Delay.prototype.setData = function(data) {
                if (data.feedback) {
                    this._feedback.gain.value = data.feedback
                }
                if (data.sync) {
                    this.setSync(data.sync, data.delay_time)
                } else {
                    if (data.delay_time) {
                        this._delay.delayTime.value = data.delay_time
                    }
                }
                if (data.filter) {
                    if (!this._filter) {
                        this.input.disconnect();
                        this._filter = Klang.context.createBiquadFilter();
                        this.input.connect(this._filter);
                        this._filter.connect(this._delay)
                    }
                    if (data.filter.filter_type !== undefined) {
                        this._filter.type = Klang.Util.safeFilterType(data.filter.filter_type)
                    }
                    if (data.filter.frequency !== undefined) {
                        this._filter.frequency.value = data.filter.frequency
                    }
                    if (data.filter.Q !== undefined) {
                        this._filter.Q.value = data.filter.Q
                    }
                    if (data.filter.gain !== undefined) {
                        this._filter.gain.value = data.filter.gain
                    }
                } else {
                    if (this._filter) {
                        this.input.disconnect();
                        this._filter.disconnect();
                        this.input.connect(this._delay);
                        this._filter = null
                    }
                }
            };
            return Delay
        }(Klang.Model.DelayBase);
        return Klang.Model.Delay = Delay
    });
    Module(function(Klang) {
        var StereoDelay = function(_super) {
            Klang.Util.__extends(StereoDelay, _super);

            function StereoDelay(data) {
                _super.call(this, data);
                if (this.sync) {
                    data.left.sync = this.sync;
                    data.right.sync = this.sync
                }
                this._splitter = Klang.context.createChannelSplitter(2);
                this._merger = Klang.context.createChannelMerger(2);
                this._leftDelay = new Delay(data.left || {});
                this._rightDelay = new Delay(data.right || {});
                this._input.connect(this._splitter);
                this._splitter.connect(this._leftDelay.input, 0, 0);
                this._splitter.connect(this._rightDelay.input, 0, 0);
                this._splitter.connect(this._rightDelay.input, 1, 0);
                this._leftDelay.output.connect(this._merger, 0, 0);
                this._rightDelay.output.connect(this._merger, 0, 1);
                this._merger.connect(this._output)
            }
            StereoDelay.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._splitter)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            StereoDelay.prototype.updateSync = function(bpm) {
                this._leftDelay.updateSync(bpm);
                this._rightDelay.updateSync(bpm);
                return this
            };
            Object.defineProperty(StereoDelay.prototype, "leftDelay", {
                get: function() {
                    return this._leftDelay
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StereoDelay.prototype, "rightDelay", {
                get: function() {
                    return this._rightDelay
                },
                enumerable: true,
                configurable: true
            });
            StereoDelay.prototype.setData = function(data) {
                this._leftDelay.setData(data.left);
                this._rightDelay.setData(data.right)
            };
            return StereoDelay
        }(Klang.Model.DelayBase);
        return Klang.Model.StereoDelay = StereoDelay
    });
    Module(function(Klang) {
        var PingPongDelay = function(_super) {
            Klang.Util.__extends(PingPongDelay, _super);

            function PingPongDelay(data) {
                _super.call(this, data);
                this._splitter = Klang.context.createChannelSplitter(2);
                this._merger = Klang.context.createChannelMerger(2);
                this._mono = Klang.context.createGain();
                this._leftDelay = Klang.context.createDelay();
                this._rightDelay = Klang.context.createDelay();
                this._feedback = Klang.context.createGain();
                if (data.filter) {
                    this._filter = Klang.context.createBiquadFilter();
                    this._mono.connect(this._filter);
                    this._filter.connect(this._leftDelay);
                    this._feedback.connect(this._filter);
                    this._filter.type = Klang.Util.safeFilterType(data.filter.filter_type);
                    this._filter.frequency.value = data.filter.frequency || 1000;
                    this._filter.Q.value = data.filter.Q || 4;
                    this._filter.gain.value = data.filter.gain || 1
                } else {
                    this._mono.connect(this._leftDelay);
                    this._feedback.connect(this._leftDelay)
                }
                this._input.connect(this._splitter);
                this._splitter.connect(this._mono, 0, 0);
                this._splitter.connect(this._mono, 1, 0);
                this._leftDelay.connect(this._rightDelay);
                this._rightDelay.connect(this._feedback);
                this._leftDelay.connect(this._merger, 0, 0);
                this._rightDelay.connect(this._merger, 0, 1);
                this._merger.connect(this._output);
                if (this.sync) {
                    Klang.core.Core.instance.pushToPreLoadInitStack(this);
                    this.syncResolution = data.delay_time || 1
                } else {
                    this._leftDelay.delayTime.value = data.delay_time || 0.125;
                    this._rightDelay.delayTime.value = this._leftDelay.delayTime.value
                }
                this._feedback.gain.value = data.feedback || 0.3;
                this._output.gain.value = data.output_vol || data.wet || 1
            }
            PingPongDelay.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._splitter)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            PingPongDelay.prototype.updateSync = function(bpm) {
                this._leftDelay.delayTime.value = 60 / bpm * this.syncResolution;
                this._rightDelay.delayTime.value = this._leftDelay.delayTime.value;
                return this
            };
            Object.defineProperty(PingPongDelay.prototype, "delay_time", {
                set: function(val) {
                    this._leftDelay.delayTime.value = val;
                    this._rightDelay.delayTime.value = val
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PingPongDelay.prototype, "feedback", {
                get: function() {
                    return this._feedback.gain
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PingPongDelay.prototype, "filter", {
                get: function() {
                    return this._filter
                },
                enumerable: true,
                configurable: true
            });
            PingPongDelay.prototype.setData = function(data) {
                if (data.feedback) {
                    this._feedback.gain.value = data.feedback
                }
                if (data.sync) {
                    this.setSync(data.sync, data.delay_time)
                } else {
                    if (data.delay_time) {
                        this._leftDelay.delayTime.value = data.delay_time;
                        this._rightDelay.delayTime.value = data.delay_time
                    }
                }
                if (data.filter) {
                    if (!this._filter) {
                        this._mono.disconnect();
                        this._feedback.disconnect();
                        this._filter = Klang.context.createBiquadFilter();
                        this._mono.connect(this._filter);
                        this._filter.connect(this._leftDelay);
                        this._feedback.connect(this._filter)
                    }
                    if (data.filter.filter_type !== undefined) {
                        this._filter.type = Klang.Util.safeFilterType(data.filter.filter_type)
                    }
                    if (data.filter.frequency !== undefined) {
                        this._filter.frequency.value = data.filter.frequency
                    }
                    if (data.filter.Q !== undefined) {
                        this._filter.Q.value = data.filter.Q
                    }
                    if (data.filter.gain !== undefined) {
                        this._filter.gain.value = data.filter.gain
                    }
                } else {
                    if (this._filter) {
                        this._mono.disconnect();
                        this._feedback.disconnect();
                        this._filter.disconnect();
                        this._mono.connect(this._leftDelay);
                        this._feedback.connect(this._leftDelay);
                        this._filter = null
                    }
                }
            };
            return PingPongDelay
        }(Klang.Model.DelayBase);
        return Klang.Model.PingPongDelay = PingPongDelay
    });
    Module(function(Klang) {
        var Limiter = function(_super) {
            Klang.Util.__extends(Limiter, _super);

            function Limiter(data) {
                _super.call(this, data);
                this._compressor = Klang.context.createDynamicsCompressor();
                this._preGain = Klang.context.createGain();
                this._postGain = Klang.context.createGain();
                this._input.connect(this._preGain);
                this._preGain.connect(this._compressor);
                this._compressor.connect(this._postGain);
                this._postGain.connect(this._output);
                this._compressor.threshold.value = data.threshold || 0;
                this._compressor.knee.value = 0;
                this._compressor.ratio.value = 100;
                this._compressor.attack.value = 0;
                this._compressor.release.value = 0;
                this._preGain.gain.value = data.pre_gain === undefined ? 1 : data.pre_gain;
                this._postGain.gain.value = data.post_gain === undefined ? 1 : data.post_gain
            }
            Limiter.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._preGain)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            Object.defineProperty(Limiter.prototype, "threshold", {
                get: function() {
                    return this._compressor.threshold
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Limiter.prototype, "preGain", {
                get: function() {
                    return this._preGain.gain
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Limiter.prototype, "postGain", {
                get: function() {
                    return this._postGain.gain
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Limiter.prototype, "reduction", {
                get: function() {
                    return this._compressor.reduction
                },
                enumerable: true,
                configurable: true
            });
            Limiter.prototype.setData = function(data) {
                if (data.threshold !== undefined) {
                    this._compressor.threshold.value = data.threshold
                }
                if (data.pre_gain !== undefined) {
                    this._preGain.gain.value = data.pre_gain
                }
                if (data.post_gain !== undefined) {
                    this._postGain.gain.value = data.post_gain
                }
            };
            return Limiter
        }(Klang.Model.Effect);
        return Klang.Model.Limiter = Limiter
    });
    Module(function(Klang) {
        var Panner = function(_super) {
            Klang.Util.__extends(Panner, _super);

            function Panner(data) {
                _super.call(this, data);
                this._name = data.name;
                this._panner = Klang.context.createPanner();
                this._input.connect(this._panner);
                this._panner.connect(this._output);
                if (data.panning_model !== undefined) {
                    this._panner.panningModel = data.panning_model
                }
                if (data.distance_model !== undefined) {
                    this._panner.distanceModel = data.distance_model
                }
                if (data.ref_distance !== undefined) {
                    this._panner.refDistance = data.ref_distance
                }
                if (data.max_distance !== undefined) {
                    this._panner.maxDistance = data.max_distance
                }
                if (data.rolloff_factor !== undefined) {
                    this._panner.rolloffFactor = data.rolloff_factor
                }
                if (data.cone_inner_angle !== undefined) {
                    this._panner.coneInnerAngle = data.cone_inner_angle
                }
                if (data.cone_outer_angle !== undefined) {
                    this._panner.coneOuterAngle = data.cone_outer_angle
                }
                if (data.cone_outer_gain !== undefined) {
                    this._panner.coneOuterGain = data.cone_outer_gain
                }
                if (data.position !== undefined) {
                    this._panner.setPosition(data.position[0], data.position[1], data.position[2])
                }
                if (data.orientation !== undefined) {
                    this._panner.setOrientation(data.position[0], data.position[1], data.position[2])
                }
                Panner.panners[this._name] = this
            }
            Panner.panners = {};
            Panner._scale = 1;
            Panner.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._panner)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            Panner.prototype.setPosition = function(x, y, z) {
                this._panner.setPosition(x * Panner.scale, y * Panner.scale, z * Panner.scale)
            };
            Panner.prototype.setOrientation = function(x, y, z) {
                this._panner.setOrientation(x, y, z)
            };
            Panner.prototype.setVelocity = function(x, y, z) {
                Klang.warn("setVelocity is removed from Klang and the WebAudio API")
            };
            Panner.prototype.setData = function(data) {
                this._panner.setPosition(data.position[0], data.position[1], data.position[2]);
                this._panner.setOrientation(data.position[0], data.position[1], data.position[2]);
                if (data.panning_model !== undefined) {
                    this._panner.panningModel = data.panning_model
                }
                if (data.distance_model !== undefined) {
                    this._panner.distanceModel = data.distance_model
                }
                if (data.ref_distance !== undefined) {
                    this._panner.refDistance = data.ref_distance
                }
                if (data.max_distance !== undefined) {
                    this._panner.maxDistance = data.max_distance
                }
                if (data.rolloff_factor !== undefined) {
                    this._panner.rolloffFactor = data.rolloff_factor
                }
                if (data.cone_inner_angle !== undefined) {
                    this._panner.coneInnerAngle = data.cone_inner_angle
                }
                if (data.cone_outer_angle !== undefined) {
                    this._panner.coneOuterAngle = data.cone_outer_angle
                }
                if (data.cone_outer_gain !== undefined) {
                    this._panner.coneOuterGain = data.cone_outer_gain
                }
            };
            Object.defineProperty(Panner, "listener", {
                get: function() {
                    return Klang.context.listener
                },
                enumerable: true,
                configurable: true
            });
            Panner.setListenerPosition = function setListenerPosition(x, y, z) {
                Klang.context.listener.setPosition(x * Panner.scale, y * Panner.scale, z * Panner.scale)
            };
            Panner.setListenerOrientation = function setListenerOrientation(x, y, z, xUp, yUp, zUp) {
                Klang.context.listener.setOrientation(x, y, z, xUp, yUp, zUp)
            };
            Panner.setListenerVelocity = function setListenerVelocity(x, y, z) {
                Klang.warn("setListenerVelocity is removed from Klang and the WebAudio API")
            };
            Panner.setDopplerFactor = function setDopplerFactor(factor) {
                Klang.warn("setDopplerFactor is removed from Klang and the WebAudio API")
            };
            Panner.setSpeedOfSound = function setSpeedOfSound(speed) {
                Klang.context.listener.speed = speed
            };
            Panner.setListenerData = function setListenerData(data) {
                if (!data) {
                    return
                }
                Panner.scale = data.scale;
                Panner.setListenerPosition(data.position[0], data.position[1], data.position[2]);
                Panner.setListenerOrientation(data.orientation[0], data.orientation[1], data.orientation[2], data.orientation_up[0], data.orientation_up[1], data.orientation_up[2]);
                Panner.setSpeedOfSound(data.speed_of_sound)
            };
            Panner.get = function get(name) {
                return Panner.panners[name]
            };
            Object.defineProperty(Panner, "scale", {
                get: function() {
                    return Panner._scale
                },
                set: function(scale) {
                    Panner._scale = scale
                },
                enumerable: true,
                configurable: true
            });
            return Panner
        }(Klang.Model.Effect);
        return Klang.Model.Panner = Panner
    });
    Module(function(Klang) {
        var Sidechain = function(_super) {
            Klang.Util.__extends(Sidechain, _super);

            function Sidechain(data) {
                _super.call(this, data);
                this._source = data.source;
                this._gain = Klang.context.createGain();
                this._processor = Klang.context.createScriptProcessor(data.buffer_size || 0);
                var _this = this;
                var reductionIsAudioParameter = typeof this._source.reduction !== "number";
                this._processor.onaudioprocess = function() {
                    var reduction = reductionIsAudioParameter ? _this._source.reduction.value : _this._source.reduction;
                    _this._gain.gain.value = reduction === 0 ? 1 : Math.pow(10, reduction / 20)
                };
                this._input.connect(this._gain);
                this._input.connect(this._processor);
                this._processor.connect(Klang.context.destination);
                this._gain.connect(this._output);
                Klang.core.Core.instance.pushToPreLoadInitStack(this)
            }
            Sidechain.prototype.init = function() {
                if (!this._source || !this._source.bus || this._source.index === undefined) {
                    Klang.warn("Sidechain: No source specified")
                }
                var bus = Klang.core.Core.instance.findInstance(this._source.bus);
                this._source = bus._effects[this._source.index]
            };
            Sidechain.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._gain);
                    this._input.connect(this._processor)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            return Sidechain
        }(Klang.Model.Effect);
        return Klang.Model.Sidechain = Sidechain
    });
    Module(function(Klang) {
        var StereoPannerPolyfill = function(_super) {
            Klang.Util.__extends(StereoPannerPolyfill, _super);

            function StereoPannerPolyfill(data) {
                _super.call(this, data);
                this._splitter = Klang.context.createChannelSplitter(2);
                this._merger = Klang.context.createChannelMerger(2);
                this._left = Klang.context.createGain();
                this._right = Klang.context.createGain();
                this._input.connect(this._splitter);
                this._splitter.connect(this._left, 0, 0);
                this._splitter.connect(this._right, 1, 0);
                this._left.connect(this._merger, 0, 0);
                this._right.connect(this._merger, 0, 1);
                this._merger.connect(this._output);
                this.pan = data.pan
            }
            StereoPannerPolyfill.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._splitter)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            StereoPannerPolyfill.prototype.getGainValue = function(value) {
                return (value + 1) / 2
            };
            StereoPannerPolyfill.prototype.setPanTo = function(value, when) {
                var gainValue = this.getGainValue(value);
                this._left.gain.setValueAtTime(1 - gainValue, when || 0);
                this._right.gain.setValueAtTime(gainValue, when || 0);
                return this
            };
            StereoPannerPolyfill.prototype.linPanTo = function(value, duration, when) {
                when = when || Klang.context.currentTime;
                var gainValue = this.getGainValue(value);
                this._left.gain.setValueAtTime(this._left.gain.value, when);
                this._left.gain.linearRampToValueAtTime(1 - gainValue, when + duration);
                this._right.gain.setValueAtTime(this._right.gain.value, when);
                this._right.gain.linearRampToValueAtTime(gainValue, when + duration);
                return this
            };
            StereoPannerPolyfill.prototype.expPanTo = function(value, duration, when) {
                when = when || Klang.context.currentTime;
                var gainValue = this.getGainValue(value);
                this._left.gain.setValueAtTime(this._left.gain.value == 0 ? Klang.Util.EXP_MIN_VALUE : this._left.gain.value, when);
                this._left.gain.exponentialRampToValueAtTime(1 - gainValue, when + duration);
                this._right.gain.setValueAtTime(this._right.gain.value == 0 ? Klang.Util.EXP_MIN_VALUE : this._right.gain.value, when);
                this._right.gain.exponentialRampToValueAtTime(gainValue, when + duration);
                return this
            };
            Object.defineProperty(StereoPannerPolyfill.prototype, "pan", {
                get: function() {
                    return this._right.gain.value
                },
                set: function(value) {
                    var gainValue = this.getGainValue(value);
                    this._left.gain.value = 1 - gainValue;
                    this._right.gain.value = gainValue
                },
                enumerable: true,
                configurable: true
            });
            StereoPannerPolyfill.prototype.setData = function(data) {
                if (data.pan !== undefined) {
                    this.pan = data.pan
                }
            };
            return StereoPannerPolyfill
        }(Klang.Model.Effect);
        var StereoPanner = function(_super) {
            if (typeof(window.AudioContext || window.webkitAudioContext).prototype.createStereoPanner === "undefined") {
                return StereoPannerPolyfill
            }
            Klang.Util.__extends(StereoPanner, _super);

            function StereoPanner(data) {
                _super.call(this, data);
                this._panner = Klang.context.createStereoPanner();
                this._panner.pan.setValueAtTime(data.pan, Klang.context.currentTime);
                this._input.connect(this._panner);
                this._panner.connect(this._output)
            }
            StereoPanner.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._splitter)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            StereoPanner.prototype.getGainValue = function(value) {
                return value
            };
            StereoPanner.prototype.setPanTo = function(value, when) {
                when = Math.max(when || 0, Klang.context.currentTime);
                this._panner.pan.cancelScheduledValues(when);
                this._panner.pan.setValueAtTime(value, when);
                return this
            };
            StereoPanner.prototype.linPanTo = function(value, duration, when) {
                when = Math.max(when || 0, Klang.context.currentTime);
                this._panner.pan.cancelScheduledValues(when);
                this._panner.pan.setValueAtTime(this._panner.pan.value, when);
                this._panner.pan.linearRampToValueAtTime(value, when + duration);
                return this
            };
            StereoPanner.prototype.expPanTo = function(value, duration, when) {
                when = when || Klang.context.currentTime;
                value = Klang.Util.clamp(value, -0.99, 0.99);
                this._panner.pan.setValueAtTime(this._panner.pan.value == 0 ? Klang.Util.EXP_MIN_VALUE : this._panner.pan.value, when);
                this._panner.pan.exponentialRampToValueAtTime(value, when + duration);
                return this
            };
            StereoPanner.prototype.refreshAudioNodes = function() {
                var panValue = this._panner.pan.value;
                this._panner.pan.cancelScheduledValues(Klang.context.currentTime);
                this._panner.disconnect();
                this._panner = Klang.context.createStereoPanner();
                this._panner.pan.value = panValue;
                this._input.connect(this._panner);
                this._panner.connect(this._output)
            };
            Object.defineProperty(StereoPanner.prototype, "pan", {
                get: function() {
                    return this._panner.pan.value
                },
                set: function(value) {
                    this._panner.pan.value = value
                },
                enumerable: true,
                configurable: true
            });
            StereoPanner.prototype.setData = function(data) {
                if (data.pan !== undefined) {
                    this.pan = data.pan
                }
            };
            return StereoPanner
        }(Klang.Model.Effect);
        return Klang.Model.StereoPanner = StereoPanner
    });
    Module(function(Klang) {
        var Tremolo = function(_super) {
            Klang.Util.__extends(Tremolo, _super);

            function Tremolo(data, startTime) {
                _super.call(this, data);
                if (data.sync) {
                    this._sync = data.sync;
                    this._rate = data.rate || 0.25
                }
                this._oscillator = Klang.context.createOscillator();
                this._amplitude = Klang.context.createGain();
                this._input.connect(this._output);
                this._oscillator.connect(this._amplitude);
                this._amplitude.connect(this._output.gain);
                this._oscillator.frequency.value = data.frequency || 10;
                this._oscillator.type = data.wave || 0;
                this._amplitude.gain.value = data.amplitude || 1;
                this._oscillator.start(startTime);
                Klang.core.Core.instance.pushToPreLoadInitStack(this)
            }
            Tremolo.prototype.init = function() {
                if (this._sync) {
                    var seq = Klang.core.Core.instance.findInstance(this._sync);
                    this.updateSync(seq.bpm);
                    seq.registerBPMSync(this)
                }
            };
            Tremolo.prototype.setActive = function(state) {
                if (state) {
                    this._amplitude.connect(this._output.gain)
                } else {
                    this._amplitude.disconnect()
                }
                return this
            };
            Tremolo.prototype.updateSync = function(bpm) {
                this._oscillator.frequency.value = bpm / 60 / this._rate;
                return this
            };
            Object.defineProperty(Tremolo.prototype, "frequency", {
                get: function() {
                    return this._oscillator.frequency
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Tremolo.prototype, "amplitude", {
                get: function() {
                    return this._amplitude.gain
                },
                enumerable: true,
                configurable: true
            });
            Tremolo.prototype.setData = function(data) {
                if (data.amplitude !== undefined) {
                    this.amplitude.value = data.amplitude
                }
                if (data.wave !== undefined) {
                    this._oscillator.type = data.wave
                }
                if (data.sync) {
                    this._sync = data.sync;
                    this._rate = data.rate || 0.25;
                    this.init()
                } else {
                    if (data.frequency !== undefined) {
                        this.frequency.value = data.frequency
                    }
                }
            };
            return Tremolo
        }(Klang.Model.Effect);
        return Klang.Model.Tremolo = Tremolo
    });
    Module(function(Klang) {
        var Distortion = function(_super) {
            Klang.Util.__extends(Distortion, _super);

            function Distortion(data) {
                _super.call(this, data);
                this._samples = 8192;
                this._distortionType = data.distortion_type || 0;
                this._amount = data.amount || 0.7;
                this._samples = 8192;
                this._waveshaper = Klang.context.createWaveShaper();
                this._inputDrive = Klang.context.createGain();
                this._outputDrive = Klang.context.createGain();
                this._input.connect(this._inputDrive);
                this._inputDrive.connect(this._waveshaper);
                this._waveshaper.connect(this._outputDrive);
                this._outputDrive.connect(this._output);
                this._ws_table = new Float32Array(this._samples);
                this.createWSCurve(this._distortionType, this._amount);
                this._inputDrive.gain.value = data.drive || 0.5;
                this._outputDrive.gain.value = data.outputGain || 0.5
            }
            Distortion.prototype.createWSCurve = function(type, amount) {
                switch (type) {
                    case 0:
                        var amount = Math.min(amount, 0.9999);
                        var k = 2 * amount / (1 - amount),
                            i, x;
                        for (i = 0; i < this._samples; i++) {
                            x = i * 2 / this._samples - 1;
                            this._ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x))
                        }
                        break;
                    case 1:
                        var i, x, y;
                        for (i = 0; i < this._samples; i++) {
                            x = i * 2 / this._samples - 1;
                            y = (0.5 * Math.pow(x + 1.4, 2) - 1) * y >= 0 ? 5.8 : 1.2;
                            this._ws_table[i] = this.tanh(y)
                        }
                        break;
                    case 2:
                        var i, x, y, a = 1 - amount;
                        for (i = 0; i < this._samples; i++) {
                            x = i * 2 / this._samples - 1;
                            y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);
                            this._ws_table[i] = this.tanh(y * 2)
                        }
                        break;
                    case 3:
                        var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;
                        for (i = 0; i < this._samples; i++) {
                            x = i * 2 / this._samples - 1;
                            abx = Math.abs(x);
                            if (abx < a) {
                                y = abx
                            } else {
                                if (abx > a) {
                                    y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2))
                                } else {
                                    if (abx > 1) {
                                        y = abx
                                    }
                                }
                            }
                            this._ws_table[i] = this.sign(x) * y * (1 / ((a + 1) / 2))
                        }
                        break;
                    case 4:
                        var i, x;
                        for (i = 0; i < this._samples; i++) {
                            x = i * 2 / this._samples - 1;
                            if (x < -0.08905) {
                                this._ws_table[i] = -3 / 4 * (1 - Math.pow(1 - (Math.abs(x) - 0.032857), 12) + 1 / 3 * (Math.abs(x) - 0.032847)) + 0.01
                            } else {
                                if (x >= -0.08905 && x < 0.320018) {
                                    this._ws_table[i] = -6.153 * (x * x) + 3.9375 * x
                                } else {
                                    this._ws_table[i] = 0.630035
                                }
                            }
                        }
                        break;
                    case 5:
                        var a = 2 + Math.round(amount * 14),
                            bits = Math.round(Math.pow(2, a - 1)),
                            i, x;
                        for (i = 0; i < this._samples; i++) {
                            x = i * 2 / this._samples - 1;
                            this._ws_table[i] = Math.round(x * bits) / bits
                        }
                        break
                }
                this._waveshaper.curve = this._ws_table
            };
            Distortion.prototype.tanh = function(n) {
                return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n))
            };
            Distortion.prototype.sign = function(x) {
                if (x === 0) {
                    return 1
                } else {
                    return Math.abs(x) / x
                }
            };
            Distortion.prototype.setActive = function(state) {
                this._input.disconnect();
                if (state) {
                    this._input.connect(this._inputDrive)
                } else {
                    this._input.connect(this._output)
                }
                return this
            };
            Object.defineProperty(Distortion.prototype, "amount", {
                get: function() {
                    return this._amount
                },
                set: function(val) {
                    this._amount = val;
                    this.createWSCurve(this._distortionType, this._amount)
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Distortion.prototype, "distortionType", {
                get: function() {
                    return this._distortionType
                },
                set: function(val) {
                    this._distortionType = val;
                    this.createWSCurve(this._distortionType, this._amount)
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Distortion.prototype, "drive", {
                get: function() {
                    return this._inputDrive.gain
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Distortion.prototype, "outputGain", {
                get: function() {
                    return this._outputDrive.gain
                },
                enumerable: true,
                configurable: true
            });
            Distortion.prototype.setData = function(data) {
                if (data.amount !== undefined) {
                    this.amount = data.amount
                }
                if (data.distortion_type !== undefined) {
                    this.distortionType = data.distortion_type
                }
                if (data.drive !== undefined) {
                    this._inputDrive.gain.value = data.drive
                }
                if (data.outputGain !== undefined) {
                    this._outputDrive.gain.value = data.outputGain
                }
            };
            return Distortion
        }(Klang.Model.Effect);
        return Klang.Model.Distortion = Distortion
    });
    Module(function(Klang) {
        function Synth(data, name) {
            this._arpCounter = 0;
            this._arpNoteLength = 0.5;
            this._arpPattern = [];
            this._arpPatternStep = 0;
            this._name = name;
            this._type = data.type;
            this._output = Klang.context.createGain();
            this._output.gain.value = data.volume || 1;
            if (data.destination_name) {
                this.destinationName = data.destination_name;
                if (!Klang.core.Core.instance.initComplete) {
                    Klang.core.Core.instance.pushToConnectStack(this)
                }
            }
            if (data.arp) {
                this._arpMode = data.arp.arp_mode || "off";
                this._octaves = data.arp.octaves || 1;
                this._sync = data.arp.sync;
                this._arpPattern = data.arp.arp_pattern || []
            } else {
                this._arpMode = "off"
            }
            this._activeVoices = [];
            this._arpVoices = [];
            this._beatSubscription = data.beat_subscription || 0.25;
            this.data = data
        }
        Synth.prototype.connect = function(destination) {
            this._output.connect(destination);
            return this
        };
        Synth.prototype.disconnect = function() {
            this._output.disconnect();
            return this
        };
        Synth.prototype.handleMidiEvent = function(event, when, transpose, bypassArp) {
            Klang.warn("Synth: Invocation of abstract method: Synth.handleMidiEvent in", this);
            return this
        };
        Synth.prototype.stop = function() {
            Klang.warn("Synth: Invocation of abstract method: Synth.stop in", this)
        };
        Synth.prototype.handleArpModes = function(midiEvent) {
            this._arpVoices = [];
            if (this._octaves > 1) {
                var octaves = [];
                for (var j = 0; j < this._octaves - 1; j++) {
                    for (var i = 0; i < this._activeVoices.length; i++) {
                        var e = this._activeVoices[i].midiEvent;
                        var note = e.noteNumber;
                        var ev = {
                            type: "channel",
                            subtype: e.subtype,
                            noteNumber: note += 12 * (j + 1),
                            velocity: e.velocity,
                            deltaTime: e.deltaTime
                        };
                        octaves.push({
                            midiEvent: ev,
                            transpose: this._activeVoices[i].transpose
                        })
                    }
                }
                this._arpVoices = this._activeVoices.concat(octaves)
            } else {
                this._arpVoices = this._activeVoices
            }
            if (this._arpMode === "up") {
                this._arpVoices = this._arpVoices.sort(this.sortVoices)
            } else {
                if (this._arpMode === "down") {
                    this._arpVoices = this._arpVoices.sort(this.sortVoices);
                    this._arpVoices.reverse()
                } else {
                    if (this._arpMode === "up-down") {
                        var up = this._arpVoices.slice(0);
                        up.sort(this.sortVoices);
                        var down = this._arpVoices.slice(0);
                        down.sort(this.sortVoices);
                        down.reverse();
                        this._arpVoices = up.concat(down);
                        if (this._arpVoices.length > 1) {
                            this._arpVoices.splice(this._arpVoices.length / 2, 1);
                            this._arpVoices.pop()
                        }
                    } else {
                        if (this._arpMode === "random") {
                            this._arpVoices = Klang.Util.shuffle(this._arpVoices)
                        }
                    }
                }
            }
        };
        Synth.prototype.sortVoices = function(a, b) {
            if (a.midiEvent.noteNumber < b.midiEvent.noteNumber) {
                return -1
            }
            if (a.midiEvent.noteNumber > b.midiEvent.noteNumber) {
                return 1
            }
            return 0
        };
        Synth.prototype.arpActive = function(active) {
            if (active) {
                if (this._sync) {
                    var seq = Klang.core.Core.instance.findInstance(this._sync);
                    seq.registerSynth(this);
                    if (!seq._started) {
                        seq.start()
                    }
                }
            } else {
                this._arpMode = "off";
                if (this._sync) {
                    var seq = Klang.core.Core.instance.findInstance(this._sync);
                    seq.unregisterSynth(this)
                }
            }
        };
        Synth.prototype.update = function(currentStep, scheduleTime) {
            if (currentStep % this._beatSubscription == 0) {
                this._arpPatternStep = currentStep * 4 % this._arpPattern.length;
                if (this._arpVoices.length === 0) {
                    return
                }
                if (this._arpPattern.length) {
                    if (!this._arpPattern[currentStep * 4 % this._arpPattern.length]) {
                        return
                    }
                }
                this._arpCounter++;
                this._arpCounter = this._arpCounter % this._arpVoices.length;
                if (this._arpCounter < this._arpVoices.length) {
                    var vel = this._fixedVelocities ? this._fixedVelocities[this._arpCounter] : this._arpVoices[this._arpCounter].midiEvent.velocity;
                    this._arpVoices[this._arpCounter].midiEvent.velocity = vel;
                    this.handleMidiEvent(this._arpVoices[this._arpCounter].midiEvent, scheduleTime, this._arpVoices[this._arpCounter].transpose, true);
                    var noteOff = {
                        type: "channel",
                        subtype: "noteOff",
                        noteNumber: this._arpVoices[this._arpCounter].midiEvent.noteNumber,
                        velocity: this._arpVoices[this._arpCounter].midiEvent.velocity,
                        deltaTime: this._arpVoices[this._arpCounter].midiEvent.deltaTime
                    };
                    this.handleMidiEvent(noteOff, scheduleTime + this._arpNoteLength, this._arpVoices[this._arpCounter].transpose, true)
                }
            }
        };
        Synth.prototype.deschedule = function() {
            Klang.warn("Synth: Invocation of abstract method: Synth.deschedule in", this);
            return this
        };
        Object.defineProperty(Synth.prototype, "arpCounter", {
            get: function() {
                return this._arpCounter
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Synth.prototype, "arpLength", {
            get: function() {
                return this._arpVoices.length
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Synth.prototype, "output", {
            get: function() {
                return this._output
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Synth.prototype, "arpPattern", {
            get: function() {
                return this._arpPattern
            },
            set: function(pattern) {
                this._arpPattern = pattern
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Synth.prototype, "arpPatternStep", {
            get: function() {
                return this._arpPatternStep
            },
            enumerable: true,
            configurable: true
        });
        Synth.prototype.setData = function(data) {
            if (data.volume !== undefined) {
                this.output.gain.value = data.volume
            }
            if (this.destinationName != data.destination_name) {
                this.destinationName = data.destination_name;
                this.disconnect();
                this.connect(Klang.core.Core.instance.findInstance(this.destinationName).input)
            }
            if (data.arp) {
                this._sync = data.arp.sync;
                this._octaves = data.arp.octaves;
                this._arpPattern = data.arp.arp_pattern;
                if (this._arpMode == "off") {
                    var seq = Klang.core.Core.instance.findInstance(this._sync);
                    seq.registerSynth(this);
                    if (!seq._started) {
                        seq.start()
                    }
                }
                this._arpMode = data.arp.arp_mode
            } else {
                this._arpMode = "off";
                if (this._sync) {
                    var seq = Klang.core.Core.instance.findInstance(this._sync);
                    seq.unregisterSynth(this)
                }
            }
            this.data = data
        };
        return Klang.Model.Synth = Synth
    });
    Module(function(Klang) {
        function LFO(data, startTime) {
            startTime = startTime || 0;
            this._targets = data.targets;
            this._sync = data.sync;
            this._rate = data.rate || 1;
            this._phaseVal = data.phase || 0;
            this._oscillator = Klang.context.createOscillator();
            this._oscillator.type = data.wave || "sine";
            this._oscillator.frequency.value = this._rate;
            this._amplitude = Klang.context.createGain();
            this._amplitude.gain.value = data.amplitude || 1;
            this._phase = Klang.context.createDelay();
            this._phase.delayTime.value = this._phaseVal * (1 / this._oscillator.frequency.value);
            this._oscillator.connect(this._phase);
            this._phase.connect(this._amplitude);
            this._oscillator.start(startTime);
            Klang.core.Core.instance.pushToPreLoadInitStack(this)
        }
        LFO.prototype.init = function() {
            if (this._sync) {
                var seq = Klang.core.Core.instance.findInstance(this._sync);
                this.updateSync(seq.bpm);
                seq.registerBPMSync(this)
            }
            for (var ix = 0, len = this._targets.length; ix < len; ix++) {
                var t = this._targets[ix];
                var bus = Klang.core.Core.instance.findInstance(t.bus);
                var effect = bus.effects[t.effect];
                if (!effect) {
                    Klang.warn("LFO: Effect index out of bounds: " + t.effect)
                }
                if (!effect[t.param]) {
                    Klang.warn("LFO: Parameter not recognized: " + t.param)
                }
                this._amplitude.connect(effect[t.param])
            }
        };
        LFO.prototype.updateSync = function(bpm) {
            this._oscillator.frequency.value = bpm / 60 / this._rate;
            this._phase.delayTime.value = this._phaseVal * (1 / this._oscillator.frequency.value);
            return this
        };
        LFO.prototype.setData = function(data) {
            this._oscillator.type = data.wave;
            this._oscillator.frequency.value = data.rate;
            this._phase.delayTime.value = data.phase * (1 / this._oscillator.frequency.value);
            this._amplitude.gain.value = data.amplitude || 1;
            if (data.targets) {
                this._targets = data.targets;
                this.init()
            }
            if (this._sync != data.sync) {
                this._sync = data.sync;
                this.init()
            }
        };
        return Klang.Model.LFO = LFO
    });
    Module(function(Klang) {
        var generateNoiseBuffer = function(frames, alg) {
            if (alg < 0 || alg > 3) {
                Klang.warn("Synth: Invalid noise algorithm: " + alg)
            }
            var sampleFrames = frames || 65536;
            var buffer = Klang.context.createBuffer(1, sampleFrames, Klang.context.sampleRate);
            var bufferData = buffer.getChannelData(0);
            if (!alg) {
                alg = 0
            }
            for (var i = 0; i < sampleFrames; i++) {
                switch (alg) {
                    case 0:
                        bufferData[i] = Math.random() * 2 - 1;
                        break;
                    case 1:
                        bufferData[i] = Math.random();
                        break;
                    case 2:
                        bufferData[i] = Math.random() - 1;
                        break;
                    case 3:
                        bufferData[i] = i / sampleFrames;
                        break;
                    default:
                        break
                }
            }
            return buffer
        };
        Klang.engines.webAudio.Util.generateNoiseBuffer = generateNoiseBuffer
    });
    Module(function(Klang) {
        var audioUtil = Klang.engines.webAudio.Util;
        var SympleVoice = function() {
            function SympleVoice(data, voiceType, filterData, startTime, noiseBuffer) {
                this.filterStartFreq = -1;
                this._filterEnabled = true;
                this.voiceType = voiceType;
                this.active = false;
                this.activatedNote = -1;
                this._enabled = true;
                this._detune = data.detune || 0;
                this._wave = data.wave || "sine";
                this._frames = data.frames;
                this._algorithm = data.algorithm;
                if (noiseBuffer) {
                    this._noiseBuffer = noiseBuffer
                }
                this.gain = Klang.context.createGain();
                if (!filterData) {
                    filterData = {
                        frequency: 22050,
                        Q: 1,
                        filter_type: "lowpass"
                    };
                    this.filterEnabled = false
                }
                this._filterData = filterData
            }
            SympleVoice.prototype.noteOn = function(noteNumber, velocity, when, gainEG, filterEG, pitchEG, transpose) {
                if (!this.enabled) {
                    return
                }
                if (this._wave !== "noise") {
                    this.source = Klang.context.createOscillator();
                    this.source.type = this._wave;
                    this.source.detune.value = this._detune
                } else {
                    if (this._wave == "noise") {
                        this.source = Klang.context.createBufferSource();
                        this.source.buffer = this._noiseBuffer;
                        this.source.loop = true
                    }
                }
                this._envelope = Klang.context.createGain();
                if (this._filterData) {
                    this.filter = Klang.context.createBiquadFilter();
                    this.filter.type = Klang.Util.safeFilterType(this._filterData.filter_type);
                    this.filter.frequency.value = this._filterData.frequency === undefined ? Klang.Util.NYQUIST_FREQUENCY : this._filterData.frequency;
                    if (this.filter.detune) {
                        this.filter.detune.value = this._filterData.detune || 0
                    }
                    this.filter.Q.value = this._filterData.Q || this.filter.Q.value;
                    this.filter.gain.value = this._filterData.gain || this.filter.gain.value;
                    this.filterTargetFreq = this.filter.frequency.value;
                    this.source.connect(this.filter);
                    this.filter.connect(this._envelope);
                    this._envelope.connect(this.gain)
                } else {
                    this.source.connect(this._envelope);
                    this._envelope.connect(this.gain)
                }
                if (this.voiceType == 1) {
                    this.filterAmplitudeGainNode.connect(this.filter.frequency)
                }
                if (when < Klang.Util.now()) {
                    when = Klang.Util.now()
                }
                this.active = true;
                this.activatedNote = noteNumber;
                if (this._wave !== "noise") {
                    var pitchTargetFreq = Klang.Util.midiNoteToFrequency(noteNumber + transpose);
                    if (pitchEG) {
                        var pitchStartFreq = -1;
                        if (pitchEG.contour > 0) {
                            pitchStartFreq = pitchTargetFreq * (1 - pitchEG.contour)
                        } else {
                            if (pitchEG.contour < 0) {
                                pitchStartFreq = (Klang.Util.NYQUIST_FREQUENCY - pitchTargetFreq) * -pitchEG.contour + pitchTargetFreq
                            }
                        }
                        this.source.frequency.cancelScheduledValues(when);
                        if (pitchStartFreq != -1) {
                            this.source.frequency.setValueAtTime(pitchStartFreq, when);
                            if (Klang.safari) {
                                this.source.frequency.setTargetValueAtTime(pitchTargetFreq, when, pitchEG.decay)
                            } else {
                                this.source.frequency.setTargetAtTime(pitchTargetFreq, when, pitchEG.decay)
                            }
                        } else {
                            this.source.frequency.setValueAtTime(pitchTargetFreq, when)
                        }
                    } else {
                        this.source.frequency.setValueAtTime(pitchTargetFreq, when)
                    }
                }
                if (filterEG) {
                    this.filterStartFreq = -1;
                    if (filterEG.contour < 0) {
                        this.filterStartFreq = this.filterTargetFreq * (1 + filterEG.contour) + 1
                    } else {
                        if (filterEG.contour > 0) {
                            this.filterStartFreq = (Klang.Util.NYQUIST_FREQUENCY - this.filterTargetFreq) * filterEG.contour + this.filterTargetFreq
                        }
                    }
                    if (this.filterStartFreq != -1) {
                        this.filter.frequency.cancelScheduledValues(when);
                        this.filter.frequency.setValueAtTime(this.filterStartFreq, when + 0.0001);
                        this.filter.frequency.exponentialRampToValueAtTime(this.filterTargetFreq, when + filterEG.attack);
                        if (Klang.safari) {
                            this.filter.frequency.setTargetValueAtTime(this.filterTargetFreq * filterEG.sustain, when + filterEG.attack, filterEG.decay)
                        } else {
                            this.filter.frequency.setTargetAtTime(this.filterTargetFreq * filterEG.sustain, when + filterEG.attack + 0.0001, filterEG.decay)
                        }
                    }
                }
                var vol;
                if (gainEG.volumeCurve === "linear") {
                    vol = velocity / 128
                } else {
                    if (gainEG.volumeCurve === "exponential") {
                        vol = Math.abs(1 - Math.exp(velocity / 128))
                    } else {
                        vol = 1
                    }
                }
                if (gainEG) {
                    this.gain.gain.cancelScheduledValues(when);
                    this._envelope.gain.setValueAtTime(0, when);
                    this._envelope.gain.linearRampToValueAtTime(vol, when + gainEG.attack);
                    if (Klang.safari) {
                        this._envelope.gain.setTargetValueAtTime(vol * gainEG.sustain, when + gainEG.attack, gainEG.decay)
                    } else {
                        this._envelope.gain.setTargetAtTime(vol * gainEG.sustain, when + gainEG.attack + 0.0001, gainEG.decay)
                    }
                } else {
                    this._envelope.gain.setValueAtTime(vol, when)
                }
                this.source.startTime = when;
                Klang.safari ? this.source.noteOn(when) : this.source.start(when)
            };
            SympleVoice.prototype.noteOff = function(noteNumber, when, gainEG, filterEG) {
                if (!this.enabled) {
                    return
                }
                if (when < Klang.Util.now()) {
                    when = Klang.Util.now()
                }
                this.active = false;
                if (filterEG) {
                    if (this.filterStartFreq != -1) {
                        this.filter.frequency.cancelScheduledValues(when);
                        if (when != Klang.Util.now()) {
                            this.filter.frequency.setTargetAtTime(this.filterTargetFreq * filterEG.sustain, when, 0.1)
                        } else {
                            this.filter.frequency.setValueAtTime(this.filter.frequency.value, when)
                        }
                        if (Klang.safari) {
                            this.filter.frequency.setTargetValueAtTime(this.filterStartFreq, when, filterEG.release)
                        } else {
                            this.filter.frequency.setTargetAtTime(this.filterStartFreq, when, filterEG.release)
                        }
                    }
                }
                if (gainEG) {
                    this._envelope.gain.cancelScheduledValues(when);
                    if (when != Klang.Util.now()) {
                        this._envelope.gain.setTargetAtTime(gainEG.sustain, when, 0.1)
                    } else {
                        this._envelope.gain.setValueAtTime(this._envelope.gain.value, when)
                    }
                    if (Klang.safari) {
                        this._envelope.gain.setTargetValueAtTime(0, when, gainEG.release)
                    } else {
                        this._envelope.gain.setTargetAtTime(0, when, gainEG.release)
                    }
                } else {
                    this._envelope.gain.setValueAtTime(0, when)
                }
                this.source.offTime = when;
                Klang.safari ? this.source.noteOff(when + gainEG.release * 5) : this.source.stop(when + gainEG.release * 5)
            };
            SympleVoice.prototype.stop = function() {
                this.filter.frequency.cancelScheduledValues(0);
                this._envelope.gain.cancelScheduledValues(0);
                this._envelope.gain.setValueAtTime(0, 0);
                Klang.safari ? this.source.noteOff(0) : this.source.stop(0);
                this.source.disconnect();
                if (this.filter) {
                    this.filter.disconnect()
                }
                if (this._envelope) {
                    this._envelope.disconnect()
                }
            };
            SympleVoice.prototype.stopSoft = function(when, gainEG, filterEG) {
                this.active = false;
                this._envelope.gain.cancelScheduledValues(when);
                if (Klang.safari) {
                    this._envelope.gain.setTargetValueAtTime(0, when, gainEG.release)
                } else {
                    this._envelope.gain.setTargetAtTime(0, when, gainEG.release)
                }
                var offTime = when + gainEG.release * 5;
                Klang.safari ? this.source.noteOff(offTime) : this.source.stop(offTime);
                var _this = this;
                setTimeout(function() {
                    _this.source.disconnect();
                    if (_this.filter) {
                        _this.filter.disconnect()
                    }
                    if (_this._envelope) {
                        _this._envelope.disconnect()
                    }
                }, (offTime - Klang.Util.now()) * 1000)
            };
            Object.defineProperty(SympleVoice.prototype, "enabled", {
                get: function() {
                    return this._enabled
                },
                set: function(state) {
                    this._enabled = state
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SympleVoice.prototype, "filterEnabled", {
                get: function() {
                    return this._filterEnabled
                },
                set: function(state) {
                    this._filterEnabled = state;
                    if (!this.source) {
                        return
                    }
                    if (state) {
                        this.source.disconnect();
                        this.source.connect(this.filter);
                        this.filter.connect(this._envelope)
                    } else {
                        this.source.disconnect();
                        this.filter.disconnect();
                        this.source.connect(this._envelope)
                    }
                },
                enumerable: true,
                configurable: true
            });
            return SympleVoice
        }();
        var SympleOsc = function() {
            function SympleOsc(data, poly, filterData, startTime) {
                this._enabled = true;
                this.nextVoice = 0;
                this.octave = data.octave || 0;
                this.output = Klang.context.createGain();
                this.output.gain.value = data.volume === undefined ? 1 : data.volume;
                this._data = data;
                this._poly = poly;
                this._filterData = filterData;
                this.voices = [];
                this._noiseBuffer = audioUtil.generateNoiseBuffer(this._data._frames, this._data._algorithm)
            }
            SympleOsc.prototype.noteOn = function(noteNumber, velocity, when, gainEG, filterEG, pitchEG, transpose) {
                if (!this.enabled) {
                    return
                }
                if (this.voices.length == this._poly) {
                    this.voices[0].noteOff(noteNumber, when, gainEG, filterEG);
                    this.voices.splice(0, 1)
                }
                noteNumber += this.octave * 12;
                var v;
                if (this._data.wave == "noise") {
                    v = new SympleVoice(this._data, 0, this._filterData, when, this._noiseBuffer)
                } else {
                    v = new SympleVoice(this._data, 0, this._filterData, when, null)
                }
                v.gain.connect(this.output);
                v.noteOn(noteNumber, velocity, when, gainEG, filterEG, pitchEG, transpose);
                if (this.lfoPitchGainNode && this._data.wave != "noise") {
                    this.lfoPitchGainNode.connect(v.source.frequency)
                }
                if (this.filterAmplitude && v.filter) {
                    this.filterAmplitude.connect(v.filter.frequency)
                }
                this.voices.push(v)
            };
            SympleOsc.prototype.noteOff = function(noteNumber, when, gainEG, filterEG) {
                if (!this.enabled) {
                    return
                }
                noteNumber += this.octave * 12;
                for (var ix = 0; ix < this.voices.length; ix++) {
                    if (this.voices[ix].active && this.voices[ix].activatedNote == noteNumber) {
                        this.voices[ix].noteOff(noteNumber, when, gainEG, filterEG);
                        this.voices.splice(ix, 1);
                        break
                    }
                }
            };
            SympleOsc.prototype.stopSoft = function(when, gainEG, filterEG) {
                for (var ix = 0; ix < this.voices.length; ix++) {
                    this.voices[ix].stopSoft(when, gainEG, filterEG)
                }
                this.voices = []
            };
            SympleOsc.prototype.stop = function() {
                for (var ix = 0, len = this.voices.length; ix < len; ix++) {
                    this.voices[ix].stop()
                }
                this.voices = []
            };
            SympleOsc.prototype.deschedule = function() {
                for (var ix = 0, len = this.voices.length; ix < len; ix++) {
                    if (this.voices[ix]) {
                        var source = this.voices[ix].source;
                        if (source.playbackState == 1 || source.startTime > Klang.context.currentTime) {
                            this.voices[ix].stop();
                            this.voices.splice(ix, 1);
                            ix--
                        }
                    }
                }
            };
            SympleOsc.prototype.setDetune = function(detune, when) {
                if (this._data) {
                    this._data.detune = detune;
                    for (var ix = 0, len = this.voices.length; ix < len; ix++) {
                        this.voices[ix].source.detune.setValueAtTime(detune, when)
                    }
                }
            };
            Object.defineProperty(SympleOsc.prototype, "enabled", {
                get: function() {
                    return this._enabled
                },
                set: function(state) {
                    this._enabled = state
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SympleOsc.prototype, "detune", {
                get: function() {
                    return this._detune
                },
                enumerable: true,
                configurable: true
            });
            return SympleOsc
        }();
        var SympleLFO = function() {
            function SympleLFO(data, startTime) {
                this.osc = Klang.context.createOscillator();
                this.phaseDelay = Klang.context.createDelay();
                this.osc.type = data.wave || "sine";
                this.osc.frequency.value = data.rate || 1;
                this.phase = data.phase || 0;
                this.phaseDelay.delayTime.value = this.phase * (1 / this.osc.frequency.value);
                this.sync = data.sync;
                this.syncResolution = data.rate;
                this.osc.connect(this.phaseDelay);
                this.oscVolumeAmplitude = Klang.context.createGain();
                this.oscVolumeAmplitude.gain.value = data.osc_volume_amount;
                this.phaseDelay.connect(this.oscVolumeAmplitude);
                this.pitchAmplitude = Klang.context.createGain();
                this.pitchAmplitude.gain.value = data.pitch_amount;
                this.phaseDelay.connect(this.pitchAmplitude);
                this.filterAmplitude = Klang.context.createGain();
                this.filterAmplitude.gain.value = data.filter_amount;
                this.phaseDelay.connect(this.filterAmplitude);
                Klang.safari ? this.osc.noteOn(startTime) : this.osc.start(startTime)
            }
            SympleLFO.prototype.updateSync = function(bpm) {
                this.osc.frequency.value = bpm / 60 / this.syncResolution;
                this.phaseDelay.delayTime.value = this.phase * (1 / this.osc.frequency.value);
                return this
            };
            return SympleLFO
        }();
        var Symple = function(_super) {
            Klang.Util.__extends(Symple, _super);

            function Symple(data, name) {
                _super.call(this, data, name);
                this.bendRange = 400;
                var startTime = Klang.context.currentTime + Klang.Util.OSC_START_DELAY;
                this._gainEG = data.gain_eg;
                this._filterEG = data.filter_eg;
                this._pitchEG = data.pitch_eg;
                var disabledOscs = 0;
                if (!data.oscillators[0]) {
                    data.oscillators.push({
                        wave: "sine",
                        detune: 0,
                        volume: 1,
                        octave: 0
                    });
                    disabledOscs++
                }
                if (!data.oscillators[1]) {
                    data.oscillators.push({
                        wave: "sine",
                        detune: 0,
                        volume: 1,
                        octave: 0
                    });
                    disabledOscs++
                }
                this._oscs = [];
                this._poly = data.poly;
                for (var ix = 0, len = data.oscillators.length; ix < len; ix++) {
                    var o = new SympleOsc(data.oscillators[ix], data.poly, data.filter, startTime);
                    o.output.connect(this.output);
                    this._oscs.push(o)
                }
                if (disabledOscs == 1) {
                    this._oscs[1].enabled = false
                } else {
                    if (disabledOscs == 2) {
                        this._oscs[0].enabled = false;
                        this._oscs[1].enabled = false
                    }
                }
                if (!data.LFO) {
                    data.LFO = {
                        wave: "sine",
                        rate: 1,
                        phase: 0,
                        osc_volume_amount: 0,
                        noise_volume_amount: 0,
                        pitch_amount: 0,
                        filter_amount: 0
                    }
                }
                if (data.LFO) {
                    this._LFO = new SympleLFO(data.LFO, startTime);
                    for (var ix = 0, len = this._oscs.length; ix < len; ix++) {
                        var osc = this._oscs[ix];
                        if (this._LFO.oscVolumeAmplitude) {
                            this._LFO.oscVolumeAmplitude.connect(osc.output.gain)
                        }
                        if (this._LFO.pitchAmplitude) {
                            osc.lfoPitchGainNode = this._LFO.pitchAmplitude
                        }
                        if (this._LFO.filterAmplitude) {
                            osc.filterAmplitude = this._LFO.filterAmplitude
                        }
                    }
                    if (this._LFO.sync) {
                        Klang.core.Core.instance.pushToPreLoadInitStack(this)
                    }
                }
                if (this._sync) {
                    Klang.core.Core.instance.pushToPreLoadInitStack(this)
                }
            }
            Symple.prototype.init = function() {
                if (this._LFO && this._LFO.sync) {
                    var seq = Klang.core.Core.instance.findInstance(this._LFO.sync);
                    this._LFO.updateSync(seq.bpm);
                    seq.registerBPMSync(this._LFO)
                }
                if (this._sync) {
                    var seq = Klang.core.Core.instance.findInstance(this._sync);
                    seq.registerSynth(this);
                    if (!seq.started) {
                        seq.start()
                    }
                }
            };
            Symple.prototype.handleMidiEvent = function(midiEvent, when, transpose, bypassArp) {
                when = when || Klang.context.currentTime;
                bypassArp = bypassArp || false;
                transpose = transpose || 0;
                if (midiEvent.type == "channel") {
                    if (midiEvent.subtype == "noteOn") {
                        if (this._arpMode != "off" && !bypassArp) {
                            this._activeVoices.push({
                                midiEvent: midiEvent,
                                transpose: transpose
                            });
                            this.handleArpModes(midiEvent);
                            return
                        }
                        for (var ix = 0, len = this._oscs.length; ix < len; ix++) {
                            this._oscs[ix].noteOn(midiEvent.noteNumber, midiEvent.velocity, when, this._gainEG, this._filterEG, this._pitchEG, transpose)
                        }
                    } else {
                        if (midiEvent.subtype == "noteOff") {
                            if (this._arpMode != "off" && !bypassArp) {
                                for (var i = 0; i < this._activeVoices.length; i++) {
                                    if (midiEvent.noteNumber === this._activeVoices[i].midiEvent.noteNumber) {
                                        this._activeVoices.splice(i, 1)
                                    }
                                }
                                this.handleArpModes(midiEvent);
                                return
                            }
                            for (var ix = 0, len = this._oscs.length; ix < len; ix++) {
                                this._oscs[ix].noteOff(midiEvent.noteNumber, when, this._gainEG, this._filterEG)
                            }
                        } else {
                            if (midiEvent.subtype == "pitchBend") {
                                var bend;
                                if (midiEvent.value !== undefined) {
                                    bend = midiEvent.value
                                } else {
                                    if (midiEvent.velocity !== undefined) {
                                        bend = midiEvent.velocity
                                    }
                                }
                                var currentPitch = (bend - 8192) / 16384 * this.bendRange;
                                for (var i = 0; i < this._oscs.length; i++) {
                                    this._oscs[i].setDetune(currentPitch, when)
                                }
                            }
                        }
                    }
                }
                return this
            };
            Symple.prototype.glideTo = function(midiNotes, when, duration, transpose) {
                var now = Klang.Util.now();
                when = when || now;
                if (duration === undefined) {
                    duration = 0.5
                }
                transpose = transpose || 0;
                for (var o = 0, len = this._oscs.length; o < len; o++) {
                    var osc = this._oscs[o];
                    var voicesToUpdate = Math.min(midiNotes.length, osc.voices.length);
                    for (var v = 0; v < voicesToUpdate; v++) {
                        var voice = osc.voices[v];
                        var toFrequency = Klang.Util.midiNoteToFrequency(midiNotes[v] + transpose + osc.octave * 12);
                        if (voice.source.frequency) {
                            voice.source.frequency.linearRampToValueAtTime(toFrequency, when + duration)
                        }
                    }
                }
                return this
            };
            Symple.prototype.stop = function(when) {
                when = when || Klang.Util.now();
                for (var ix = 0, len = this._oscs.length; ix < len; ix++) {
                    this._oscs[ix].stopSoft(when, this._gainEG, this._filterEG)
                }
                if (this._activeVoices.length) {
                    this._activeVoices = []
                }
                this._arpVoices = []
            };
            Symple.prototype.deschedule = function() {
                for (var o = 0, len = this._oscs.length; o < len; o++) {
                    this._oscs[o].deschedule()
                }
                return this
            };
            Object.defineProperty(Symple.prototype, "filterFrequency", {
                set: function(val) {
                    for (var o = 0, len = this._oscs.length; o < len; o++) {
                        var osc = this._oscs[o];
                        osc._filterData.frequency = val;
                        for (var v = 0, vlen = osc.voices.length; v < vlen; v++) {
                            var voice = osc.voices[v];
                            voice.filterTargetFreq = val;
                            if (!this._filterEG || this._filterEG.contour == 0) {
                                voice.filter.frequency.value = val
                            }
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "filterQ", {
                set: function(val) {
                    for (var o = 0, len = this._oscs.length; o < len; o++) {
                        var osc = this._oscs[o];
                        osc._filterData.Q = val;
                        for (var v = 0, vlen = osc.voices.length; v < vlen; v++) {
                            var voice = osc.voices[v];
                            voice.filterTargetFreq = val;
                            if (!this._filterEG || this._filterEG.contour == 0) {
                                voice.filter.Q.value = val
                            }
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "filterType", {
                set: function(val) {
                    for (var o = 0, len = this._oscs.length; o < len; o++) {
                        var osc = this._oscs[o];
                        osc._filterData.filter_type = val;
                        for (var v = 0, vlen = osc.voices.length; v < vlen; v++) {
                            var voice = osc.voices[v];
                            voice.filter.type = val
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "osc1Wave", {
                set: function(val) {
                    var osc = this._oscs[0];
                    osc._data.wave = val;
                    for (var v = 0, vlen = osc.voices.length; v < vlen; v++) {
                        var voice = osc.voices[v];
                        if (voice.source.type && val !== "4") {
                            voice.source.type = val
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "osc1Vol", {
                set: function(val) {
                    var osc = this._oscs[0];
                    osc.output.gain.value = val
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "osc1Detune", {
                set: function(val) {
                    var osc = this._oscs[0];
                    osc._detune = val;
                    for (var v = 0, vlen = osc.voices.length; v < vlen; v++) {
                        var voice = osc.voices[v];
                        if (voice.source.detune) {
                            voice.source.detune.value = val
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "osc1Octave", {
                set: function(val) {
                    var osc = this._oscs[0];
                    osc.octave = val
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "osc2Wave", {
                set: function(val) {
                    if (this._oscs.length < 2) {
                        return
                    }
                    var osc = this._oscs[1];
                    osc._data.wave = val;
                    for (var v = 0, vlen = osc.voices.length; v < vlen; v++) {
                        var voice = osc.voices[v];
                        if (voice.source.type && val !== "4") {
                            voice.source.type = val
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "osc2Vol", {
                set: function(val) {
                    if (this._oscs.length < 2) {
                        return
                    }
                    var osc = this._oscs[1];
                    osc.output.gain.value = val
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "osc2Detune", {
                set: function(val) {
                    if (this._oscs.length < 2) {
                        return
                    }
                    var osc = this._oscs[1];
                    osc._detune = val;
                    for (var v = 0, vlen = osc.voices.length; v < vlen; v++) {
                        var voice = osc.voices[v];
                        if (voice.source.detune) {
                            voice.source.detune.value = val
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "osc2Octave", {
                set: function(val) {
                    if (this._oscs.length < 2) {
                        return
                    }
                    var osc = this._oscs[1];
                    osc.octave = val
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "pitchDecay", {
                set: function(val) {
                    if (this._pitchEG) {
                        this._pitchEG.decay = val
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "pitchContour", {
                set: function(val) {
                    if (this._pitchEG) {
                        this._pitchEG.contour = val
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "lfoWave", {
                set: function(val) {
                    if (this._LFO) {
                        this._LFO.osc.type = val
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "lfoRate", {
                set: function(val) {
                    if (this._LFO) {
                        this._LFO.osc.frequency.value = val
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "lfoPhase", {
                set: function(val) {
                    if (this._LFO) {
                        this._LFO.phase = val
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "lfoOscVol", {
                set: function(val) {
                    if (this._LFO) {
                        this._LFO.oscVolumeAmplitude.gain.value = val
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "lfoPitch", {
                set: function(val) {
                    if (this._LFO) {
                        this._LFO.pitchAmplitude.gain.value = val
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "lfoFilter", {
                set: function(val) {
                    if (this._LFO) {
                        this._LFO.filterAmplitude.gain.value = val
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "arpMode", {
                set: function(val) {
                    this._arpMode = val
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Symple.prototype, "arpOctaves", {
                set: function(val) {
                    this._octaves = val
                },
                enumerable: true,
                configurable: true
            });
            Symple.prototype.setData = function(data) {
                _super.prototype.setData.call(this, data);
                this._poly = data.poly;
                this._gainEG = data.gain_eg ? data.gain_eg : undefined;
                this._filterEG = data.filter_eg ? data.filter_eg : undefined;
                this._pitchEG = data.pitch_eg ? data.pitch_eg : undefined;
                this._oscs[0].enabled = data.oscillators[0] ? true : false;
                this._oscs[1].enabled = data.oscillators[1] ? true : false;
                for (var o = 0, len = this._oscs.length; o < len; o++) {
                    var osc = this._oscs[o];
                    osc._data = data.oscillators[o];
                    osc._filterData = data.filter;
                    osc._poly = this._poly;
                    for (var v = 0, vlen = osc.voices.length; v < vlen; v++) {
                        var voice = osc.voices[v];
                        if (data.filter) {
                            if (!voice.filterEnabled) {
                                voice.filterEnabled = true
                            }
                            if (!this._filterEG || this._filterEG.contour == 0) {
                                voice.filter.frequency.value = data.filter.frequency
                            }
                            voice.filter.Q.value = data.filter.Q;
                            voice.filterTargetFreq = data.filter.frequency;
                            voice.filter.type = data.filter.filter_type
                        } else {
                            if (voice.filterEnabled) {
                                voice.filterEnabled = false
                            }
                        }
                        if (data.oscillators && data.oscillators[o] && voice.voiceType == 0) {
                            if (voice.source.type && data.oscillators[0].wave !== 4) {
                                voice.source.type = data.oscillators[o].wave
                            }
                            if (voice.source.detune) {
                                voice.source.detune.value = data.oscillators[o].detune
                            }
                        }
                    }
                    if (data.oscillators[o]) {
                        osc.output.gain.value = data.oscillators[o].volume;
                        osc.octave = data.oscillators[o].octave
                    }
                }
                if (data.LFO) {
                    this._LFO.osc.type = data.LFO.wave;
                    this._LFO.osc.frequency.value = data.LFO.rate;
                    this._LFO.phase = data.LFO.phase;
                    this._LFO.phaseDelay.delayTime.value = data.LFO.phase * (1 / this._LFO.osc.frequency.value);
                    this._LFO.oscVolumeAmplitude.gain.value = data.LFO.osc_volume_amount;
                    this._LFO.pitchAmplitude.gain.value = data.LFO.pitch_amount;
                    this._LFO.filterAmplitude.gain.value = data.LFO.filter_amount
                } else {
                    this._LFO.oscVolumeAmplitude.gain.value = 0;
                    this._LFO.pitchAmplitude.gain.value = 0;
                    this._LFO.filterAmplitude.gain.value = 0
                }
            };
            return Symple
        }(Klang.Model.Synth);
        return Klang.Model.Symple = Symple
    });
    Module(function(Klang) {
        var audioUtil = Klang.engines.webAudio.Util;
        var MonoSynth = function(_super) {
            Klang.Util.__extends(MonoSynth, _super);

            function MonoSynth(data, name) {
                _super.call(this, data, name);
                var startTime = Klang.context.currentTime + Klang.Util.OSC_START_DELAY;
                this._gainEG = data.gain_eg;
                this._pitchEG = data.pitch_eg;
                this._osc = null;
                if (this._sync) {
                    Klang.core.Core.instance.pushToPreLoadInitStack(this)
                }
            }
            MonoSynth.prototype.init = function() {
                if (this._sync) {
                    var seq = Klang.core.Core.instance.findInstance(this._sync);
                    seq.registerSynth(this);
                    if (!seq.started) {
                        seq.start()
                    }
                }
            };
            MonoSynth.prototype.trigger = function(note) {
                var midiEvent = {
                    noteNumber: note,
                    when: Klang.context.currentTime
                };
                this.noteOn(midiEvent.noteNumber, midiEvent.when);
                this.noteOff(midiEvent.noteNumber, midiEvent.when)
            };
            MonoSynth.prototype.noteOn = function(noteNumber, velocity, when, transpose) {
                when = Math.max(when || 0, Klang.context.currentTime);
                transpose = transpose || 0;
                if (!this._osc) {
                    this._osc = Klang.context.createOscillator();
                    this._oscGain = Klang.context.createGain();
                    this._osc.connect(this._oscGain);
                    this._oscGain.connect(this.output);
                    this._osc.start(when);
                    this._oscGain.gain.value = 0;
                    this._osc.type = this.data.oscillators[0].wave
                }
                var f = Klang.Util.midiNoteToFrequency(noteNumber + transpose + this.data.oscillators[0].octave * 12);
                var v = this._oscGain.gain.value;
                var oldF = this._osc.frequency.value;
                var smoothingTime = 0.02;
                this._oscGain.gain.cancelScheduledValues(when);
                this._osc.frequency.cancelScheduledValues(when);
                this._osc.frequency.setValueAtTime(oldF, when);
                this._oscGain.gain.setValueAtTime(v, when);
                this._oscGain.gain.linearRampToValueAtTime(0, when + smoothingTime);
                this._osc.frequency.linearRampToValueAtTime(f, when + smoothingTime);
                this.smoothingTime = smoothingTime;
                var attackVal = smoothingTime + this._gainEG.attack + 0.01;
                this._oscGain.gain.linearRampToValueAtTime(1, when + attackVal);
                var decayVal = attackVal + this._gainEG.decay;
                this._oscGain.gain.linearRampToValueAtTime(this._gainEG.sustain, when + decayVal);
                this._adEndTime = when + decayVal;
                return this
            };
            MonoSynth.prototype.noteOff = function(noteNumber, when) {
                when = Math.max(when || 0, this._adEndTime + 0.0001);
                var attackVal = this.smoothingTime + this._gainEG.attack + 0.01;
                var release = attackVal + this.smoothingTime + this._gainEG.release;
                this._oscGain.gain.linearRampToValueAtTime(0, when + release)
            };
            MonoSynth.prototype.handleMidiEvent = function(midiEvent, when, transpose, bypassArp) {
                when = when || Klang.context.currentTime;
                transpose = transpose || 0;
                if (midiEvent.type == "channel") {
                    if (midiEvent.subtype == "noteOn") {
                        this.noteOn(midiEvent.noteNumber, midiEvent.velocity, when, transpose)
                    } else {
                        if (midiEvent.subtype == "noteOff") {
                            this.noteOff(midiEvent.noteNumber, when, this._gainEG)
                        } else {
                            if (midiEvent.subtype == "pitchBend") {
                                var bend;
                                if (midiEvent.value !== undefined) {
                                    bend = midiEvent.value
                                } else {
                                    if (midiEvent.velocity !== undefined) {
                                        bend = midiEvent.velocity
                                    }
                                }
                                var currentPitch = (bend - 8192) / 16384 * this.bendRange;
                                for (var i = 0; i < this._oscs.length; i++) {
                                    this._oscs[i].setDetune(currentPitch, when)
                                }
                            }
                        }
                    }
                }
                return this
            };
            MonoSynth.prototype.glideTo = function(midiNotes, when, duration, transpose) {
                var now = Klang.Util.now();
                when = when || now;
                if (duration === undefined) {
                    duration = 0.5
                }
                transpose = transpose || 0;
                for (var o = 0, len = this._oscs.length; o < len; o++) {
                    var osc = this._oscs[o];
                    var voicesToUpdate = Math.min(midiNotes.length, osc.voices.length);
                    for (var v = 0; v < voicesToUpdate; v++) {
                        var voice = osc.voices[v];
                        var toFrequency = Klang.Util.midiNoteToFrequency(midiNotes[v] + transpose + osc.octave * 12);
                        if (voice.source.frequency) {
                            voice.source.frequency.linearRampToValueAtTime(toFrequency, when + duration)
                        }
                    }
                }
                return this
            };
            MonoSynth.prototype.stop = function(when) {
                when = when || Klang.Util.now();
                this._osc.stop();
                this._osc.disconnect();
                this._oscGain.disconnect();
                this._osc = null
            };
            MonoSynth.prototype.deschedule = function() {};
            Object.defineProperty(MonoSynth.prototype, "osc1Wave", {
                set: function(val) {
                    var osc = this._oscs[0];
                    osc._data.wave = val;
                    for (var v = 0, vlen = osc.voices.length; v < vlen; v++) {
                        var voice = osc.voices[v];
                        if (voice.source.type && val !== "4") {
                            voice.source.type = val
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MonoSynth.prototype, "osc1Vol", {
                set: function(val) {
                    var osc = this._oscs[0];
                    osc.output.gain.value = val
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MonoSynth.prototype, "osc1Detune", {
                set: function(val) {
                    var osc = this._oscs[0];
                    osc._detune = val;
                    for (var v = 0, vlen = osc.voices.length; v < vlen; v++) {
                        var voice = osc.voices[v];
                        if (voice.source.detune) {
                            voice.source.detune.value = val
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MonoSynth.prototype, "osc1Octave", {
                set: function(val) {
                    var osc = this._oscs[0];
                    osc.octave = val
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MonoSynth.prototype, "pitchDecay", {
                set: function(val) {
                    if (this._pitchEG) {
                        this._pitchEG.decay = val
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MonoSynth.prototype, "pitchContour", {
                set: function(val) {
                    if (this._pitchEG) {
                        this._pitchEG.contour = val
                    }
                },
                enumerable: true,
                configurable: true
            });
            MonoSynth.prototype.setData = function(data) {
                _super.prototype.setData.call(this, data);
                this._poly = data.poly;
                this._gainEG = data.gain_eg ? data.gain_eg : undefined;
                this._pitchEG = data.pitch_eg ? data.pitch_eg : undefined;
                if (this._osc) {
                    this._osc.type = data.oscillators[0].wave
                }
            };
            return MonoSynth
        }(Klang.Model.Synth);
        return Klang.Model.MonoSynth = MonoSynth
    });
    Module(function(Klang) {
        var SamplePlayer = function(_super) {
            Klang.Util.__extends(SamplePlayer, _super);

            function SamplePlayer(data, name) {
                _super.call(this, data, name);
                this._content = [];
                this._playingVoices = [];
                this._allVoices = [];
                this._hasNoteOffSamples = false;
                this._hasSustainOnSamples = false;
                this._hasSustainOffSamples = false;
                this._pitchBendRange = 0.25;
                this._pedalOnTime = -1;
                this._sustained = [];
                this._maxNotes = 20;
                this._stopFactor = 5;
                this._content = Klang.Util.cloneObject(data.content);
                this._volumeCurve = data.volume_curve || "none";
                this._gainEG = data.eg_gain || {
                    attack: 0,
                    decay: 0,
                    sustain: 1,
                    release: 0.005
                };
                this._currentPitch = 1;
                Klang.core.Core.instance.pushToPreLoadInitStack(this)
            }
            SamplePlayer.prototype.init = function() {
                this._envelope = Klang.context.createGain();
                for (var ix = 0, len = this._content.length; ix < len; ix++) {
                    if (this._content[ix].value === "noteOff") {
                        this._hasNoteOffSamples = true
                    }
                    if (this._content[ix].value === "sustainOn") {
                        this._hasSustainOnSamples = true
                    }
                    if (this._content[ix].value === "sustainOff") {
                        this._hasSustainOffSamples = true
                    }
                    for (var j = 0; j < this._content[ix].samples.length; j++) {
                        this._content[ix].samples[j].source = Klang.core.Core.instance.findInstance(this._content[ix].samples[j].source);
                        if (!this._content[ix].samples[j].source) {
                            Klang.warn("SamplePlayer: audio source not found")
                        }
                        this._content[ix].samples[j].source._parentType = "SamplePlayer";
                        if (this._content[ix].samples[j].source.loop) {
                            this._loopedSamples = true
                        }
                    }
                }
                if (this._sync) {
                    var seq = Klang.core.Core.instance.findInstance(this._sync);
                    seq.registerSynth(this);
                    if (!seq.started) {}
                }
            };
            SamplePlayer.prototype.handleMidiEvent = function(midiEvent, when, transpose, bypassArp, insertBus) {
                when = when || Klang.Util.now();
                bypassArp = bypassArp || false;
                transpose = transpose || 0;
                if (midiEvent.type == "channel") {
                    if (midiEvent.subtype == "noteOn") {
                        if (this._arpMode != "off" && !bypassArp) {
                            this._activeVoices.push({
                                midiEvent: midiEvent,
                                transpose: transpose
                            });
                            this.handleArpModes(midiEvent);
                            return
                        }
                        this.noteOn(when, midiEvent.noteNumber, transpose, midiEvent.velocity, midiEvent.subtype, false, insertBus);
                        if (this._callback) {
                            this._callback(midiEvent, when)
                        }
                    } else {
                        if (midiEvent.subtype == "noteOff") {
                            if (this._arpMode != "off" && !bypassArp) {
                                for (var i = 0; i < this._activeVoices.length; i++) {
                                    if (midiEvent.noteNumber === this._activeVoices[i].midiEvent.noteNumber) {
                                        this._activeVoices.splice(i, 1)
                                    }
                                }
                                this.handleArpModes(midiEvent);
                                return
                            }
                            this.noteOff(when, midiEvent.noteNumber, midiEvent.velocity, midiEvent.subtype);
                            if (this._callback) {
                                this._callback(midiEvent, when)
                            }
                        } else {
                            if (midiEvent.subtype == "pitchBend") {
                                var bend = midiEvent.value;
                                this._currentPitch = 1 + (bend - 64) / 127;
                                for (var i = 0; i < this._playingVoices.length; i++) {
                                    this._playingVoices[i].source.playbackRateNode.setValueAtTime(this._currentPitch, when)
                                }
                            } else {
                                if (midiEvent.subtype == "controller") {
                                    var controllerType = midiEvent.controllerType || midiEvent.noteNumber;
                                    var value = midiEvent.value === undefined ? midiEvent.velocity : midiEvent.value;
                                    switch (controllerType) {
                                        case 1:
                                            break;
                                        case 64:
                                            if (value < 64) {
                                                this.pedalRelease(when);
                                                if (when > this._pedalOnTime) {
                                                    this._pedalOnTime = -1
                                                }
                                                if (this._hasSustainOffSamples) {
                                                    this.noteOn(when, 0, 0, 127, "sustainOff")
                                                }
                                            } else {
                                                if (value > 64) {
                                                    this._pedalOnTime = when;
                                                    if (this._hasSustainOnSamples) {
                                                        this.noteOn(when, 0, 0, 127, "sustainOn")
                                                    }
                                                }
                                            }
                                            break;
                                        default:
                                    }
                                }
                            }
                        }
                    }
                }
                return this
            };
            SamplePlayer.prototype.noteOn = function(when, midiNote, transpose, velocity, value, volume, insertBus) {
                for (var ix = 0; ix < this._allVoices.length; ix++) {
                    var v = this._allVoices[ix];
                    if (v.source._sources.length == 0 || v.source.lastSource.playbackState == 3) {
                        this._allVoices.splice(ix, 1);
                        ix--
                    }
                }
                var note = this.getNote(midiNote + transpose, velocity, value);
                var targetPitch = Klang.Util.midiNoteToFrequency(midiNote + transpose);
                var rootPitch = Klang.Util.midiNoteToFrequency(note.root);
                var rate = targetPitch / rootPitch;
                if (note.root === -1) {
                    rate = 1
                }
                var copy = new Klang.Model.AudioSource(note.source.data, midiNote.toString());
                if (value === "noteOn") {
                    var newVoice = {
                        source: copy,
                        time: when,
                        velocity: velocity,
                        note: midiNote,
                        transpose: transpose
                    };
                    this._playingVoices.push(newVoice);
                    this._allVoices.push(newVoice)
                }
                if (insertBus) {
                    copy.connect(insertBus.input)
                } else {
                    if (this.destinationName) {
                        copy.connect(Klang.core.Core.instance.findInstance(this.destinationName).input)
                    } else {
                        copy.connect(Klang.core.Core.instance.findInstance(copy.destinationName).input)
                    }
                }
                when = when < Klang.Util.now() ? Klang.Util.now() : when;
                var vol = 0;
                if (volume) {
                    vol = volume * velocity / 128
                } else {
                    if (this._volumeCurve === "linear") {
                        vol = velocity / 128
                    } else {
                        if (this._volumeCurve === "exponential") {
                            vol = Math.abs(1 - Math.exp(velocity / 128))
                        } else {
                            if (this._volumeCurve === "none") {
                                vol = 1
                            }
                        }
                    }
                }
                vol *= copy.output.gain.value;
                copy.output.gain.cancelScheduledValues(when);
                copy.nextPlaybackRate = rate * this._currentPitch;
                copy.play(when);
                var attackWhen = Math.max(when + 0.0001, when + this._gainEG.attack);
                copy.output.gain.setValueAtTime(0, when);
                copy.output.gain.linearRampToValueAtTime(vol, attackWhen);
                if (copy.output.gain.setTargetAtTime) {
                    copy.output.gain.setTargetAtTime(vol * this._gainEG.sustain, attackWhen, this._gainEG.decay || 0.01)
                } else {
                    if (copy.output.gain.setTargetValueAtTime) {
                        copy.output.gain.setTargetValueAtTime(vol * this._gainEG.sustain, attackWhen, this._gainEG.decay)
                    }
                }
            };
            SamplePlayer.prototype.adsr = function(attack, decay, sustain, release) {
                var eg = this._gainEG;
                if (arguments.length === 0) {
                    return {
                        attack: eg.attack,
                        decay: eg.decay,
                        sustain: eg.sustain,
                        release: eg.release
                    }
                } else {
                    eg.attack = arguments[0] === undefined ? eg.attack : arguments[0];
                    eg.decay = arguments[1] === undefined ? eg.decay : arguments[1];
                    eg.sustain = arguments[2] === undefined ? eg.sustain : arguments[2];
                    eg.release = arguments[3] === undefined ? eg.release : arguments[3]
                }
                return this
            };
            SamplePlayer.prototype.noteOff = function(when, midiNote, velocity, value) {
                var note = this.getNote(midiNote, velocity, "noteOn");
                for (var i = 0; i < this._playingVoices.length; i++) {
                    if (!midiNote || midiNote.toString() === this._playingVoices[i].source._name) {
                        if (when > this._pedalOnTime && this._pedalOnTime > 0) {
                            if (this._sustained.length > this._maxNotes) {
                                this._sustained[0].source.stop(when + this._gainEG.release * this._stopFactor);
                                this._sustained.splice(0, 1)
                            }
                            this._sustained.push(this._playingVoices[i]);
                            this._playingVoices.splice(i, 1)
                        } else {
                            if (when < Klang.Util.now()) {
                                when = Klang.Util.now()
                            }
                            var val = this._playingVoices[i].source.output.gain.value;
                            this._playingVoices[i].source.output.gain.cancelScheduledValues(when);
                            if (when != Klang.Util.now() || Klang.detector.browser.name == "Firefox") {
                                this._playingVoices[i].source.output.gain.setValueAtTime(this._gainEG.sustain, when)
                            } else {
                                this._playingVoices[i].source.output.gain.setValueAtTime(val, when)
                            }
                            this._playingVoices[i].source.stop(when + this._gainEG.release * this._stopFactor);
                            this._playingVoices[i].source.output.gain.setTargetAtTime(0, when, this._gainEG.release);
                            if (this._hasNoteOffSamples) {
                                var t = Klang.Util.now() - this._playingVoices[i].time;
                                var v = Math.min(Math.exp(-t) / 3, 1);
                                this.noteOn(when, midiNote, this._playingVoices[i].transpose, this._playingVoices[i].velocity, value, v)
                            }
                            this._playingVoices.splice(i, 1)
                        }
                    }
                }
            };
            SamplePlayer.prototype.stop = function(when) {
                var when = when || Klang.Util.now();
                this.pedalRelease(when);
                for (var i = 0; i < this._playingVoices.length; i++) {
                    if (when < Klang.Util.now()) {
                        when = Klang.Util.now()
                    }
                    var val = this._playingVoices[i].source.output.gain.value;
                    this._playingVoices[i].source.output.gain.cancelScheduledValues(when);
                    this._playingVoices[i].source.output.gain.setValueAtTime(val, when);
                    this._playingVoices[i].source.stop(when + this._gainEG.release * this._stopFactor);
                    this._playingVoices[i].source.output.gain.setTargetAtTime(0, when, this._gainEG.release)
                }
                this._playingVoices = [];
                this._arpVoices = [];
                return this
            };
            SamplePlayer.prototype.deschedule = function() {
                for (var i = 0; i < this._allVoices.length; i++) {
                    this._allVoices[i].source.deschedule()
                }
                return this
            };
            SamplePlayer.prototype.pedalRelease = function(when) {
                for (var i = 0; i < this._sustained.length; i++) {
                    if (when < Klang.Util.now()) {
                        when = Klang.Util.now()
                    }
                    if (Klang.detector.browser.name == "Firefox") {
                        this._sustained[i].source.output.gain.linearRampToValueAtTime(0, when + 0.3);
                        this._sustained[i].source.stop(when + this._gainEG.release * this._stopFactor);
                        continue
                    }
                    this._sustained[i].source.output.gain.setTargetAtTime(0, when, this._gainEG.release);
                    if (this._hasNoteOffSamples) {
                        var t = Klang.Util.now() - this._sustained[i].time;
                        var v = Math.min(Math.exp(-t) / 3, 1);
                        this.noteOn(when, this._sustained[i].note, this._sustained[i].transpose, this._sustained[i].velocity, "noteOff", v)
                    }
                }
                this._sustained = []
            };
            SamplePlayer.prototype.getNote = function(note, velocity, value) {
                var i = 0;
                var val = this._content[i].value || "noteOn";
                while (velocity > this._content[i].highVelocity || value !== this._content[i].value) {
                    i++
                }
                var velocityLayer = i;
                var j = 0;
                while (note < this._content[velocityLayer].samples[j].startRange || note > this._content[velocityLayer].samples[j].endRange) {
                    j++
                }
                return this._content[velocityLayer].samples[j]
            };
            Object.defineProperty(SamplePlayer.prototype, "content", {
                get: function() {
                    return this._content
                },
                set: function(value) {
                    this._content = value;
                    this.init()
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SamplePlayer.prototype, "callbackFunction", {
                set: function(func) {
                    this._callback = func
                },
                enumerable: true,
                configurable: true
            });
            SamplePlayer.prototype.setData = function(data) {
                _super.prototype.setData.call(this, data);
                if (data.eg_gain) {
                    this._gainEG = data.eg_gain
                }
                if (data.content) {
                    this._content = data.content;
                    this.init()
                }
                if (data.volumeCurve) {
                    this._volumeCurve = data.volumeCurve
                }
            };
            return SamplePlayer
        }(Klang.Model.Synth);
        return Klang.Model.SamplePlayer = SamplePlayer
    });
    Module(function(Klang) {
        (function(SyncType) {
            SyncType._map = [];
            SyncType._map[0] = "Restart";
            SyncType.Restart = 0;
            SyncType._map[1] = "Playing";
            SyncType.Playing = 1;
            SyncType._map[2] = "All";
            SyncType.All = 2;
            SyncType._map[3] = "Continue";
            SyncType.Continue = 3
        }(Klang.Model.SyncType || (Klang.Model.SyncType = {})))
    });
    Module(function(Klang) {
        var SyncType = Klang.Model.SyncType;
        var Sequencer = function(_super) {
            Klang.Util.__extends(Sequencer, _super);

            function Sequencer(data, name) {
                _super.call(this);
                this._scheduler = null;
                this._started = false;
                this._bpm = 120;
                this._barLength = 4;
                this._beatLength = 1;
                this._resolution = 0.25;
                this._currentStep = 0;
                this._paused = false;
                this._maxSwing = 0.08;
                this._swingFactor = 0;
                this._lastBeat = -1;
                this._name = name;
                this._type = data.type;
                this._bpm = data.bpm || 120;
                this._barLength = data.bar_length || 4;
                this._beatLength = data.beat_length || 1;
                this._registeredPatterns = [];
                this._registeredSynths = [];
                this._syncHandler = new Klang.core.SyncHandler();
                this._syncedObjects = [];
                this._swingFactor = data.swing_factor || 0;
                Klang.core.Core.instance.pushToPreLoadInitStack(this)
            }
            Sequencer.prototype.init = function() {
                this._lookahead = Klang.core.Core.settings.sequencer_lookahead || 50;
                this._scheduleAheadTime = Klang.core.Core.settings.sequencer_schedule_ahead || 0.2;
                if (Klang.isIOS) {
                    this._scheduleAheadTime = Klang.core.Core.settings.sequencer_schedule_ahead_ios || 5
                }
                this._resolution = Klang.core.Core.settings.sequencer_resolution || 0.25
            };
            Sequencer.prototype.startScheduler = function() {
                if (!this._paused && Klang.context.currentTime !== 0) {
                    this._lastScheduleLoopTime = Klang.context.currentTime;
                    while (this._scheduleTime < Klang.context.currentTime + this._scheduleAheadTime) {
                        for (var ix = 0, len = this._registeredPatterns.length; ix < len; ix++) {
                            this._registeredPatterns[ix].update(this._currentStep, this._scheduleTime)
                        }
                        for (var jx = 0, len = this._registeredSynths.length; jx < len; jx++) {
                            this._registeredSynths[jx].update(this._currentStep, this._scheduleTime)
                        }
                        var currentStep = this.currentStep;
                        var currentBeat = Math.floor(currentStep);
                        if (currentBeat !== this._lastBeat) {
                            this.trigger("beforeNextBeat", currentBeat, this.getBeatTime(0) - this._scheduleTime, this._scheduleTime)
                        }
                        this._lastBeat = currentBeat;
                        this.trigger("progress", this._currentStep, this.getBeatTime(0) - this._scheduleTime, this._scheduleTime);
                        this._currentStep += this._resolution;
                        this._syncHandler.update(this._resolution);
                        if (this._swingFactor > 0) {
                            if (this._currentStep * 4 % 2) {
                                this._scheduleTime += (0.25 + this._maxSwing * this._swingFactor) * (60 / this._bpm)
                            } else {
                                this._scheduleTime += (0.25 - this._maxSwing * this._swingFactor) * (60 / this._bpm)
                            }
                        } else {
                            this._scheduleTime += 60 / this._bpm * this._resolution
                        }
                    }
                }
                var _this = this;
                this._scheduler = setTimeout(function() {
                    _this.startScheduler()
                }, _this._lookahead)
            };
            Sequencer.prototype.start = function() {
                if (!this._started) {
                    this._started = true;
                    this._scheduleTime = Klang.context.currentTime;
                    if (this._scheduleAheadTime <= 0.2) {
                        this._scheduleTime += 0.3
                    }
                    clearTimeout(this._scheduler);
                    this.startScheduler();
                    if (Klang.core.Core.callbacks && Klang.core.Core.callbacks.startSequencer) {
                        Klang.core.Core.callbacks.startSequencer({
                            name: this._name
                        })
                    }
                    this.trigger("start")
                }
                return this
            };
            Sequencer.prototype.pause = function() {
                this._paused = true;
                this._pauseOffset = this._scheduleTime - Klang.Util.now();
                for (var ix = 0, len = this._registeredPatterns.length; ix < len; ix++) {
                    this._registeredPatterns[ix].pause()
                }
                this.trigger("pause");
                return this
            };
            Sequencer.prototype.unpause = function() {
                this._paused = false;
                this._scheduleTime = Klang.Util.now() + this._pauseOffset;
                for (var ix = 0, len = this._registeredPatterns.length; ix < len; ix++) {
                    this._registeredPatterns[ix].unpause()
                }
                return this
            };
            Sequencer.prototype.reschedule = function() {
                clearTimeout(this._scheduler);
                var scheduled = this._scheduleTime - Klang.context.currentTime;
                var resolutionTime = this.getNoteTime(this._resolution);
                var scheduleOffset = scheduled > this._scheduleAheadTime ? scheduled - this._scheduleAheadTime : scheduled - (this._scheduleAheadTime - resolutionTime);
                var realScheduledSteps = (scheduled - scheduled % resolutionTime) / resolutionTime / (this._beatLength / this._resolution);
                var scheduledSteps = this._scheduleAheadTime / resolutionTime / (this._beatLength / this._resolution);
                this._scheduleTime = Klang.context.currentTime + scheduleOffset;
                if (realScheduledSteps < scheduledSteps) {
                    this._scheduleTime -= resolutionTime
                }
                this._currentStep -= scheduledSteps;
                if (isNaN(this._currentStep) || this._currentStep < 0) {
                    this._currentStep = 0
                }
                for (var ix = 0, len = this._registeredPatterns.length; ix < len; ix++) {
                    this._registeredPatterns[ix].deschedule(scheduledSteps)
                }
                this.startScheduler();
                return this
            };
            Sequencer.prototype.stop = function() {
                this._started = false;
                clearTimeout(this._scheduler);
                this._scheduler = null;
                this._started = false;
                if (Klang.core.Core.callbacks && Klang.core.Core.callbacks.stopSequencer) {
                    Klang.core.Core.callbacks.stopSequencer({
                        name: this._name
                    })
                }
                return this
            };
            Sequencer.prototype.stopAll = function(params) {
                var exceptions = [];
                for (var _i = 0; _i < arguments.length - 1; _i++) {
                    exceptions[_i] = arguments[_i + 1]
                }
                var beat = params.beat !== undefined ? params.beat : 4;
                var fadeTime = params.fadeTime === undefined ? 0 : params.fadeTime;
                var forceFade = params.forceFade || false;
                var wait = params.wait || 0;
                for (var ix = 0, len = this._registeredPatterns.length; ix < len; ix++) {
                    if (exceptions.indexOf(this._registeredPatterns[ix]) == -1) {
                        this._registeredPatterns[ix].forceFade = forceFade;
                        this._registeredPatterns[ix].stop(beat, true, fadeTime, wait)
                    }
                }
                return this
            };
            Sequencer.prototype.restart = function() {
                this._currentStep = 0;
                return this
            };
            Sequencer.prototype.registerPattern = function(pattern) {
                this._registeredPatterns.push(pattern);
                return this
            };
            Sequencer.prototype.unregisterPattern = function(pattern) {
                var index = this._registeredPatterns.indexOf(pattern);
                this._registeredPatterns.splice(index, 1);
                return this
            };
            Sequencer.prototype.registerSynth = function(synth) {
                if (this._registeredSynths.indexOf(synth) == -1) {
                    this._registeredSynths.push(synth)
                }
                return this
            };
            Sequencer.prototype.unregisterSynth = function(synth) {
                var index = this._registeredPatterns.indexOf(synth);
                this._registeredSynths.splice(index, 1);
                return this
            };
            Sequencer.prototype.sync = function(process, beatModifier, args) {
                return this.syncInSteps(process, this.getStepsToNext(this.beatLength * beatModifier), args)
            };
            Sequencer.prototype.syncInSteps = function(process, steps, args) {
                if (!this._started) {
                    this.start()
                }
                var scheduleTime = this.getNoteTime(steps) + this._scheduleTime;
                if (!args) {
                    args = [scheduleTime]
                } else {
                    if (args.length) {
                        args.push(scheduleTime)
                    }
                }
                this._syncHandler.addSyncCountdown(new SyncCountdown(steps, process, args));
                return this
            };
            Sequencer.prototype.quantizeDuration = function(duration, beat) {
                var bpm = this.bpm;
                var spb = 60 / bpm;
                var bps = bpm / 60;
                var beatLen = Math.floor(duration / spb);
                return beatLen * bps
            };
            Sequencer.prototype.syncCallback = function(cb, beatQuant, offset, minOffset) {
                minOffset = minOffset || 0;
                offset = offset || 0;
                beatQuant = beatQuant || 1;
                var _this = this;
                var handler = function(scheduleBeat, _, scheduleTime) {
                    var beatMod = scheduleBeat % beatQuant;
                    if (beatMod === offset && minOffset <= 0) {
                        _this.off("beforeNextBeat", handler);
                        cb(scheduleBeat, scheduleTime)
                    }
                    minOffset--
                };
                this._syncCallbackContext = this._syncCallbackContext || {
                    ctx: this
                };
                this.on("beforeNextBeat", handler, this._syncCallbackContext)
            };
            Sequencer.prototype.cancelCallbacks = function() {
                if (this._syncCallbackContext) {
                    this.off("beforeNextBeat", null, this._syncCallbackContext)
                }
            };
            Sequencer.prototype.syncPattern = function(params) {
                var patterns = [];
                for (var _i = 0; _i < arguments.length - 1; _i++) {
                    patterns[_i] = arguments[_i + 1]
                }
                var beat = params.beat || 0;
                var fadeIn = params.fadeIn || false;
                var duration = params.duration || 1;
                var absolute = params.absolute === undefined ? false : params.absolute;
                var syncType = params.syncType !== undefined ? params.syncType : 3;
                var offset = params.offset;
                var wait = params.wait || 0;
                var steps;
                var first;
                if (!this._started) {
                    this._currentStep = 0;
                    this.start();
                    steps = beat = 0;
                    first = true
                }
                var syncStep;
                var restart = false;
                if (syncType === SyncType.Restart) {
                    syncStep = 0;
                    restart = true
                } else {
                    if (syncType === SyncType.Playing) {
                        var longest = 0;
                        var longestId = -1;
                        for (var ix = 0, len = patterns.length; ix < len; ix++) {
                            if (patterns[ix].state === 1) {
                                if (patterns[ix].length > longest) {
                                    longest = patterns[ix].length;
                                    longestId = ix
                                }
                            }
                        }
                        var nextBar = 0;
                        if (longestId > -1) {
                            nextBar = patterns[longestId].getNextBar(beat)
                        }
                        syncStep = nextBar * beat;
                        if (nextBar > 0 && wait > 0) {
                            syncStep += wait
                        }
                    } else {
                        if (syncType === SyncType.All) {
                            var longest = 0;
                            var longestId = -1;
                            for (var ix = 0, len = this._registeredPatterns.length; ix < len; ix++) {
                                if (this._registeredPatterns[ix].state === 1 || this._registeredPatterns[ix].state === 2) {
                                    if (this._registeredPatterns[ix].length > longest) {
                                        longest = this._registeredPatterns[ix].length;
                                        longestId = ix
                                    }
                                }
                            }
                            var nextStep = 0;
                            if (longestId > -1) {
                                nextStep = this._currentStep + this.getStepsToNext(beat)
                            }
                            syncStep = nextStep
                        } else {
                            if (syncType === SyncType.Continue) {
                                syncStep = 0;
                                restart = first ? true : false
                            }
                        }
                    }
                }
                if (absolute != false) {
                    if (typeof absolute == "number") {
                        steps = this.getStepsToNext(this.beatLength * absolute) + this.beatLength * beat
                    } else {
                        steps = this.beatLength * beat
                    }
                } else {
                    if (beat > 0) {
                        steps = this.getStepsToNext(this.beatLength * beat)
                    } else {
                        if (beat == 0) {
                            steps = 0
                        }
                    }
                }
                if (wait > 0) {
                    steps += wait
                }
                for (var ix = 0, len = patterns.length; ix < len; ix++) {
                    if (offset !== undefined) {
                        offset = this.getNoteTime(offset)
                    }
                    patterns[ix].prePlaySchedule(steps, syncStep, restart, fadeIn, duration, offset)
                }
                if (first) {
                    var scheduled = this._scheduleTime - Klang.context.currentTime;
                    var resolutionTime = this.getNoteTime(this._resolution);
                    var scheduleOffset = scheduled > this._scheduleAheadTime ? scheduled - this._scheduleAheadTime : scheduled - (this._scheduleAheadTime - resolutionTime);
                    this._scheduleTime = Klang.context.currentTime + scheduleOffset;
                    if (restart) {
                        this._currentStep = patterns[0]._currentStep - this._resolution
                    } else {
                        this._currentStep = patterns[0]._currentStep
                    }
                    first = false
                } else {
                    if (this._scheduleAheadTime > 0.5) {
                        this.reschedule()
                    }
                }
                return this
            };
            Sequencer.prototype.registerBPMSync = function(obj) {
                if (this._syncedObjects.indexOf(obj) == -1) {
                    this._syncedObjects.push(obj)
                }
                return this
            };
            Sequencer.prototype.unregisterBPMSync = function(obj) {
                var index = this._syncedObjects.indexOf(obj);
                if (index != -1) {
                    this._syncedObjects.splice(index, 1)
                }
                return this
            };
            Sequencer.prototype.getStepsToNext = function(x) {
                if (x == 0) {
                    return 0
                }
                return x - this._currentStep % x
            };
            Sequencer.prototype.getNoteTime = function(note) {
                if (note === undefined) {
                    note = 1
                }
                return 60 / this._bpm * note
            };
            Sequencer.prototype.getBeatTime = function(x) {
                return this.getNoteTime(this.getStepsToNext(x)) + this._scheduleTime
            };
            Object.defineProperty(Sequencer.prototype, "started", {
                get: function() {
                    return this._started
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sequencer.prototype, "paused", {
                get: function() {
                    return this._paused
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sequencer.prototype, "bpm", {
                get: function() {
                    return this._bpm
                },
                set: function(value) {
                    this._bpm = value;
                    for (var ix = 0, len = this._registeredPatterns.length; ix < len; ix++) {
                        if (this._registeredPatterns[ix]._type == "MidiPattern") {
                            this._registeredPatterns[ix].recalculateBPM(this._bpm)
                        }
                    }
                    for (var ix = 0, len = this._syncedObjects.length; ix < len; ix++) {
                        this._syncedObjects[ix].updateSync(this._bpm)
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sequencer.prototype, "scale", {
                set: function(scale) {
                    for (var ix = 0, len = this._registeredPatterns.length; ix < len; ix++) {
                        if (this._registeredPatterns[ix]._type == "MidiPattern") {
                            this._registeredPatterns[ix].scale = scale
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sequencer.prototype, "customScale", {
                set: function(obj) {
                    for (var ix = 0, len = this._registeredPatterns.length; ix < len; ix++) {
                        if (this._registeredPatterns[ix]._type == "MidiPattern") {
                            this._registeredPatterns[ix].customScale = obj
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sequencer.prototype, "transpose", {
                set: function(transpose) {
                    for (var ix = 0, len = this._registeredPatterns.length; ix < len; ix++) {
                        if (this._registeredPatterns[ix]._type == "MidiPattern") {
                            if (transpose === 0) {
                                this._registeredPatterns[ix].resetTranspose()
                            } else {
                                this._registeredPatterns[ix].transpose += transpose
                            }
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sequencer.prototype, "resolution", {
                get: function() {
                    return this._resolution
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sequencer.prototype, "barLength", {
                get: function() {
                    return this._barLength
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sequencer.prototype, "beatLength", {
                get: function() {
                    return this._beatLength
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sequencer.prototype, "currentStep", {
                get: function() {
                    return this._currentStep
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sequencer.prototype, "swingFactor", {
                set: function(val) {
                    this._swingFactor = val
                },
                enumerable: true,
                configurable: true
            });
            Sequencer.prototype.setData = function(data) {
                this._bpm = data.bpm || 120;
                this._barLength = data.measure_length || 4;
                this._beatLength = data.beat_length || 1;
                this._swingFactor = data.swing_factor || 0
            };
            return Sequencer
        }(Klang.core.EventEmitter);
        return Klang.Model.Sequencer = Sequencer
    });
    Module(function(Klang) {
        var Process = function() {
            function Process(data) {
                this._vars = data.vars;
                Klang.core.Core.instance.pushToPreLoadInitStack(this)
            }
            Process.prototype.init = function() {
                for (var ix = 0, len = this._vars.length; ix < len; ix++) {
                    var n = this._vars[ix];
                    this._destination = this._actionData[n] = Klang.core.Core.instance.findInstance(n)
                }
                this._vars = null
            };
            Process.prototype.start = function(args) {
                Klang.warn("Process: Invocation of abstract method")
            };
            Process.prototype.destination = function() {
                return this._destination
            };
            Process.prototype.execute = function(action, args, noCache) {
                if (typeof action === "function") {
                    action(Klang.core.Core, Klang.Model, Klang.Util, this._actionData, args, Klang.Util.vars)
                } else {
                    if (!this._func || noCache) {
                        this._func = new Function("Core", "Model", "Util", "me", "args", "vars", action)
                    }
                    return this._func(Klang.core.Core, Klang.Model, Klang.Util, this._actionData, args, Klang.Util.vars)
                }
            };
            return Process
        }();
        return Klang.core.Process = Process
    });
    Module(function(Klang) {
        var SimpleProcess = function(_super) {
            Klang.Util.__extends(SimpleProcess, _super);

            function SimpleProcess(data, name) {
                _super.call(this, data);
                this._name = name;
                this.data = data;
                this._type = data.type;
                this._action = data.action;
                this._actionData = {}
            }
            SimpleProcess.prototype.start = function(args) {
                try {
                    this.execute(this._action, args)
                } catch (ex) {
                    Klang.err("Klang: error in process '" + this._name + "': " + ex.name + ": " + ex.message)
                }
            };
            SimpleProcess.prototype.setData = function(data) {
                this._action = data.action;
                this._vars = data.vars;
                this.init();
                this._func = new Function("Core", "Model", "Util", "me", "args", "vars", this._action)
            };
            return SimpleProcess
        }(Klang.core.Process);
        Klang.Model.SimpleProcess = SimpleProcess;
        var AdvancedProcess = function(_super) {
            Klang.Util.__extends(AdvancedProcess, _super);

            function AdvancedProcess(data, name) {
                _super.call(this, data);
                this._nextStartTime = 0;
                this._waitOffset = 0;
                this.SCHEDULE_AHEAD_TIME = 0.2;
                this._lastTime = 0;
                this._name = name;
                this._type = data.type;
                this._preAction = data.pre_action || null;
                this._actions = data.actions;
                this._currentAction = 0;
                this._started = false;
                this._loop = data.loop !== undefined ? data.loop : false;
                this._loopTime = data.loopTime || -1;
                this._actionData = {
                    process: this
                };
                if (this._loop) {
                    var waitFound = false;
                    for (var ix = 0, len = this._actions.length; ix < len; ix++) {
                        if (this._actions[ix].operation == "wait") {
                            waitFound = true;
                            break
                        }
                    }
                    if (!waitFound) {
                        Klang.warn("Process: Infinite loop found in process '" + this._name + "'")
                    }
                }
            }
            AdvancedProcess.prototype.start = function(args) {
                if (Klang.isIOS) {
                    return
                }
                try {
                    this._args = args;
                    this._currentAction = 0;
                    this._execTime = 0;
                    this._startTime = Klang.context.currentTime;
                    this._nextStartTime = this._startTime;
                    if (this._preAction) {
                        if (this._preAction.operation == "exec") {
                            this.execute(this._preAction.script, this._args)
                        } else {
                            if (this._preAction.operation == "wait") {
                                this._execTime = this.execute(this._preAction.script, this._args);
                                this._waitOffset += this._execTime;
                                if (this._execTime >= this.SCHEDULE_AHEAD_TIME) {
                                    TimeHandler.instance.registerMethodCallback(this, "cont", this._execTime - this.SCHEDULE_AHEAD_TIME / 2)
                                } else {
                                    this.cont()
                                }
                                return
                            }
                        }
                    }
                    this._started = true;
                    this.cont()
                } catch (ex) {
                    Klang.err("Klang: error in process '" + this._name + "': " + ex.name + ": " + ex.message)
                }
            };
            AdvancedProcess.prototype.cont = function() {
                this._actionData.execTime = this._nextStartTime + this._waitOffset;
                for (var len = this._actions.length; this._currentAction < len; this._currentAction++) {
                    if (!this._started) {
                        return
                    }
                    var action = this._actions[this._currentAction];
                    if (action.operation == "exec") {
                        this.execute(action.script, this._args, true);
                        this._execTime = 0
                    } else {
                        if (action.operation == "wait") {
                            this._execTime = this.execute(action.script, this._args, true);
                            this._waitOffset += this._execTime;
                            if (this._execTime >= this.SCHEDULE_AHEAD_TIME) {
                                TimeHandler.instance.registerMethodCallback(this, "cont", this._execTime - this.SCHEDULE_AHEAD_TIME / 2)
                            } else {
                                if (this._waitOffset > this.SCHEDULE_AHEAD_TIME) {
                                    this.scheduleLoop(this._waitOffset)
                                } else {
                                    this._currentAction++;
                                    this.cont()
                                }
                            }
                            this._currentAction++;
                            return
                        }
                    }
                }
                if (this._loop) {
                    if (this._loopTime > 0) {
                        this.scheduleLoop(this._loopTime)
                    } else {
                        this._waitOffset = 0;
                        this._currentAction = 0;
                        this.cont()
                    }
                }
            };
            AdvancedProcess.prototype.scheduleLoop = function(loopTime) {
                if (!this._started) {
                    return
                }
                this._nextStartTime += loopTime;
                var timeTilNext = this._nextStartTime - Klang.context.currentTime;
                var _this = this;
                var loopTimeoutId = setTimeout(function() {
                    _this._waitOffset = 0;
                    _this._currentAction = 0;
                    _this.cont()
                }, (timeTilNext - this.SCHEDULE_AHEAD_TIME / 2) * 1000)
            };
            AdvancedProcess.prototype.stop = function() {
                this._started = false;
                TimeHandler.instance.removeMethodCallback(this, "cont")
            };
            Object.defineProperty(AdvancedProcess.prototype, "started", {
                get: function() {
                    return this._started
                },
                enumerable: true,
                configurable: true
            });
            AdvancedProcess.prototype.setData = function(data) {
                this._actions = data.actions;
                this._vars = data.vars;
                this.init()
            };
            return AdvancedProcess
        }(Klang.core.Process);
        return Klang.Model.AdvancedProcess = AdvancedProcess
    });
    Module(function(Klang) {
        Klang.engines.webAudio.Util.createAudioContext = function(desiredSampleRate) {
            var AudioCtor = window.AudioContext || window.webkitAudioContext;
            desiredSampleRate = typeof desiredSampleRate === "number" ? desiredSampleRate : 44100;
            var context = new AudioCtor();
            if (/(iPhone|iPad)/i.test(navigator.userAgent) && context.sampleRate !== desiredSampleRate) {
                var buffer = context.createBuffer(1, 1, desiredSampleRate);
                var dummy = context.createBufferSource();
                dummy.buffer = buffer;
                dummy.connect(context.destination);
                dummy.start(0);
                dummy.disconnect();
                context.close();
                context = new AudioCtor()
            }
            return context
        }
    });
    Module(function(Klang) {});
    Module(function(Klang) {
        var StreamingAudioSource = function(_super) {
            Klang.Util.__extends(StreamingAudioSource, _super);

            function StreamingAudioSource(data, name) {
                _super.call(this, data, name);
                this._sources = [];
                this._startTime = 0;
                this._loopStartTime = 0;
                this._scheduleAhead = 0.2;
                this._stopping = false;
                this._fading = false;
                this._paused = false;
                this._pauseTime = -1;
                this._connected = false;
                this._durationTimeout = 0;
                this._pauseStartTime = -1;
                this._audioElement = new Audio();
                this.data = data;
                this.editorName = data.editorName;
                this._fileId = data.file_id;
                this._playbackRate = data.playback_rate || 1;
                this._endTime = 0;
                this._loop = data.loop !== undefined ? data.loop : false;
                this._loopStart = data.loop_start;
                this._loopEnd = data.loop_end;
                this._offset = data.offset || 0;
                this._duration = data.duration || 0;
                this._reverse = data.reverse;
                this._retrig = data.retrig !== undefined ? data.retrig : true;
                this._lockPlaybackrate = data.lock_playback_rate !== undefined ? data.lock_playback_rate : false;
                this._volumeStartRange = data.volume_start_range;
                this._volumeEndRange = data.volume_end_range;
                this._pitchStartRange = data.pitch_start_range;
                this._pitchEndRange = data.pitch_end_range;
                if (data.panner) {
                    this._panner = data.panner
                }
                if (!Klang.core.Core.instance.pushToPostLoadInitStack(this)) {
                    this.init()
                }
            }
            StreamingAudioSource.prototype.init = function() {
                var self = this;
                this._audioElement.crossOrigin = "anonymous";
                if (this._fileId) {
                    if (typeof this._fileId == "string") {
                        var info = FileHandler.instance.getFileInfo(this._fileId);
                        var format = ".mp3";
                        if (Klang.detector.browser.name === "Firefox" || Klang.detector.browser.name === "Chrome") {
                            format = ".ogg"
                        }
                        var url = (info.external ? "" : FileHandler.instance._baseURL) + info.url + format;
                        this._buffer = url;
                        this._audioElement.src = this._buffer
                    } else {
                        if (this._fileId.sampleRate) {
                            this._buffer = this._fileId
                        }
                    }
                }
                if (!this._buffer) {
                    return
                }
                if (!this._duration) {
                    this._audioElement.addEventListener("loadedmetadata", function(_event) {
                        self._duration = self._audioElement.duration;
                        console.log("got duration")
                    })
                }
            };
            StreamingAudioSource.prototype.setLoopRegion = function(loopStart, loopEnd) {
                this._loopStart = loopStart || this._loopStart;
                this._loopEnd = loopEnd || this._loopEnd;
                for (var ix = 0, len = this._sources.length; ix < len; ix++) {
                    var source = this._sources[ix];
                    source.loopStart = this._loopStart;
                    source.loopEnd = this._loopEnd
                }
                return this
            };
            StreamingAudioSource.prototype.connect = function(destination, forceConnect) {
                console.log("connect");
                if (!this._destination || forceConnect) {
                    this._destination = destination;
                    if (this._panner) {
                        this._output.connect(this._panner.input);
                        this._panner.output.connect(destination)
                    } else {
                        this._output.connect(destination)
                    }
                }
                return this
            };
            StreamingAudioSource.prototype.disconnect = function() {
                this._output.disconnect();
                this._destination = null;
                if (this._panner) {
                    this._panner.output.disconnect()
                }
                return this
            };
            StreamingAudioSource.prototype.scheduleGrain = function() {
                if (!this._buffer) {
                    return
                }
                var g = this._granular;
                var source = Klang.context.createMediaElementSource();
                source.buffer = this._buffer;
                var r1 = Math.random();
                var r2 = Math.random();
                var r3 = Math.random();
                var r4 = Math.random();
                var r5 = Math.random();
                r1 = (r1 - 0.5) * 2;
                r2 = (r2 - 0.5) * 2;
                r3 = (r3 - 0.5) * 2;
                r4 = (r4 - 0.5) * 2;
                var grainWindowNode = Klang.context.createGain();
                source.connect(grainWindowNode);
                grainWindowNode.connect(this._output);
                var totalPitch = this._granular.pitch + r1 * g.pitchRandomization;
                var pitchRate = Math.pow(2, totalPitch / 1200);
                source.playbackRate.value = pitchRate;
                var randomGrainOffset = r2 * g.timeRandomization;
                source.start(g.realTime, g.grainTime + randomGrainOffset, g.grainDuration);
                var windowDuration = g.grainDuration / pitchRate;
                grainWindowNode.gain.value = 0;
                grainWindowNode.gain.setValueCurveAtTime(g.grainWindow, g.realTime, windowDuration);
                var lastGrainTime = g.grainTime;
                g.realTime += g.grainSpacing;
                g.grainTime += g.speed * g.grainSpacing;
                if (g.grainTime > g.bufferDuration) {
                    g.grainTime = 0;
                    if (!this._loop) {
                        this.stop()
                    }
                }
                if (g.grainTime < 0) {
                    g.grainTime += g.bufferDuration;
                    if (!this._loop) {
                        this.stop()
                    }
                }
            };
            StreamingAudioSource.prototype.play = function(when, offset, duration, resume) {
                var now = Klang.context.currentTime;
                clearTimeout(this._stopTimeout);
                if (this._playing) {
                    this.stop(when)
                }
                this._playing = true;
                if (when === undefined) {
                    when = 0
                }
                if (offset === undefined) {
                    offset = 0
                }
                if (resume === undefined) {
                    resume = false
                }
                this.removeUnusedSources();
                if (!duration) {
                    if (this._loop) {
                        duration = 9999999999
                    } else {
                        duration = this._duration
                    }
                }
                if (!this._buffer) {
                    this.init();
                    if (!this._buffer) {
                        Klang.warn("StreamingAudioSource: File not found!", this._name);
                        return
                    }
                }
                when = when || 0;
                if (when != 0 && when + 0.01 <= now) {
                    Klang.warn("StreamingAudioSource: Returned, playTime < currentTime", this._name);
                    return this
                } else {
                    if (when == 0) {
                        when = now
                    }
                }
                this.output.gain.cancelScheduledValues(when);
                this.output.gain.setValueAtTime(this._volume, when);
                if (!this.paused) {
                    this._pauseStartTime = when
                }
                if (!resume) {
                    this._pauseTime = 0
                }
                this._startTime = when;
                this._loopStartTime = when + this.duration;
                this._paused = false;
                if (this._stopping && !this._retrig) {
                    this.output.gain.cancelScheduledValues(when);
                    this.output.gain.setValueAtTime(this.output.gain.value, when);
                    this.output.gain.linearRampToValueAtTime(this._volume, when + 0.25);
                    clearTimeout(this._stoppingId);
                    this._stopping = false;
                    return
                }
                this._fading = false;
                if (!this._retrig && !this.loop) {
                    if (when < this._endTime) {
                        return
                    }
                } else {
                    if (this.loop && !this._retrig) {
                        if (this._endTime == -1 || when < this._endTime) {
                            return
                        }
                    } else {
                        if (this.loop && this._retrig && this.playing && !this._stopping) {
                            return
                        } else {
                            if (this._stopping) {
                                this._stopping = false
                            } else {
                                if (Math.round(this._endTime * 1000) / 1000 == Math.round((when + this._buffer.duration) * 1000) / 1000) {
                                    Klang.warn("StreamingAudioSource: Returned, Doubletrig", this._name);
                                    return this
                                }
                            }
                        }
                    }
                }
                this._endTime = this.loop ? -1 : when + this._buffer.duration;
                var source = this.createMediaElementSource();
                if (this._loop) {
                    source.loop = true;
                    source.loopStart = this._loopStart ? this._loopStart : 0;
                    source.loopEnd = this._loopEnd ? this._loopEnd : this._buffer.duration
                }
                if (!this._destination) {
                    Klang.warn("StreamingAudioSource: no destination node")
                }
                if (typeof this._destination != "object") {
                    Klang.warn("StreamingAudioSource: destination is not an object", this._name)
                }
                if (!this._connected) {
                    source.connect(this._output);
                    this._connected = true
                }
                if (offset > this._duration) {
                    offset = offset % this._duration
                }
                this._startOffset = this._offset + offset;
                source.startTime = when;
                if (this._loop) {
                    source.start(when, this._startOffset, duration)
                } else {
                    var whenDelta = when - now;
                    if (duration) {
                        this._durationTimeout = setTimeout(function() {
                            this.stop(0)
                        }.bind(this), (whenDelta + duration) * 1000)
                    }
                    if (whenDelta > 0) {
                        this._playTimeout = setTimeout(function() {
                            this._audioElement.currentTime = this._startOffset;
                            this._audioElement.play()
                        }.bind(this), whenDelta * 1000)
                    } else {
                        this._audioElement.currentTime = this._startOffset;
                        this._audioElement.play()
                    }
                }
                if (Klang.core.Core.callbacks && Klang.core.Core.callbacks.scheduleStreamingAudioSource) {
                    Klang.core.Core.callbacks.scheduleStreamingAudioSource({
                        audio: this,
                        startTime: when
                    })
                }
                return this
            };
            StreamingAudioSource.prototype.getNumberOfSamples = function() {
                return this._buffer.length
            };
            StreamingAudioSource.prototype.stop = function(when) {
                if (typeof when === "undefined") {
                    when = 0
                }
                clearTimeout(this._playTimeout);
                clearTimeout(this._durationTimeout);
                if (this._stopping) {
                    this._stopping = false;
                    clearTimeout(this._stoppingId)
                }
                var numSources = this._sources.length;
                if (numSources > 0) {
                    when = when || Klang.Util.now();
                    if (this._loop) {
                        this._loopPlaying = false
                    }
                    this._endTime = when;
                    if (this._retrig) {
                        this._sources[this._sources.length - 1].stop(when);
                        this._sources.splice(this._sources.length - 1, 1)
                    } else {
                        for (var ix = 0; ix < numSources; ix++) {
                            var source = this._sources[ix];
                            source.stop(when);
                            this._endTime = Klang.Util.now()
                        }
                        this._sources = []
                    }
                } else {
                    this._loopPlaying = false
                }
                var whenDelta = when - Klang.context.currentTime;
                if (whenDelta > 0) {
                    this._stopTimeout = setTimeout(function() {
                        this._audioElement.pause()
                    }.bind(this), whenDelta * 1000);
                    this._stopping = true
                } else {
                    this._audioElement.pause()
                }
                this._playing = false;
                return this
            };
            StreamingAudioSource.prototype.deschedule = function() {
                for (var ix = 0; ix < this._sources.length; ix++) {
                    var source = this._sources[ix];
                    if (source.startTime > Klang.context.currentTime) {
                        source.stop(0);
                        this._sources[ix].disconnect();
                        source.disconnect();
                        this._sources.splice(ix, 1);
                        ix--
                    }
                }
                return this
            };
            StreamingAudioSource.prototype.pause = function() {
                if (this._endTime > Klang.Util.now()) {
                    this._paused = true;
                    var pauseDelta = Klang.Util.now() - this._startTime;
                    this._pauseTime += pauseDelta;
                    this.stop()
                }
                return this
            };
            StreamingAudioSource.prototype.unpause = function() {
                if (this.paused) {
                    var realOffset = this._offset;
                    this._offset += this._pauseTime;
                    this.play(0, 0, null, true);
                    this._offset = realOffset;
                    this._paused = false
                }
                return this
            };
            StreamingAudioSource.prototype.createMediaElementSource = function() {
                if (!this._connected) {
                    var source = Klang.context.createMediaElementSource(this._audioElement);
                    this._source = source
                } else {
                    var source = this._source
                }
                return source
            };
            StreamingAudioSource.prototype.fadeInAndPlay = function(fadeDuration, when, offset, duration) {
                if (typeof offset === "undefined") {
                    offset = 0
                }
                if (typeof duration === "undefined") {
                    duration = this._duration
                }
                var now = Klang.context.currentTime;
                if (!when) {
                    when = now
                }
                if (this.loop && (!this._retrig && (this._endTime == -1 || when < this._endTime)) && !this._stopping) {
                    return
                } else {
                    if (this.loop && this._retrig && this.playing && !this._stopping) {
                        return
                    }
                }
                this.output.gain.cancelScheduledValues(when);
                if (this._stopping && !this._retrig) {
                    clearTimeout(this._stoppingId);
                    this.output.gain.setValueAtTime(this.output.gain.value, when)
                } else {
                    if (this._stopping && this._retrig) {
                        this._fading = true;
                        this.play(when == now ? 0 : when, offset, duration);
                        var fadeGain = Klang.context.createGain();
                        this._sources[this._sources.length - 1].disconnect();
                        this._sources[this._sources.length - 1].connect(fadeGain);
                        fadeGain.connect(this.output);
                        fadeGain.gain.setValueAtTime(0, when);
                        fadeGain.gain.linearRampToValueAtTime(1, when + fadeDuration);
                        this._stopping = false;
                        return
                    } else {
                        this._fading = true;
                        this.play(when == now ? 0 : when, offset, duration);
                        this.output.gain.setValueAtTime(0, when)
                    }
                }
                this._stopping = false;
                this.output.gain.linearRampToValueAtTime(this._volume, when + fadeDuration);
                return this
            };
            StreamingAudioSource.prototype.fadeOutAndStop = function(duration, when) {
                if (!this.playing) {
                    return
                }
                if (when === undefined) {
                    when = Klang.context.currentTime
                }
                if (this._stopping) {
                    clearTimeout(this._stoppingId)
                }
                if (this._retrig && !this._stopping) {
                    var fadeGain = Klang.context.createGain();
                    this._sources[this._sources.length - 1].disconnect();
                    this._sources[this._sources.length - 1].connect(fadeGain);
                    var _this = this;
                    if (this._sources[this._sources.length - 1].onended !== undefined) {
                        this._sources[this._sources.length - 1].onended = function() {
                            _this._stopping = false
                        }
                    } else {
                        this._stoppingId = setTimeout(function() {
                            _this._stopping = false
                        }, (duration + (when - Klang.Util.now()) - _this._scheduleAhead) * 10000)
                    }
                    fadeGain.connect(this.output);
                    fadeGain.gain.setValueAtTime(1, when);
                    fadeGain.gain.linearRampToValueAtTime(0, when + duration);
                    this.stop(when + duration)
                } else {
                    if (!this._retrig) {
                        this.output.gain.cancelScheduledValues(when);
                        this.output.gain.setValueAtTime(this.output.gain.value || this._volume, when);
                        this.output.gain.linearRampToValueAtTime(0, when + duration);
                        var _this = this;
                        this._stoppingId = setTimeout(function() {
                            if (!_this._stopping) {
                                return
                            }
                            _this._stopping = false;
                            if (_this.loop) {
                                _this._loopPlaying = false
                            }
                            _this.stop(when + duration)
                        }, (duration + (when - Klang.Util.now()) - _this._scheduleAhead) / 0.001)
                    }
                }
                this._stopping = true;
                return this
            };
            StreamingAudioSource.prototype.removeUnusedSources = function() {
                for (var ix = 0; ix < this._sources.length; ix++) {
                    var source = this._sources[ix];
                    if (!source.buffer || !this.loop && source.startTime + source.buffer.duration < Klang.context.currentTime) {
                        this._sources[ix].disconnect();
                        this._sources.splice(ix, 1);
                        ix--
                    }
                }
            };
            StreamingAudioSource.prototype.curvePlaybackRate = function(value, duration, when) {
                if (this._lockPlaybackrate) {
                    return
                }
                var startTime = when ? when : Klang.Util.now();
                var node = this.playbackRateNode;
                if (node) {
                    node.cancelScheduledValues(startTime);
                    node.setValueAtTime(node.value == 0 ? Klang.Util.EXP_MIN_VALUE : node.value, startTime);
                    node.exponentialRampToValueAtTime(value, startTime + duration)
                }
                this._playbackRate = value;
                return this
            };
            Object.defineProperty(StreamingAudioSource.prototype, "lastSource", {
                get: function() {
                    var numSources = this._sources.length;
                    if (numSources == 0) {
                        return null
                    }
                    return this._sources[numSources - 1]
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "loop", {
                get: function() {
                    return this._loop
                },
                set: function(value) {
                    this._loop = value
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "offset", {
                get: function() {
                    return this._offset
                },
                set: function(value) {
                    if (typeof value === "string" && value.indexOf("%") !== -1) {
                        value = this._duration * parseFloat(value)
                    }
                    this._offset = value
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "position", {
                get: function() {
                    if (!this.playing || !this._duration) {
                        return 0
                    }
                    var duration = this._duration;
                    if (this._loopStart || this._loopEnd) {
                        duration = (this._loopEnd || duration) - (this._loopStart || 0)
                    }
                    var timePlayed = Klang.Util.now() - this._startTime;
                    var loopTimePlayed = Klang.Util.now() + this._startOffset - this._loopStartTime;
                    if (this._startOffset + timePlayed > this._duration) {
                        return this._loopStart + loopTimePlayed % duration
                    } else {
                        return this._startOffset + timePlayed
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "duration", {
                get: function() {
                    return this._duration
                },
                set: function(value) {
                    this._duration = value
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "paused", {
                get: function() {
                    return this._paused
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "playbackRate", {
                get: function() {
                    return this._playbackRate
                },
                set: function(value) {
                    if (this._lockPlaybackrate) {
                        return
                    }
                    var node = this.playbackRateNode;
                    if (node) {
                        node.cancelScheduledValues(Klang.Util.now())
                    }
                    this._playbackRate = value;
                    for (var ix = 0, len = this._sources.length; ix < len; ix++) {
                        this._sources[ix].playbackRate.value = this._playbackRate
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "nextPlaybackRate", {
                set: function(value) {
                    if (this._lockPlaybackrate) {
                        return
                    }
                    this._playbackRate = value
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "playbackRateNode", {
                get: function() {
                    var source = this.lastSource;
                    return source && source.playbackRate
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "buffer", {
                get: function() {
                    if (!this._buffer) {
                        this._buffer = FileHandler.instance.getFile(this._fileId)
                    }
                    return this._buffer
                },
                set: function(buffer) {
                    this._buffer = buffer
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "playing", {
                get: function() {
                    return this._endTime == -1 || this._endTime > Klang.Util.now()
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "playbackState", {
                get: function() {
                    var source = this.lastSource;
                    if (source) {
                        return source.playbackState
                    }
                    return 0
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "output", {
                get: function() {
                    if (this._panner) {
                        return this._panner.output
                    } else {
                        return this._output
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(StreamingAudioSource.prototype, "panner", {
                get: function() {
                    return this._panner
                },
                enumerable: true,
                configurable: true
            });
            StreamingAudioSource.prototype.freeBuffer = function() {
                this._buffer = null;
                for (var ix = 0, len = this._sources.length; ix < len; ix++) {
                    try {
                        this._sources[ix].stop(0)
                    } catch (ex) {}
                    this._sources[ix].disconnect();
                    this._sources[ix] = null
                }
                this._sources = []
            };
            StreamingAudioSource.prototype.setData = function(data) {
                _super.prototype.setData.call(this, data);
                var reinit = false;
                this._volumeStartRange = data.volume_start_range;
                this._volumeEndRange = data.volume_end_range;
                this._pitchEndRange = data.pitch_end_range;
                this._pitchStartRange = data.pitch_start_range;
                if (data.file_id !== undefined && this._fileId != data.file_id) {
                    this._fileId = data.file_id;
                    reinit = true
                }
                this._playbackRate = data.playback_rate === undefined ? 1 : data.playback_rate;
                if (this.playbackRateNode) {
                    this.playbackRateNode.value = this._playbackRate
                }
                this._loop = data.loop === undefined ? false : data.loop;
                if (this.lastSource) {
                    this.lastSource.loop = this._loop
                }
                if (!this._loop) {
                    this._loopPlaying = false
                }
                this._loopStart = data.loop_start === undefined ? 0 : data.loop_start;
                if (this.lastSource) {
                    this.lastSource.loopStart = this._loopStart
                }
                this._loopEnd = data.loop_end === undefined ? 0 : data.loop_end;
                if (this.lastSource) {
                    this.lastSource.loopEnd = this._loopEnd
                }
                var offset = data.offset === undefined ? 0 : data.offset;
                if (this._offset != offset) {
                    this._offset = offset;
                    reinit = true
                }
                var duration = data.duration === undefined ? 0 : data.duration;
                if (this._duration != duration) {
                    this._duration = duration;
                    reinit = true
                }
                this._retrig = data.retrig === undefined ? true : data.retrig;
                if (data.reverse === undefined) {
                    data.reverse = false
                }
                if (this._reverse != data.reverse) {
                    this._reverse = data.reverse;
                    reinit = true
                }
                if (data.xfade === undefined) {
                    data.xfade = false
                }
                if (this.data.xfade != data.xfade) {
                    reinit = true
                }
                this.data = data;
                if (reinit) {
                    this.init()
                }
                if (data.panner) {
                    if (!this._panner) {
                        var d = this._destination;
                        this.disconnect();
                        this._panner = newPanner(data.panner);
                        this.connect(d)
                    } else {
                        this._panner.setData(data.panner)
                    }
                } else {
                    if (!data.panner) {
                        if (this._panner) {
                            var d = this._destination;
                            this.disconnect();
                            this._panner = null;
                            this.connect(d)
                        }
                    }
                }
            };
            return StreamingAudioSource
        }(Klang.Model.Audio);
        return Klang.Model.StreamingAudioSource = StreamingAudioSource
    });
    Module(function(Klang) {
        var idCounter = 0;
        var fileHandler = Klang.core.FileHandler.instance;
        var StreamingAudioSource = Klang.Model.StreamingAudioSource;
        var AudioSource = Klang.Model.AudioSource;
        StreamingAudioSource.prototype.toMaster = function() {
            var master = Klang.core.Core.instance.findInstance(core.Core.instance._masterBusId);
            this.connect(master.input);
            return this
        };
        Klang.createStreamingAudioSource = function(data) {
            return new StreamingAudioSource(data || {})
        };
        var as;
        AudioSource.prototype.toMaster = function() {
            var master = Klang.core.Core.instance.findInstance(core.Core.instance._masterBusId);
            this.connect(master.input);
            return this
        };
        AudioSource.prototype.clone = function() {
            var clone = new AudioSource(this.data, this._name);
            clone.connect(Klang.core.Core.instance.findInstance(this.destinationName).input);
            return clone
        };
        Klang.createAudioSource = function(urlObjOrBuffer) {
            var as;
            if (urlObjOrBuffer instanceof AudioBuffer) {
                as = new AudioSource({
                    type: "AudioSource",
                    name: "__API__" + idCounter++
                })
            } else {
                if (typeof urlObjOrBuffer === "object") {
                    var buffer = urlObjOrBuffer.buffer;
                    if (buffer) {
                        delete urlObjOrBuffer.buffer
                    }
                    as = new AudioSource(__defaults(urlObjOrBuffer, {
                        type: "AudioSource",
                        name: "__API__" + idCounter++
                    }));
                    as.buffer = buffer
                } else {
                    throw new Error("url loading not implemneted yet")
                }
            }
            return as
        };
        var __defaults = function(defaults, options) {
            var extended = {};
            var prop;
            for (prop in defaults) {
                if (Object.prototype.hasOwnProperty.call(defaults, prop)) {
                    extended[prop] = defaults[prop]
                }
            }
            for (prop in options) {
                if (Object.prototype.hasOwnProperty.call(options, prop)) {
                    extended[prop] = options[prop]
                }
            }
            return extended
        }
    });
    Module(function(Klang) {
        window.Klang = Klang;
        return window.Klang
    });
    Module(function(Klang) {
        function Core() {
            this._initComplete = false;
            this._blurFadeOut = false;
            this._masterBusId = null;
            this._preLoadInitStack = [];
            this._postLoadInitStack = [];
            this._connectStack = [];
            this._superMasterOutput = Klang.context ? Klang.context.createGain() : null;
            this._eventHistory = [];
            if (Klang.Util.getParameterByName("klang_log")) {
                Klang.loggingEnabled = true
            }
        }
        Core.debugSettings = {};
        Core.inst = null;
        Core.isInited = function isInited() {
            if (Core.inst == null) {
                return false
            }
            return Core.inst._initComplete
        };
        Object.defineProperty(Core.prototype, "initComplete", {
            get: function() {
                return this._initComplete
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Core, "instance", {
            get: function() {
                if (Core.inst == null) {
                    Core.inst = new Core()
                }
                return Core.inst
            },
            enumerable: true,
            configurable: true
        });
        Core.prototype.setCallbacks = function(callbacks) {
            this._callbacks = callbacks
        };
        Object.defineProperty(Core, "callbacks", {
            get: function() {
                return Core.instance._callbacks
            },
            enumerable: true,
            configurable: true
        });
        Core.deinit = function deinit() {
            Core.inst = null
        };
        Core.prototype.stopAll = function() {
            if (window.KlangVisual) {
                KlangVisual.stop()
            }
            for (var p in this._objectTable) {
                if (this._objectTable[p].stop) {
                    try {
                        this._objectTable[p].stop()
                    } catch (ex) {}
                }
            }
        };
        Core.prototype.loadJSON = function(options, readyCallback, progressCallback, url) {
            this._readyCallback = readyCallback;
            this._progressCallback = progressCallback || function() {};
            if (typeof options === "object") {
                Klang.log("Loading config (editor)");
                var data = this.createConfigNode(options);
                Core.settings = data.settings;
                Core.instance.initContent(data, null, url);
                if (window.KlangVisual) {
                    KlangVisual.init(options)
                }
            } else {
                if (typeof options === "string") {
                    Klang.log("Loading config (client)");
                    var request = new XMLHttpRequest();
                    request.open("GET", options, true);
                    var _this = this;
                    request.onreadystatechange = function() {
                        if (request.readyState == 4 && request.status == 200) {
                            var configText = request.responseText;
                            var data = _this.parseConfigJSON(configText);
                            Core.settings = data.settings;
                            Core.instance.initContent(data, null, options);
                            if (window.KlangVisual) {
                                KlangVisual.init(JSON.parse(configText))
                            }
                        } else {
                            if (request.status == 404) {
                                throw "Klang exception: config file not found: '" + options + "'"
                            } else {
                                if (request.status != 200) {
                                    throw "Klang exception: unable to load config file: '" + options + "'"
                                }
                            }
                        }
                    };
                    request.send(null)
                } else {
                    throw "Klang exception: unrecognized options: '" + options + "'"
                }
            }
        };
        Core.prototype.parseConfigJSON = function(jsonString) {
            if (typeof jsonString === "string") {
                return JSON.parse(jsonString, function(key, value) {
                    if (value && typeof value === "object" && typeof value.type === "string") {
                        if (!Klang.Model[value.type]) {
                            Klang.warn("Core: Type not found: " + value.type);
                            return null
                        }
                        return new Klang.Model[value.type](value, key)
                    }
                    return value
                })
            } else {
                for (var key in Object.keys(jsonString)) {
                    var value = jsonString[key];
                    if (!Klang.Model[value.type]) {
                        Klang.warn("Core: Type not found: " + value.type);
                        return null
                    }
                    return new Klang.Model[value.type](value, key)
                }
            }
        };
        Core.prototype.createConfigNode = function(node) {
            if (typeof node === "object") {
                for (var key in node) {
                    var prop = node[key];
                    if (typeof prop === "object" && typeof prop.type === "string") {
                        if (!Klang.Model[prop.type]) {
                            Klang.warn("Core: Type not found: " + prop.type)
                        }
                        if (prop.type == "channel") {
                            continue
                        }
                        node[key] = this.createConfigNode(prop);
                        node[key] = new Klang.Model[prop.type](prop, key)
                    } else {
                        node[key] = this.createConfigNode(prop)
                    }
                }
            }
            return node
        };
        Core.prototype.createObject = function(name, data, options) {
            if (!options) {
                options = {}
            }
            if (!Klang.Model[data.type]) {
                Klang.warn("Core: Type not found: " + data.type);
                return
            }
            if (!options.excludeFromTable && this._objectTable[name]) {
                Klang.warn("Core: Duplicate object: " + name)
            }
            var obj = new Klang.Model[data.type](data, name);
            if (!options.excludeFromTable) {
                this._objectTable[name] = obj
            }
            if (!options.noInit && obj.init) {
                obj.init()
            }
            if (!options.noConnect && obj.destinationName && obj.connect) {
                if (obj.destinationName == "$OUT") {
                    obj.connect(this._superMasterOutput)
                } else {
                    var destination = this.findInstance(obj.destinationName);
                    if (!destination) {
                        Klang.warn("Core: Destination not found: " + obj.destinationName)
                    }
                    if (destination._type != "Bus") {
                        Klang.warn("Core: Destination is not a bus: " + obj.destinationName)
                    }
                    obj.connect(destination.input)
                }
            }
            return obj
        };
        Core.prototype.updateObject = function(object, data) {
            var obj = typeof object == "string" ? this._objectTable[object] : object;
            if (obj._type == "SimpleProcess" && data.type == "AdvancedProcess") {
                var advancedProcess = newAdvancedProcess(data, object);
                advancedProcess.init();
                this._objectTable[object] = advancedProcess
            } else {
                if (obj._type == "AdvancedProcess" && data.type == "SimpleProcess") {
                    var simpleProcess = newSimpleProcess(data, object);
                    simpleProcess.init();
                    this._objectTable[object] = simpleProcess
                } else {
                    if (obj.setData) {
                        obj.setData(data)
                    }
                }
            }
        };
        Core.prototype.createEvent = function(name, target) {
            if (this._eventTable[name]) {
                Klang.warn("Core: Duplicate event: " + name)
            }
            this._eventTable[name] = target
        };
        Core.prototype.visChange = function(fadeTime) {
            if (this.isHidden()) {
                if (this._blurFadeOut) {
                    Klang.Util.curveParamLin(this._superMasterOutput.gain, 0, fadeTime)
                }
            } else {
                Klang.Util.curveParamLin(this._superMasterOutput.gain, 1, fadeTime)
            }
        };
        Core.prototype.initContent = function(data, files, url) {
            var relativePath = data.settings.relative_path;
            var baseURL;
            var filePath = data.settings.file_path || "";
            if (relativePath) {
                if (url.lastIndexOf("/") != -1) {
                    baseURL = url.substring(0, url.lastIndexOf("/"));
                    if (baseURL.charAt(baseURL.length - 1) !== "/") {
                        baseURL += "/"
                    }
                    baseURL += filePath
                } else {
                    baseURL = filePath
                }
            } else {
                baseURL = filePath
            }
            Klang.log("Initializing core");
            var startTimeStamp = Klang.context.currentTime;
            if (data.settings.blur_fade_time != -1) {
                this._blurFadeOut = true;
                var fadeTime = data.settings.blur_fade_time || 0.5;
                if (fadeTime < 0 && fadeTime != -1) {
                    Klang.warn("Core: Invalid blur_fade_time value. Must be -1 or >= 0.")
                }
                var _this = this;
                var visProp = this.getHiddenProp();
                if (visProp) {
                    var evtname = "visibilitychange";
                    document.addEventListener(evtname, function() {
                        _this.visChange(fadeTime)
                    })
                }
            }
            Klang.core.FileHandler.instance.fileInfo = (files !== undefined && files !== null ? files : data.files) || [];
            this._eventTable = data.events || {};
            this._objectTable = {};
            for (var p in data.audio) {
                this._objectTable[p] = data.audio[p]
            }
            for (var p in data.busses) {
                this._objectTable[p] = data.busses[p]
            }
            for (var p in data.sequencers) {
                this._objectTable[p] = data.sequencers[p]
            }
            for (var p in data.processes) {
                this._objectTable[p] = data.processes[p]
            }
            for (var p in data.synths) {
                this._objectTable[p] = data.synths[p]
            }
            for (var p in data.lfos) {
                this._objectTable[p] = data.lfos[p]
            }
            for (var p in data.automations) {
                this._objectTable[p] = data.automations[p]
            }
            for (var p in data.data) {
                this._objectTable[p] = data.data[p]
            }
            this.setVars(data.vars);
            this._masterBusId = data.masterBus;
            this._exportedSymbols = data.exportedSymbols || {};
            this._logIgnore = data.debug.log_ignore || data.log_ignore || {};
            Klang.Util.createCurves(data.curves);
            this._loadStartTimestamp = new Date().getTime();
            if (data.debug) {
                Klang.debugData.ignoredEvents = data.debug.ignored_events || Klang.debugData.ignoredEvents;
                Klang.debugData.logToConsole = data.debug.log_to_console || Klang.debugData.logToConsole
            }
            Klang.log("Pre load initialization started");
            for (var ix = 0, len = this._preLoadInitStack.length; ix < len; ix++) {
                var element = this._preLoadInitStack[ix];
                if (element.init) {
                    element.init()
                }
            }
            Klang.log("Pre load initialization finished");
            Klang.log("Connecting nodes");
            this._superMasterOutput.connect(Klang.context.destination);
            for (var ix = 0, len = this._connectStack.length; ix < len; ix++) {
                var element = this._connectStack[ix];
                switch (element.destinationName) {
                    case "$OUT":
                        element.connect(this._superMasterOutput);
                        break;
                    case "$PARENT":
                        break;
                    default:
                        var destination = this.findInstance(element.destinationName);
                        if (!destination) {
                            Klang.warn("Core: Destination not found: " + element.destinationName)
                        }
                        if (destination._type != "Bus") {
                            Klang.warn("Core: Destination is not a bus: " + element.destinationName)
                        }
                        element.connect(destination.input);
                        break
                }
            }
            Klang.log("Nodes connected");
            this._preLoadInitStack = null;
            this._connectStack = null;
            this._timeHandler = new Klang.core.TimeHandler();
            this._initComplete = true;
            Klang.log("Core initialized");
            Klang.core.FileHandler.instance.baseURL = baseURL;
            if (!Klang.initOptions || Klang.initOptions && !Klang.initOptions.noAutoLoad) {
                Klang.core.FileHandler.instance.loadFiles("auto", Core.soundsLoaded, this._progressCallback)
            } else {
                setTimeout(Core.soundsLoaded, 4)
            }
        };
        Core.prototype.isHidden = function() {
            var prop = this.getHiddenProp();
            if (!prop) {
                return false
            }
            return document[prop]
        };
        Core.prototype.getHiddenProp = function() {
            var prefixes = ["webkit", "moz", "ms", "o"];
            if ("hidden" in document) {
                return "hidden"
            }
            for (var i = 0; i < prefixes.length; i++) {
                if (prefixes[i] + "Hidden" in document) {
                    return prefixes[i] + "Hidden"
                }
            }
            return null
        };
        Core.prototype.setVars = function(vars) {
            if (vars) {
                for (var key in vars) {
                    if (typeof vars[key] == "string" && vars[key].indexOf("me.") > -1) {
                        vars[key] = this.findInstance(vars[key].split("me.")[1])
                    } else {
                        if (typeof vars[key] == "object") {
                            var obj = vars[key];
                            for (var prop in obj) {
                                if (obj.hasOwnProperty(prop)) {
                                    if (typeof obj[prop] == "string" && obj[prop].indexOf("me.") > -1) {
                                        obj[prop] = this.findInstance(obj[prop].split("me.")[1])
                                    }
                                }
                            }
                        }
                    }
                }
                Klang.Util.vars = vars
            }
        };
        Core.prototype.loadSoundFiles = function(name, callback, progressCallback, loadFailedCallback) {
            var start = new Date().getTime();
            if (progressCallback) {
                this._progressCallback = progressCallback
            }
            var _this = this;
            Klang.core.FileHandler.instance.loadFiles(name, function(success, loadedFiles) {
                for (var i = 0; i < loadedFiles.length; i++) {
                    var fileId = loadedFiles[i].id;
                    for (var j in _this._objectTable) {
                        if (_this._objectTable.hasOwnProperty(j)) {
                            var obj = _this._objectTable[j];
                            if (obj._type === "AudioSource" && obj._fileId === fileId) {
                                obj.init()
                            }
                        }
                    }
                }
                var end = new Date().getTime();
                var time = end - start;
                Klang.log("Execution time for loadgroup: " + time);
                callback && callback(true)
            }, this._progressCallback, loadFailedCallback)
        };
        Core.prototype.freeSoundFiles = function(name) {
            Klang.core.FileHandler.instance.freeSoundFiles(name);
            for (var p in this._objectTable) {
                var obj = this._objectTable[p];
                if (obj._type == "AudioSource") {
                    var fileInfo = Klang.core.FileHandler.instance.getFileInfo(obj._fileId);
                    if (fileInfo && fileInfo.load_group == name) {
                        obj.freeBuffer()
                    }
                }
            }
        };
        Core.soundsLoaded = function soundsLoaded() {
            Klang.log("Post load initialization started");
            var _this = Core.instance;
            for (var i = 0, len = _this._postLoadInitStack.length; i < len; i++) {
                _this._postLoadInitStack[i].init()
            }
            Klang.log("Post load initialization finished");
            _this._postLoadInitStack = null;
            if (_this._readyCallback) {
                _this._readyCallback(true)
            }
        };
        Core.prototype.pushToPreLoadInitStack = function(instance) {
            if (this._preLoadInitStack) {
                this._preLoadInitStack.push(instance);
                return true
            }
            return false
        };
        Core.prototype.pushToPostLoadInitStack = function(instance) {
            if (this._postLoadInitStack) {
                this._postLoadInitStack.push(instance);
                return true
            }
            return false
        };
        Core.prototype.pushToConnectStack = function(instance) {
            if (this._connectStack) {
                this._connectStack.push(instance);
                return true
            }
            return false
        };
        Core.prototype.findInstance = function(name) {
            var instance = this._objectTable[name];
            if (!instance) {
                Klang.warn("Core: Unknown reference: '" + name + "'")
            }
            return instance
        };
        Core.prototype.triggerEvent = function(id) {
            var eventArgs = [];
            for (var _i = 0; _i < arguments.length - 1; _i++) {
                eventArgs[_i] = arguments[_i + 1]
            }
            Klang.Util.lastEvent = id;
            if (Klang.debugData.ignoredEvents[id]) {
                return
            }
            if (!this._eventTable) {
                Klang.logc("Klang Core: eventTable is undefined");
                return
            }
            if (!this._eventTable[id]) {
                if (Klang.debugData.logToConsole && !this._logIgnore[id]) {
                    Klang.logc("Klang Core: Incoming sound event: '" + id + "', " + eventArgs, Klang.Util.LOG_UNIMPLEMENTED_EVENT_COLOR)
                }
            } else {
                if (Klang.debugData.logToConsole && !this._logIgnore[id]) {
                    Klang.logc("Klang Core: Incoming sound event: '" + id + "', " + eventArgs, Klang.Util.LOG_EVENT_COLOR)
                }
            }
            var process = this._eventTable[id];
            if (typeof process == "string") {
                if (!this._objectTable[process]) {
                    Klang.warn("Core: Unknown process: '" + process + "'")
                }
                if (this._objectTable[process]._type != "SimpleProcess" && this._objectTable[process]._type != "AdvancedProcess") {
                    Klang.warn("Core: Object is not a process: '" + process + "'")
                }
                this._objectTable[process].start(eventArgs[0])
            } else {
                if (process instanceof Array) {
                    for (var ix = 0, len = process.length; ix < len; ix++) {
                        if (!this._objectTable[process[ix]]) {
                            Klang.warn("Core: Unknown process: '" + process[ix] + "'")
                        }
                        if (this._objectTable[process[ix]]._type != "SimpleProcess" && this._objectTable[process[ix]]._type != "AdvancedProcess") {
                            Klang.warn("Core: Object is not a process: '" + process + "'")
                        }
                        this._objectTable[process[ix]].start(eventArgs[0])
                    }
                }
            }
        };
        Core.prototype.getSymbolId = function(symbol) {
            return this._exportedSymbols[symbol]
        };
        Core.prototype.initIOS = function() {
            var src = Klang.context.createBufferSource();
            src.start(0)
        };
        Object.defineProperty(Core.prototype, "timeHandler", {
            get: function() {
                return this._timeHandler
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Core.prototype, "output", {
            get: function() {
                return this._superMasterOutput
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Core.prototype, "blurFadeOut", {
            get: function() {
                return this._blurFadeOut
            },
            set: function(state) {
                this._blurFadeOut = state
            },
            enumerable: true,
            configurable: true
        });
        return Klang.core.Core = Core
    });
    Module(function() {
        if (navigator.userAgent.indexOf("MSIE") != -1) {
            var ie = true;
            var ua = navigator.userAgent;
            var re = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})");
            var ieVersion;
            if (re.exec(ua) != null) {
                ieVersion = parseInt(RegExp.$1)
            }
            if (ieVersion < 9) {
                Object.oldDefineProperty = Object.defineProperty;
                Object.defineProperty = function() {}
            }
        }
    });
    Module(function() {
        (function() {
            var AudioContext = window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext;
            var browserInfo = function() {
                var ua = navigator.userAgent;
                var temp;
                var match = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
                if (/trident/i.test(match[1])) {
                    temp = /\brv[ :]+(\d+)/g.exec(ua) || [];
                    return {
                        name: "IE",
                        version: temp[1] || "unknown"
                    }
                }
                if (match[1] === "Chrome") {
                    temp = ua.match(/\bOPR\/(\d+)/);
                    if (temp !== null) {
                        return {
                            name: "Opera",
                            version: temp[1]
                        }
                    }
                }
                match = match[2] ? [match[1], match[2]] : [navigator.appName, navigator.appVersion, "-?"];
                if ((temp = ua.match(/version\/(\d+)/i)) !== null) {
                    match.splice(1, 1, temp[1])
                }
                return {
                    name: match[0],
                    version: match[1]
                }
            }();

            function fixSetTarget(param) {
                if (!param) {
                    return
                }
                if (!param.setTargetValueAtTime) {
                    param.setTargetValueAtTime = param.setTargetAtTime
                }
            }
            if (AudioContext) {
                var acProto = AudioContext.prototype;
                var tmpContext = new AudioContext();
                var isStillOld = function(normative, old) {
                    return normative === undefined && old !== undefined
                };
                var bufferProto = tmpContext.createBufferSource().constructor.prototype;
                if (isStillOld(bufferProto.start, bufferProto.noteOn) || isStillOld(bufferProto.stop, bufferProto.noteOff)) {
                    var nativeCreateBufferSource = acProto.createBufferSource;
                    acProto.createBufferSource = function createBufferSource() {
                        var returnNode = nativeCreateBufferSource.call(this);
                        returnNode.start = returnNode.start || returnNode.noteOn;
                        returnNode.stop = returnNode.stop || returnNode.noteOff;
                        return returnNode
                    }
                }
                if (typeof tmpContext.createOscillator === "function") {
                    var oscPraoto = tmpContext.createOscillator().constructor.prototype;
                    if (isStillOld(oscPraoto.start, oscPraoto.noteOn) || isStillOld(oscPraoto.stop, oscPraoto.noteOff)) {
                        var nativeCreateOscillator = acProto.createOscillator;
                        acProto.createOscillator = function createOscillator() {
                            var returnNode = nativeCreateOscillator.call(this);
                            returnNode.start = returnNode.start || function() {
                                if (returnNode.noteOn) {
                                    if (arguments.length > 1) {
                                        returnNode.noteGrainOn.apply(returnNode, arguments)
                                    } else {
                                        returnNode.noteOn.apply(returnNode, arguments)
                                    }
                                }
                            };
                            returnNode.stop = returnNode.stop || returnNode.noteOff;
                            return returnNode
                        }
                    }
                }
                if (acProto.createGain === undefined && acProto.createGainNode !== undefined) {
                    acProto.createGain = acProto.createGainNode
                }
                if (acProto.createDelay === undefined && acProto.createDelayNode !== undefined) {
                    acProto.createDelay = acProto.createDelayNode
                }
                if (acProto.createScriptProcessor === undefined && acProto.createJavaScriptNode !== undefined) {
                    acProto.createScriptProcessor = acProto.createJavaScriptNode
                }
                var AudioParam = window.AudioParam = window.AudioParam || window.webkitAudioParam;
                if (AudioParam) {
                    var audioParamProto = window.AudioParam.prototype;
                    audioParamProto.setTargetAtTime = audioParamProto.setTargetAtTime || audioParamProto.setTargetValueAtTime
                } else {
                    if (!AudioContext.prototype.internal_createGain) {
                        AudioContext.prototype.internal_createGain = AudioContext.prototype.createGain;
                        AudioContext.prototype.createGain = function() {
                            var node = this.internal_createGain();
                            fixSetTarget(node.gain);
                            return node
                        }
                    }
                }
                if (browserInfo.name == "Chrome" && browserInfo.version == 42) {
                    var AudioBufferSourceNodeProto = window.AudioBufferSourceNode.prototype;
                    if (!AudioBufferSourceNodeProto.internal_start) {
                        AudioBufferSourceNodeProto.internal_start = AudioBufferSourceNodeProto.start;
                        AudioBufferSourceNodeProto.start = function(when, offset, duration) {
                            AudioBufferSourceNodeProto.internal_start.call(this, when)
                        }
                    }
                }
            }
        }())
    });
    Module(function(Klang) {
        function touchLoad(e) {
            Klang.audioTagHandler.loadSoundFiles()
        }
        var ATAudioFile = function() {
            function ATAudioFile(url, fileData) {
                this._url = url;
                this.data = fileData;
                this._onCanPlayThrough = this._onCanPlayThrough.bind(this);
                this._waitForReadyState = this._waitForReadyState.bind(this);
                this.state = ATAudioFile.STATE_NOT_LOADED
            }
            ATAudioFile.STATE_NOT_LOADED = 0;
            ATAudioFile.STATE_LOADING = 1;
            ATAudioFile.STATE_LOADED = 2;
            ATAudioFile.prototype._onCanPlayThrough = function() {
                this.audioElement.removeEventListener("canplaythrough", this._onCanPlayThrough, false);
                this._waitForReadyState(function() {
                    this.ready = true;
                    this.state = this.state = ATAudioFile.STATE_LOADED;
                    this._readyCallback && this._readyCallback();
                    this.audioElement.pause()
                }.bind(this))
            };
            ATAudioFile.prototype._waitForReadyState = function(cb) {
                var _this = this;
                (function wait() {
                    if (_this.audioElement.readyState) {
                        cb && cb()
                    } else {
                        setTimeout(wait, 100)
                    }
                }())
            };
            ATAudioFile.prototype.load = function(onDone) {
                if (this.state === ATAudioFile.STATE_NOT_LOADED) {
                    this.state = ATAudioFile.STATE_LOADING;
                    var el = this.audioElement = new Audio();
                    el.src = this._url;
                    el.addEventListener("canplaythrough", this._onCanPlayThrough, false);
                    el.volume = 0;
                    el.play()
                }
                this._readyCallback = onDone
            };
            ATAudioFile.prototype.clone = function() {
                var clone = new ATAudioFile(this._url, this.data);
                clone.state = this.state;
                clone.audioElement = new Audio();
                clone.ready = !!this.ready;
                clone.audioElement.src = this._url;
                clone.audioElement.volume = 0;
                clone.audioElement.play();
                return clone
            };
            return ATAudioFile
        }();
        Klang.ATAudioFile = ATAudioFile;
        var ATAudioSource = function() {
            function ATAudioSource(data, file) {
                this._xLoopTimer = 0;
                this.state = ATAudioSource.STATE_STOPPED;
                this._data = data;
                this._currentFile = file;
                this._retrig = data.retrig === undefined ? true : data.retrig;
                this._loopStart = data.loop_start || 0;
                this._loopEnd = data.loop_end || 0;
                this._destination_name = data.destination_name;
                if (!this._currentFile) {
                    return
                }
                this._priority = this._currentFile.data.audio_tag;
                this._loop = !!this._data.loop;
                this._gain = new ATGainNode(data.volume, this);
                this.beforeEnding = this.beforeEnding.bind(this)
            }
            ATAudioSource.STATE_PLAYING = 3;
            ATAudioSource.STATE_STOPPING = 3;
            ATAudioSource.STATE_STOPPED = 4;
            ATAudioSource.prototype.beforeEnding = function() {
                if (this._playing && this._loop) {
                    var otherFile = this._currentFile;
                    this._currentFile = otherFile === this._files[0] ? this._files[1] : this._files[0];
                    this._currentFile.currentTime = 0;
                    this._currentFile.audioElement.currentTime = 0;
                    this.update();
                    this._currentFile.audioElement.play();
                    clearTimeout(this._xLoopTimer);
                    this._xLoopTimer = setTimeout(this.beforeEnding, (this._currentFile.audioElement.duration - this._loopStart - (this._loopEnd ? this._currentFile.audioElement.duration - this._loopEnd : 0)) * 1000)
                }
            };
            ATAudioSource.prototype.play = function(when, offset, resume, keepVolume, loopTrigg) {
                when = when || 0;
                if (!this._currentFile.ready) {
                    return this
                }
                if (this._playing && !this._retrig && this.state !== ATAudioSource.STATE_STOPPING) {
                    return this
                }
                if (when > 0) {
                    var _this = this;
                    this._playTimeout = setTimeout(function() {
                        _this.doPlay(offset, resume, keepVolume, loopTrigg)
                    }, when * 1000)
                } else {
                    this.doPlay(offset, resume, keepVolume, loopTrigg)
                }
            };
            ATAudioSource.prototype.doPlay = function(offset, resume, keepVolume, loopTrigg) {
                offset = offset || 0;
                if (this.state == ATAudioSource.STATE_STOPPING && !this._retrig) {
                    this.getOutput().fadeVolume(this.getOutput().getVolume(), 0.5);
                    this.state = ATAudioSource.STATE_PLAYING;
                    return
                } else {
                    this.update()
                }
                this._currentFile.audioElement.currentTime = 0;
                this._currentFile.audioElement.play();
                this._playing = true;
                if (this._loop) {
                    if (!this._files) {
                        this._files = [this._currentFile, this._currentFile.clone()]
                    }
                    clearTimeout(this._xLoopTimer);
                    this._xLoopTimer = setTimeout(this.beforeEnding, (this._currentFile.audioElement.duration - offset - this._loopStart - (this._loopEnd ? this._currentFile.audioElement.duration - this._loopEnd : 0)) * 1000)
                }
                this.state = ATAudioSource.STATE_PLAYING;
                return this
            };
            ATAudioSource.prototype.fadeInAndPlay = function(targetValue, duration, when, offset) {
                when = when || 0;
                if (when > 0) {
                    var _this = this;
                    this._playTimeout = setTimeout(function() {
                        _this.doFadeInAndPlay(_this.getOutput().getVolume(), duration)
                    }, when * 1000)
                } else {
                    this.doFadeInAndPlay(this.getOutput().getVolume(), duration)
                }
                return this
            };
            ATAudioSource.prototype.doFadeInAndPlay = function(targetValue, duration) {
                this._gain.setVolume(this.state == ATAudioSource.STATE_PLAYING ? this._gain.getVolume() : 0);
                this.play(0, 0, false, true);
                this._gain.fadeVolume(targetValue, duration);
                return this
            };
            ATAudioSource.prototype.stop = function(when) {
                if (this._playTimeout) {
                    clearTimeout(this._playTimeout)
                }
                this.state = ATAudioSource.STATE_STOPPED;
                this._currentFile.audioElement.pause();
                this._playing = false;
                clearTimeout(this._xLoopTimer);
                return this
            };
            ATAudioSource.prototype.fadeOutAndStop = function(duration, when) {
                if (this.state != ATAudioSource.STATE_PLAYING) {
                    return
                }
                if (this._playTimeout) {
                    clearTimeout(this._playTimeout)
                }
                var _this = this;
                this._gain.fadeVolume(0, duration, function() {
                    if (_this.state == ATAudioSource.STATE_STOPPING) {
                        _this.stop()
                    }
                });
                this.state = ATAudioSource.STATE_STOPPING;
                return this
            };
            ATAudioSource.prototype.setVolume = function(value) {
                value = value === undefined ? this.getOutput().getVolume() : value * this.getOutput().getVolume();
                value = Math.max(0, Math.min(1, value * Klang.audioTagHandler.getGlobalVolume() * Klang.audioTagHandler.getFocusBlurVolume()));
                if (this._currentFile.audioElement && isFinite(value)) {
                    this._currentFile.audioElement.volume = value
                }
                return this
            };
            ATAudioSource.prototype.update = function() {
                this.setVolume(this._destination.calcVolume())
            };
            ATAudioSource.prototype.connect = function(bus) {
                this._destination = bus;
                bus.addConnected(this);
                this.update()
            };
            ATAudioSource.prototype.getOutput = function() {
                return this._gain
            };
            Object.defineProperty(ATAudioSource.prototype, "position", {
                get: function() {
                    return this.playing ? this._currentFile.audioElement.currentTime : 0
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ATAudioSource.prototype, "playing", {
                get: function() {
                    return this._playing
                },
                enumerable: true,
                configurable: true
            });
            return ATAudioSource
        }();
        Klang.ATAudioSource = ATAudioSource;
        var ATAudioGroup = function() {
            function ATAudioGroup(data, audioTagHandler) {
                this._data = data;
                this._content = [];
                for (var c in this._data.content) {
                    var audio = audioTagHandler.getObject(this._data.content[c]);
                    if (audio) {
                        this._content.push(audio)
                    }
                }
            }
            ATAudioGroup.prototype.play = function(when, audioSource, forcePlay) {
                var index = typeof audioSource === "number" ? audioSource : Klang.Util.random(this._content.length - 1, 0);
                if (this._content[index]) {
                    this._content[index].play(when)
                }
                return this
            };
            ATAudioGroup.prototype.stop = function() {
                for (var c in this._content) {
                    if (this._content[c]) {
                        this._content[c].stop()
                    }
                }
                return this
            };
            Object.defineProperty(ATAudioGroup.prototype, "playing", {
                get: function() {
                    var playing = false;
                    for (var c in this._content) {
                        if (this._content[c]._playing) {
                            playing = true
                        }
                    }
                    return playing
                },
                enumerable: true,
                configurable: true
            });
            ATAudioGroup.prototype.update = function() {};
            ATAudioGroup.prototype.connect = function(bus) {};
            return ATAudioGroup
        }();
        Klang.ATAudioGroup = ATAudioGroup;
        var ATGainNode = function() {
            function ATGainNode(volume, owner) {
                this._currentVolume = this._volume = volume !== undefined ? volume : 1;
                this._currentVolume = Math.max(0, Math.min(this._currentVolume, 1));
                this._owner = owner
            }
            ATGainNode.prototype.getVolume = function() {
                return this._volume
            };
            ATGainNode.prototype.setVolume = function(value) {
                value = Math.max(0, Math.min(1, value));
                this._currentVolume = value;
                if (this._owner && this._owner.setVolume) {
                    this._owner.setVolume(this._currentVolume)
                }
                return this
            };
            ATGainNode.prototype.fadeVolume = function(targetValue, duration, callback) {
                if (this._fadeTimer) {
                    clearInterval(this._fadeTimer)
                }
                var _this = this;
                this._fadeSteps = Math.round(duration * 1000) / 10;
                this._volumeStep = (this._currentVolume - targetValue) / this._fadeSteps;
                this._fadeTimer = setInterval(function() {
                    _this.setVolume(_this._currentVolume - _this._volumeStep);
                    _this._fadeSteps--;
                    if (_this._fadeSteps <= 0) {
                        clearInterval(_this._fadeTimer);
                        if (callback) {
                            callback()
                        }
                    }
                }, 10);
                return this
            };
            ATGainNode.prototype.resetVolume = function(keepVolume) {
                var volumeToSet = keepVolume ? this._currentVolume : this._volume;
                clearInterval(this._fadeTimer);
                this.setVolume(volumeToSet);
                return this
            };
            return ATGainNode
        }();
        Klang.ATGainNode = ATGainNode;
        var ATBus = function() {
            function ATBus(data, name, isMaster) {
                this._isMaster = false;
                this._connected = [];
                this._isMaster = isMaster;
                this._data = data;
                this._name = name;
                this._output = new ATGainNode(data.output_vol !== undefined ? data.output_vol : 1, this);
                this._volume = data.output_vol !== undefined ? data.output_vol : 1;
                this._destination_name = data.destination_name
            }
            ATBus.prototype.getVolume = function() {
                if (!this._isMaster) {
                    return this._volume
                } else {
                    return this._volume
                }
            };
            ATBus.prototype.calcVolume = function(vol) {
                if (typeof vol === "undefined") {
                    vol = 1
                }
                vol *= this._volume;
                if (this._destination) {
                    return this._destination.calcVolume(vol)
                }
                return vol
            };
            ATBus.prototype.setVolume = function(volume) {
                this._volume = volume;
                for (var i = 0; i < this._connected.length; i++) {
                    this._connected[i].update()
                }
            };
            ATBus.prototype.update = function() {
                for (var i = 0; i < this._connected.length; i++) {
                    this._connected[i].update()
                }
            };
            ATBus.prototype.getOutput = function() {
                return this._output
            };
            ATBus.prototype.addConnected = function(c) {
                this._connected.push(c)
            };
            ATBus.prototype.connect = function(bus) {
                this._destination = bus;
                bus.addConnected(this)
            };
            return ATBus
        }();
        Klang.ATBus = ATBus;
        var ATProcess = function() {
            function ATProcess(data, name, vars) {
                this._data = data;
                this._name = name;
                this._vars = vars;
                if (this._data.at_action === "copy") {
                    this._data.at_action = this._data.action
                }
            }
            ATProcess.prototype.start = function(args) {
                try {
                    if (typeof this._data.at_action === "function") {
                        this._data.at_action(Util, this._vars, args)
                    } else {
                        new Function("Util", "me", "args", this._data.at_action)(Util, this._vars, args)
                    }
                } catch (ex) {
                    Klang.err("Klang: error in process '" + this._name + "': " + ex.name + ": " + ex.message)
                }
            };
            return ATProcess
        }();
        Klang.ATProcess = ATProcess;

        function AudioTagHandler(config, readyCallback, progressCallback, configURL) {
            this._loadedFiles = 0;
            Klang.audioTagHandler = this;
            this._audioFiles = {};
            this._limitSounds = Klang.isMobile || Klang.detector.browser.name == "Opera";
            if (typeof config == "string") {
                var _this = this;
                network.request({
                    url: config
                }, function(data) {
                    try {
                        _this.init(JSON.parse(data), readyCallback, progressCallback, configURL)
                    } catch (ex) {
                        Klang.engineVersion = "n/a";
                        if (readyCallback) {
                            readyCallback(false)
                        }
                    }
                }, null, function(error) {
                    Klang.err(error)
                })
            } else {
                if (typeof config == "object") {
                    this.init(config, readyCallback, progressCallback, configURL)
                } else {
                    Klang.err("Klang exception: unrecognized config type: " + typeof config)
                }
            }
        }
        AudioTagHandler.prototype.init = function(data, readyCallback, progressCallback, configURL) {
            var _this = this;
            this._globalVolume = 1;
            this._focusBlurVolume = 1;
            this._readyCallback = readyCallback;
            this._progressCallback = progressCallback;
            this._events = data.events;
            var relativePath = parseInt(data.settings.relative_path);
            var baseURL;
            var filePath = data.settings.file_path || "";
            if (relativePath) {
                if (configURL.lastIndexOf("/") != -1) {
                    baseURL = configURL.substring(0, configURL.lastIndexOf("/"));
                    if (baseURL.charAt(baseURL.length - 1) !== "/") {
                        baseURL += "/"
                    }
                    baseURL += filePath
                } else {
                    baseURL = filePath
                }
            } else {
                baseURL = filePath
            }
            var format = ".mp3";
            if (Klang.detector.browser.name == "Firefox" || Klang.detector.browser.name == "Chrome") {
                format = ".ogg"
            }
            for (var p in data.files) {
                var fileData = data.files[p];
                var prio = fileData.audio_tag;
                if (prio && (!this._limitSounds || prio == 1)) {
                    this._audioFiles[fileData.id] = new ATAudioFile(baseURL + fileData.url + format, fileData)
                }
            }
            this._masterBus = data.masterBus;
            this._busses = {};
            for (var b in data.busses) {
                this._busses[b] = new ATBus(data.busses[b], b, b == this._masterBus)
            }
            this._audio = {};
            for (var a in data.audio) {
                if (data.audio.hasOwnProperty(a)) {
                    var audioData = data.audio[a];
                    if (audioData.type == "AudioSource") {
                        if (this._audioFiles[audioData.file_id]) {
                            var sprite = this._audioFiles[audioData.file_id];
                            this._audio[a] = new ATAudioSource(audioData, this._audioFiles[audioData.file_id])
                        }
                    } else {
                        if (audioData.type == "AudioGroup") {
                            this._audio[a] = new ATAudioGroup(audioData, this)
                        }
                    }
                }
            }
            for (var bus in this._busses) {
                if (bus != this._masterBus) {
                    this._busses[bus].connect(this._busses[this._busses[bus]._destination_name])
                }
            }
            for (var as in this._audio) {
                if (this._audio[as]._data.type == "AudioSource") {
                    this._audio[as].connect(this._busses[this._audio[as]._destination_name])
                }
            }
            this._processes = {};
            for (var p in data.processes) {
                var processData = data.processes[p];
                if (processData.at_action) {
                    var processArgs = {};
                    for (var v in processData.vars) {
                        var processVarName = processData.vars[v];
                        processArgs[processVarName] = this._audio[processVarName] || this._busses[processVarName]
                    }
                    this._processes[p] = new ATProcess(processData, p, processArgs)
                }
            }
            this.loadSoundFiles(["auto", "autotag"], readyCallback, progressCallback);
            if (data.settings.blur_fade_time != -1) {
                this._blurFadeOut = true;
                var fadeTime = data.settings.blur_fade_time || 0.5;
                var _this = this;
                var visProp = this.getHiddenProp();
                if (visProp) {
                    var evtname = "visibilitychange";
                    document.addEventListener(evtname, this.visChange.bind(this))
                }
            }
        };
        AudioTagHandler.prototype.visChange = function() {
            if (this.isHidden()) {
                if (this._blurFadeOut) {
                    this.setFocusBlurVolume(0)
                }
            } else {
                this.setFocusBlurVolume(1)
            }
        };
        AudioTagHandler.prototype.fadeBusVolume = function(bus, value, duration) {
            var b = this._busses[bus._name];
            b.getOutput().fadeVolume(value, duration)
        };
        AudioTagHandler.prototype.isHidden = function() {
            var prop = this.getHiddenProp();
            if (!prop) {
                return false
            }
            return document[prop]
        };
        AudioTagHandler.prototype.getHiddenProp = function() {
            var prefixes = ["webkit", "moz", "ms", "o"];
            if ("hidden" in document) {
                return "hidden"
            }
            for (var i = 0; i < prefixes.length; i++) {
                if (prefixes[i] + "Hidden" in document) {
                    return prefixes[i] + "Hidden"
                }
            }
            return null
        };
        AudioTagHandler.prototype.initIOS = function() {
            if (Klang.isIOS || Klang.isMobile) {
                for (var p in this._audioFiles) {
                    this._audioFiles[p].load()
                }
            }
        };
        AudioTagHandler.prototype.loadSoundFiles = function(group, readyCallback, progressCallback, loadFailedCallback) {
            if (readyCallback) {
                this._readyCallback = readyCallback
            }
            if (progressCallback) {
                this._progressCallback = progressCallback
            }
            if (typeof group === "string") {
                group = [group]
            }
            this._loadedFiles = 0;
            this._numFiles = 0;
            var _this = this;
            for (var p in this._audioFiles) {
                if (this._audioFiles.hasOwnProperty(p)) {
                    var audioFile = this._audioFiles[p];
                    var loadGroup = audioFile.data.load_group;
                    if (group === undefined || group.indexOf(loadGroup) != -1) {
                        if (audioFile.state === ATAudioFile.STATE_NOT_LOADED) {
                            this._numFiles++;
                            audioFile.load(function() {
                                _this.loadProgress()
                            })
                        }
                    }
                }
            }
            if (this._numFiles == 0 && this._readyCallback) {
                this._readyCallback(true)
            }
        };
        AudioTagHandler.prototype.getLoadGroups = function() {
            var i;
            var fileInfoArr = this._audioFiles || [];
            var groupTable = {};
            var listOfGroups = [];
            for (i in fileInfoArr) {
                var fileInfo = fileInfoArr[i];
                groupTable[fileInfo.data.load_group] = fileInfo.data.load_group
            }
            for (i in groupTable) {
                listOfGroups.push(i)
            }
            return listOfGroups
        };
        AudioTagHandler.prototype.loadProgress = function() {
            this._loadedFiles++;
            if (this._progressCallback) {
                this._progressCallback(this._loadedFiles / this._numFiles * 100)
            }
            if (this._readyCallback && this._loadedFiles == this._numFiles) {
                var _this = this;
                setTimeout(function() {
                    _this._readyCallback(true)
                }, 200)
            }
        };
        AudioTagHandler.prototype.triggerEvent = function(name, args) {
            var str = "";
            for (var i = 0; i < args.length; i++) {
                str += args[i] + ", "
            }
            if (name != "sound_position") {
                var arg = "";
                if (args) {
                    arg = args[0]
                }
            }
            if (!this._events) {
                return
            }
            try {
                var eventTarget = this._events[name];
                if (typeof eventTarget == "string") {
                    var process = this._processes[eventTarget];
                    if (process) {
                        process.start(args)
                    }
                } else {
                    if (eventTarget) {
                        for (var ix = 0, len = eventTarget.length; ix < len; ix++) {
                            var processName = eventTarget[ix];
                            var process = this._processes[processName];
                            if (process) {
                                process.start(args)
                            }
                        }
                    }
                }
            } catch (ex) {
                Klang.err("Klang: error when triggering event '" + name + "': " + ex.name + ": " + ex.message)
            }
        };
        AudioTagHandler.prototype.getFocusBlurVolume = function() {
            return this._focusBlurVolume
        };
        AudioTagHandler.prototype.setFocusBlurVolume = function(value) {
            value = Math.max(0, Math.min(value, 1));
            this._focusBlurVolume = value;
            for (var a in this._audio) {
                var audio = this._audio[a];
                if (audio && audio.setVolume && audio.getOutput()) {
                    var audioOut = audio.getOutput();
                    if (audioOut) {
                        audio.setVolume(audioOut.getVolume())
                    }
                }
            }
        };
        AudioTagHandler.prototype.getGlobalVolume = function() {
            return this._globalVolume
        };
        AudioTagHandler.prototype.setGlobalVolume = function(value) {
            value = Math.max(0, Math.min(value, 1));
            this._globalVolume = value;
            for (var a in this._audio) {
                var audio = this._audio[a];
                if (audio && audio.setVolume && audio.getOutput) {
                    var audioOut = audio.getOutput();
                    if (audioOut) {
                        audio.setVolume(audioOut.getVolume())
                    }
                }
            }
        };
        AudioTagHandler.prototype.fadeGlobalVolume = function(value, duration) {
            value = Math.max(0, Math.min(value, 1));
            if (this._globalFadeTimer) {
                clearInterval(this._globalFadeTimer)
            }
            var _this = this;
            var fadeSteps = Math.round(duration * 1000) / 10;
            var volumeStep = (this._globalVolume - value) / fadeSteps;
            this._globalFadeTimer = setInterval(function() {
                _this._globalVolume = _this._globalVolume - volumeStep;
                fadeSteps--;
                for (var a in _this._audio) {
                    var audio = _this._audio[a];
                    if (audio && audio.setVolume && audio.getOutput) {
                        audio.setVolume()
                    }
                }
                if (fadeSteps <= 0) {
                    clearInterval(_this._globalFadeTimer)
                }
            }, 10)
        };
        AudioTagHandler.prototype.getLimitSounds = function() {
            return this._limitSounds
        };
        AudioTagHandler.prototype.stopAll = function(priority) {
            for (var a in this._audio) {
                if (priority === undefined || this._audio[a]._priority == priority) {
                    this._audio[a].stop()
                }
            }
            this.stopPeriodic();
            return this
        };
        AudioTagHandler.prototype.getObject = function(name) {
            return this._audioFiles[name] || this._audio[name]
        };
        AudioTagHandler.prototype.playPeriodic = function(obj, maxSec, minSec) {
            clearTimeout(this._periodicTimer);
            var _this = this;
            this._periodicTimer = setTimeout(function() {
                obj.play();
                _this.playPeriodic(obj, maxSec, minSec)
            }, Klang.Util.random(maxSec * 1000, minSec * 1000))
        };
        AudioTagHandler.prototype.stopPeriodic = function() {
            clearTimeout(this._periodicTimer)
        };
        return Klang.AudioTagHandler = AudioTagHandler
    });
    Module(function(Klang) {
        function Scheduler() {
            this._updateTime = 100;
            this._lookAHead = this._updateTime * 2;
            this._callbacks = []
        }
        Scheduler.prototype.scheduleClose = function(callback) {
            var timeOffset = callback.targetTime - Klang.context.currentTime;
            setTimeout(function() {
                callback.func.apply(callback.ctx)
            }, timeOffset * 1000)
        };
        Scheduler.prototype.runScheduler = function() {
            if (this._callbacks.length > 0) {
                var currentTime = Klang.context.currentTime;
                for (var ix = 0; ix < this._callbacks.length; ix++) {
                    var callback = this._callbacks[ix];
                    if (currentTime + this._lookAHead >= callback.targetTime) {
                        this.scheduleClose(callback);
                        this._callbacks.splice(ix, 1);
                        ix--
                    }
                }
                this._lastTime = currentTime;
                var _this = this;
                this._scheduler = setTimeout(function() {
                    _this.runScheduler()
                }, _this._updateTime)
            } else {
                this.stop()
            }
        };
        Scheduler.prototype.start = function() {
            this._started = true;
            this._lastTime = Klang.context.currentTime;
            clearTimeout(this._scheduler);
            this.runScheduler()
        };
        Scheduler.prototype.stop = function() {
            this._started = false;
            clearTimeout(this._scheduler);
            this._scheduler = null
        };
        Scheduler.prototype.delay = function(targetTime, func, ctx) {
            return this.at(Klang.context.currentTime + targetTime, func, ctx)
        };
        Scheduler.prototype.at = function(targetTime, func, ctx) {
            if (targetTime < Klang.context.currentTime) {
                return this
            }
            this._callbacks.push({
                ctx: ctx || this,
                func: func,
                targetTime: targetTime
            });
            if (!this._started) {
                this.start()
            }
            return this
        };
        Scheduler.prototype.cancel = function(func) {
            for (var i = 0; i < this._callbacks.length; i++) {
                if (this._callbacks[i]["func"] && this._callbacks[i]["func"] === func) {
                    this._callbacks.splice(i, 1);
                    break
                }
            }
            return this
        };
        return Klang.Model.Scheduler = Scheduler
    });
    Module(function(Klang) {
        function SyncCountdown(targetStep, process, args) {
            this._currentStep = 0;
            this._targetStep = targetStep;
            this._process = process;
            this._args = args
        }
        SyncCountdown.prototype.advance = function(step) {
            this._currentStep += step
        };
        SyncCountdown.prototype.performAction = function() {
            if (typeof this._process == "string") {
                new Function("Core", "Model", "Util", "args", this._process)(Core, Model, Util, this._args)
            } else {
                this._process.start(this._args)
            }
        };
        Object.defineProperty(SyncCountdown.prototype, "finished", {
            get: function() {
                return this._currentStep >= this._targetStep
            },
            enumerable: true,
            configurable: true
        });
        return SyncCountdown
    });
    Module(function(Klang) {
        function SyncHandler() {
            this._timers = []
        }
        SyncHandler.prototype.addSyncCountdown = function(countdown) {
            this._timers.push(countdown)
        };
        SyncHandler.prototype.update = function(step) {
            for (var ix = 0; ix < this._timers.length; ix++) {
                var countdown = this._timers[ix];
                countdown.advance(step);
                if (countdown.finished) {
                    countdown.performAction();
                    this._timers.splice(ix, 1);
                    ix--
                }
            }
        };
        return Klang.Model.SyncHandler = SyncHandler
    });
    Module(function(Klang) {
        function TimeHandler() {
            this._callbacks = []
        }
        TimeHandler.inst = null;
        Object.defineProperty(TimeHandler, "instance", {
            get: function() {
                if (TimeHandler.inst == null) {
                    TimeHandler.inst = new TimeHandler()
                }
                return TimeHandler.inst
            },
            enumerable: true,
            configurable: true
        });
        TimeHandler.prototype.startScheduler = function() {
            if (this._callbacks.length > 0) {
                var currentTime = Klang.context.currentTime;
                var deltaTime = currentTime - this._lastTime;
                for (var ix = 0; ix < this._callbacks.length; ix++) {
                    var callback = this._callbacks[ix];
                    callback.timePassed += deltaTime;
                    if (callback.timePassed >= callback.targetTime) {
                        callback.obj[callback.func]();
                        this._callbacks.splice(ix, 1);
                        ix--
                    }
                }
                this._lastTime = currentTime;
                var _this = this;
                this._scheduler = setTimeout(function() {
                    _this.startScheduler()
                }, Klang.core.Core.settings.timehandler_lookahead)
            } else {
                this.stop()
            }
        };
        TimeHandler.prototype.start = function() {
            this._started = true;
            this._lastTime = Klang.context.currentTime;
            clearTimeout(this._scheduler);
            this.startScheduler()
        };
        TimeHandler.prototype.stop = function() {
            this._started = false;
            clearTimeout(this._scheduler);
            this._scheduler = null
        };
        TimeHandler.prototype.registerMethodCallback = function(obj, func, targetTime) {
            this._callbacks.push({
                obj: obj,
                func: func,
                timePassed: 0,
                targetTime: targetTime
            });
            if (!this._started) {
                this.start()
            }
            return this
        };
        TimeHandler.prototype.removeMethodCallback = function(obj, func) {
            for (var ix = 0, len = this._callbacks.length; ix < len; ix++) {
                var callback = this._callbacks[ix];
                if (callback.obj == obj && callback.func == func) {
                    this._callbacks.splice(ix, 1);
                    return
                }
            }
            return this
        };
        return Klang.Model.TimeHandler = TimeHandler
    });
    Module(function(Klang) {});
    window.Klang = Klang;
    if (typeof define === "function" && define.amd) {
        define("Klang", function() {
            return window.Klang
        })
    } else {
        if (typeof module === "object") {
            module.exports = window.Klang
        }
    }
}(this));
Class(function DeviceOrientation() {
    Inherit(this, Component);
    var _this = this;
    var $text;
    var Accel = Mobile.Accelerometer;
    var _delta = new Vector2();
    var _values = new Vector2();
    var _last = new Vector2();
    var _offset = new Vector2();
    var _orientation = new Vector2();
    var _accel = new Vector2();
    var _accelDelta = new Vector2();
    this.orientation = _orientation;
    this.delta = _delta;
    Hydra.ready(function() {
        _delta.count = 0;
        Accel.capture();
        Accel.on("orientation", update)
    });

    function update() {
        _accelDelta.subVectors(Accel, _accel);
        _accel.copy(Accel);
        _values.set(Utils.toDegrees(Accel.beta), Utils.toDegrees(Accel.alpha));
        _delta.subVectors(_values, _last);
        _last.copy(_values);
        if (Math.abs(_delta.x) < 0.5) {
            _delta.count++;
            if (_delta.count > 60) {
                _offset.copy(_values)
            }
        } else {
            _delta.count = 0
        }
        _orientation.copy(_values).sub(_offset)
    }

    function mapToPlane(deg) {
        var absDeg = Math.abs(deg);
        if (deg > 0 && deg < 360) {
            return Utils.range(deg, 0, 360, 0, 1)
        }
        if (deg < 0 && deg > -360) {
            return Utils.range(deg, 0, -360, 1, 0)
        }
        return 0
    }
}, "static");
Class(function ThrowMechanic() {
    Inherit(this, Component);
    var _this = this;
    var _accel = Mobile.Accelerometer;
    var _zero = new Vector3();
    var _xyz = new Vector3();
    var _xyzDelta = new Vector3();
    var _count = 0;
    var _fireAccel = -1;
    var _prevent, _timer;
    this.THROW = "throw";
    Hydra.ready(function() {
        addListeners()
    });

    function update() {
        if (_prevent) {
            return
        }
        if (_xyz.equals(_zero)) {
            _xyz.set(_accel.x, _accel.y, _accel.z)
        } else {
            _this.HAS_MOTION = true
        }
        _xyzDelta.subVectors(_accel, _xyz);
        _xyz.set(_accel.x, _accel.y, _accel.z);
        var delta = _xyzDelta.length() * 10;
        if (delta > 130) {
            if (delta > _fireAccel) {
                _fireAccel = delta
            }
            checkFire()
        }
    }

    function checkFire() {
        _prevent = true;
        _this.events.fire(_this.THROW, {
            accel: _fireAccel
        });
        _fireAccel = -1;
        _count = 0;
        _xyzDelta.clear();
        _xyz.clear();
        _this.delayedCall(function() {
            _prevent = false
        }, 1000)
    }

    function getOrientation() {
        var y = DeviceOrientation.orientation.y;
        if (y > 100 || y < 0) {
            return -1
        }
        return Utils.range(y, 0, 40, 0, 1)
    }

    function addListeners() {
        _accel.capture();
        _accel.on("motion", update)
    }
}, "static");
Class(function PinchMechanism() {
    Inherit(this, Component);
    var _this = this;
    var _p0 = new Vector2();
    var _p1 = new Vector2();
    var _calc = new Vector2();
    var _dist = 0;
    var _start = 0;
    var _percent = 0;
    var _touching = false;
    this.max = 150;

    function setTouches(e) {
        var p0 = e.touches[0];
        var p1 = e.touches[1];
        if (p0) {
            _p0.set(p0.pageX, p0.pageY)
        }
        if (p1) {
            _p1.set(p1.pageX, p1.pageY)
        }
    }

    function addListeners() {
        Stage.bind("touchstart", touchStart);
        Stage.bind("touchend", touchEnd);
        Stage.bind("touchcancel", touchEnd)
    }

    function removeListeners() {
        Stage.unbind("touchstart", touchStart);
        Stage.unbind("touchend", touchEnd);
        Stage.unbind("touchcancel", touchEnd);
        Stage.unbind("touchmove", touchMove)
    }

    function touchStart(e) {
        if (e.touches.length == 2 && !_touching) {
            _touching = true;
            _start = _percent;
            setTouches(e);
            Stage.bind("touchmove", touchMove);
            _dist = _calc.subVectors(_p0, _p1).length()
        }
    }

    function touchMove(e) {
        setTouches(e);
        var dist = _calc.subVectors(_p0, _p1).length();
        var absDist = dist - _dist;
        var perc = Utils.range(absDist, 0, _this.max, 0, 1);
        _percent = Utils.clamp(_start + perc, 0, 1)
    }

    function touchEnd(e) {
        if (!_touching) {
            return
        }
        _touching = false;
        _start = _percent;
        Stage.unbind("touchmove", touchMove);
        _this.events.fire(HydraEvents.COMPLETE)
    }
    this.set("percent", function(value) {
        _percent = value
    });
    this.get("percent", function() {
        return _percent
    });
    this.start = function() {
        addListeners()
    };
    this.stop = function() {
        removeListeners()
    };
    this.snapTo = function(to, time, callback) {
        var d = new DynamicObject({
            v: _percent
        });
        d.tween({
            v: to
        }, time, "linear", function() {
            _percent = d.v;
            _start = d.v
        }, callback)
    };
    this.onDestroy = function() {
        removeListeners()
    }
});
Module(function DefaultPlane() {
    function getPlane() {
        return {
            id: Utils.timestamp(),
            data: {
                pool: "west",
                date: "May 18, 2016",
                address: "Mountain view, CA",
                country: "USA",
                countries: 1,
                stamps: [{
                    position: {
                        x: 0.5,
                        y: 0.5
                    },
                    rotation: 45,
                    color: Config.STAMPS_COLORS[Utils.doRandom(0, Config.STAMPS_COLORS.length - 1)],
                    style: 7,
                    image: 1,
                    date: "05.18.16",
                    address: "Mountain view, CA",
                    country: "USA",
                    coords: [34.052234, -118.243685]
                }]
            }
        }
    }
    this.exports = getPlane()
});
Class(function PlanesUtil() {
    (function() {
        initTweens()
    })();

    function initTweens() {
        TweenManager.addCustomEase({
            name: "hardOut",
            curve: "cubic-bezier(.1,.54,0,.99)"
        });
        TweenManager.addCustomEase({
            name: "slideInOut",
            curve: "cubic-bezier(.36,.13,.11,.98)"
        })
    }
}, "Static");
Class(function ScaleMechanic() {
    Inherit(this, Component);
    var _this = this;
    var _interaction, _active;
    var _config = [{
        point: new Vector2(0.5, 0.25),
        control: [{
            axis: "y",
            scale: "z",
            distance: -300,
            limits: [0.7, 1.1],
        }, {
            axis: "x",
            scale: "x",
            distance: -300,
            limits: [0.6, 1.6],
        }]
    }, {
        point: new Vector2(0.5, 0.75),
        control: [{
            axis: "y",
            scale: "z",
            distance: 300,
            limits: [0.7, 1.1],
        }, {
            axis: "x",
            scale: "x",
            distance: -300,
            limits: [0.6, 1.6],
        }]
    }, ];
    var _values = {
        x: 1,
        z: 1,
    };
    var _touchPerc = new Vector2();
    (function() {
        initInteraction()
    })();

    function initInteraction() {
        _interaction = new Interaction.Input(Stage);
        _interaction.onStart = onStart;
        _interaction.onUpdate = onUpdate
    }

    function onStart(e) {
        _touchPerc.set(e.x / Stage.width, e.y / Stage.height);
        var dist = 1000;
        _config.forEach(function(config) {
            var d = _touchPerc.distanceTo(config.point);
            if (d < dist) {
                dist = d;
                _active = config;
                _active.control.forEach(function(c) {
                    c.startValue = _values[c.scale]
                })
            }
        })
    }

    function onUpdate(e) {
        _active.control.forEach(function(c) {
            _values[c.scale] = c.startValue + e[c.axis] / c.distance;
            _values[c.scale] = Math.max(c.limits[0], Math.min(c.limits[1], _values[c.scale]));
            if (typeof _this.onUpdate == "function") {
                _this.onUpdate(c.scale, _values[c.scale])
            }
        })
    }
});
Class(function SDFFontLoader() {
    Inherit(this, Component);
    var _this = this;
    (function() {})();

    function parse(data) {
        if (!data) {
            throw new Error("no data provided")
        }
        data = data.toString().trim();
        var output = {
            pages: [],
            chars: [],
            kernings: []
        };
        var lines = data.split(/\r\n?|\n/g);
        if (lines.length === 0) {
            throw new Error("no data in BMFont file")
        }
        for (var i = 0; i < lines.length; i++) {
            var lineData = splitLine(lines[i], i);
            if (!lineData) {
                continue
            }
            if (lineData.key === "page") {
                if (typeof lineData.data.id !== "number") {
                    throw new Error("malformed file at line " + i + " -- needs page id=N")
                }
                if (typeof lineData.data.file !== "string") {
                    throw new Error("malformed file at line " + i + ' -- needs page file="path"')
                }
                output.pages[lineData.data.id] = lineData.data.file
            } else {
                if (lineData.key === "chars" || lineData.key === "kernings") {} else {
                    if (lineData.key === "char") {
                        output.chars.push(lineData.data)
                    } else {
                        if (lineData.key === "kerning") {
                            output.kernings.push(lineData.data)
                        } else {
                            output[lineData.key] = lineData.data
                        }
                    }
                }
            }
        }
        return output
    }

    function splitLine(line, idx) {
        line = line.replace(/\t+/g, " ").trim();
        if (!line) {
            return null
        }
        var space = line.indexOf(" ");
        if (space === -1) {
            throw new Error("no named row at line " + idx)
        }
        var key = line.substring(0, space);
        line = line.substring(space + 1);
        line = line.replace(/letter=[\'\"]\S+[\'\"]/gi, "");
        line = line.split("=");
        line = line.map(function(str) {
            return str.trim().match((/(".*?"|[^"\s]+)+(?=\s*|\s*$)/g))
        });
        var data = [];
        for (var i = 0; i < line.length; i++) {
            var dt = line[i];
            if (i === 0) {
                data.push({
                    key: dt[0],
                    data: ""
                })
            } else {
                if (i === line.length - 1) {
                    data[data.length - 1].data = parseData(dt[0])
                } else {
                    data[data.length - 1].data = parseData(dt[0]);
                    data.push({
                        key: dt[1],
                        data: ""
                    })
                }
            }
        }
        var out = {
            key: key,
            data: {}
        };
        data.forEach(function(v) {
            out.data[v.key] = v.data
        });
        return out
    }

    function parseData(data) {
        if (!data || data.length === 0) {
            return ""
        }
        if (data.indexOf('"') === 0 || data.indexOf("'") === 0) {
            return data.substring(1, data.length - 1)
        }
        if (data.indexOf(",") !== -1) {
            return parseIntList(data)
        }
        return parseInt(data, 10)
    }

    function parseIntList(data) {
        return data.split(",").map(function(val) {
            return parseInt(val, 10)
        })
    }
    this.load = function(asset, callback) {
        XHR.get(asset, function(data) {
            if (typeof callback == "function") {
                callback(parse(data))
            }
        }, "text")
    }
}, "static");
Class(function SwipeMechanic(_object) {
    Inherit(this, Component);
    var _this = this;
    var _interaction;
    var _progressTargetStart = 0;
    var _progressTarget = 0;
    var _progressVel = 0;
    var _progress = 0;
    (function() {
        initInteraction();
        addHandlers();
        Render.start(loop)
    })();

    function initInteraction() {
        _interaction = new Interaction.Input(_object)
    }

    function loop() {
        springEase();
        if (!_this.isTouching) {
            _progressTargetStart *= 0.5;
            _progressTarget *= 0.5
        }
        if (typeof _this.onUpdate == "function") {
            _this.onUpdate({
                target: _progressTargetStart + _progressTarget,
                velocity: _progressVel,
                spring: _progress,
            })
        }
    }

    function springEase() {
        var spring = 0.1;
        var friction = 0.75;
        _progressVel += (_progressTargetStart + _progressTarget - _progress) * spring;
        _progress += (_progressVel *= friction)
    }

    function addHandlers() {
        _interaction.onStart = onStart;
        _interaction.onUpdate = onUpdate;
        _interaction.onEnd = onEnd
    }

    function onStart() {
        _this.isTouching = true;
        _progressTargetStart = _progressTarget;
        _progressTarget = 0
    }

    function onUpdate(e) {
        _progressTarget = Math.min(0, e.y)
    }

    function onEnd() {
        _this.isTouching = false
    }
    this.onDestroy = function() {
        Render.stop(loop)
    }
});
Class(function Tests() {
    var _this = this;
    this.RETURN_USER = function() {
        if (Hydra.HASH && Hydra.HASH.indexOf("return") !== -1) {
            return true
        }
        if (Data.Planes.getCreatedPlanes().length !== 0) {
            return true
        }
        return false
    };
    this.AT_IO = function() {
        if (Hydra.HASH && Hydra.HASH.indexOf("io") !== -1) {
            return true
        }
        if (Device.mobile && Data.User.isAtIO()) {
            return true
        }
        return false
    };
    this.PEACE_DAY = function() {
        var today = new Date();
        var date = today.getDate();
        var month = today.getMonth() + 1;
        var year = today.getFullYear();
        if (year == 2016 && month == 9 && date == 21) {
            return true
        }
        return false
    };
    this.useDOF = function() {
        return false
    };
    this.getPlaneReduce = function() {
        if (GPU.eq(0) || GPU.mobileEq(0)) {
            return 0.5
        }
        if (GPU.eq(1)) {
            return 0.7
        }
        return 1
    };
    this.GET_TEST_RESULTS = function() {
        if (!_this.RESULT) {
            return 0
        }
        if (Device.graphics.webgl.detect("intel")) {
            return 1
        }
        return Utils.range(_this.RESULT, 9, 20, 0, 1, true)
    };
    this.getDPR = function() {
        if (GPU.OVERSIZED) {
            return 0.8
        }
        if (GPU.lt(1) || GPU.mobileEq(0)) {
            return 1
        }
        return 2
    };
    this.retinaRender = function() {
        if (GPU.lt(1)) {
            return false
        }
        if (Config.BEAST) {
            return true
        }
        return true
    };
    this.slowMeshUpload = function() {
        if (Mobile.os == "Android" && GPU.mobileLT(1)) {
            return true
        }
        return false
    };
    this.useReflections = function() {
        return Config.BEAST
    };
    this.oceanAnimation = function() {
        if (Config.BEAST) {
            return true
        }
        if (Device.mobile) {
            return false
        }
        if (GPU.gt(2)) {
            return true
        }
        return false
    };
    this.NO_CSS_BLEND = function() {
        if (Hardware.SAMSUNGS6 || Device.detect("samsung") || GPU.mobileEq(0) || Mobile.os == "Android") {
            return true
        }
        return false
    }
}, "static");
Class(function TiltShift() {
    Inherit(this, NukePass);
    var _this = this;
    this.uniforms = {
        blur: {
            type: "f",
            value: 300
        },
        gradientBlur: {
            type: "f",
            value: 600
        },
        far: {
            type: "f",
            value: 0
        },
        start: {
            type: "v2",
            value: new THREE.Vector2(-200, Stage.height)
        },
        end: {
            type: "v2",
            value: new THREE.Vector2(Stage.width, Stage.height + 200)
        },
        delta: {
            type: "v2",
            value: new THREE.Vector2(30, 30)
        },
        texSize: {
            type: "v2",
            value: new THREE.Vector2(Stage.width, Stage.height)
        },
        tDepth: {
            type: "t",
            value: null
        },
        earth: {
            type: "v3",
            value: null
        },
    };
    this.init()
});
Class(function TiltShiftShader() {
    Inherit(this, Component);
    var _this = this;
    var _x, _y;
    (function() {
        initPasses()
    })();

    function initPasses() {
        _x = _this.initClass(TiltShiftX);
        _y = _this.initClass(TiltShiftY);
        _this.x = _x;
        _this.y = _y
    }
    this.set("blur", function(v) {
        _x.set("blur", v);
        _y.set("blur", v)
    });
    this.set("gradientBlur", function(v) {
        _x.set("gradientBlur", v);
        _y.set("gradientBlur", v)
    });
    this.set("start", function(v) {
        _x.set("start", v);
        _y.set("start", v);
        _x.update();
        _y.update()
    });
    this.set("end", function(v) {
        _x.set("end", v);
        _y.set("end", v);
        _x.update();
        _y.update()
    });
    this.set("depth", function(depth) {
        _x.set("tDepth", depth);
        _y.set("tDepth", depth)
    });
    this.set("far", function(far) {
        _x.set("far", far);
        _y.set("far", far)
    });
    this.set("earth", function(earth) {
        _x.set("earth", earth);
        _y.set("earth", earth)
    })
});
Class(function TiltShiftX() {
    Inherit(this, TiltShift);
    var _this = this;
    (function() {
        updateDelta()
    })();

    function updateDelta() {
        var dx = _this.uniforms.end.value.x - _this.uniforms.start.value.x;
        var dy = _this.uniforms.end.value.y - _this.uniforms.start.value.y;
        var d = Math.sqrt(dx * dx + dy * dy);
        _this.uniforms.delta.value.x = dx / d;
        _this.uniforms.delta.value.y = dy / d
    }
    this.update = updateDelta
});
Class(function TiltShiftY() {
    Inherit(this, TiltShift);
    var _this = this;
    (function() {
        updateDelta()
    })();

    function updateDelta() {
        var dx = _this.uniforms.end.value.x - _this.uniforms.start.value.x;
        var dy = _this.uniforms.end.value.y - _this.uniforms.start.value.y;
        var d = Math.sqrt(dx * dx + dy * dy);
        _this.uniforms.delta.value.x = -dy / d;
        _this.uniforms.delta.value.y = dx / d
    }
    this.update = updateDelta
});
Class(function WiggleBehavior(_position) {
    Inherit(this, Component);
    var _this = this;
    var _angle = Utils.toRadians(Utils.doRandom(0, 360));
    var _wobble = new Vector3();
    var _origin = new Vector3();
    this.target = _wobble;
    this.scale = 0.1;
    this.alpha = 0.025;
    this.speed = 1;
    this.zMove = 2;
    this.enabled = true;
    (function() {
        if (_position) {
            _origin.copyFrom(_position)
        }
    })();
    this.update = function() {
        if (!_this.enabled || _this.disabled) {
            return
        }
        var t = window.Render ? Render.TIME : Date.now();
        _wobble.x = Math.cos(_angle + t * (0.00075 * _this.speed)) * (_angle + Math.sin(t * (0.00095 * _this.speed)) * 200);
        _wobble.y = Math.sin(Math.asin(Math.cos(_angle + t * (0.00085 * _this.speed)))) * (Math.sin(_angle + t * (0.00075 * _this.speed)) * 150);
        _wobble.x *= Math.sin(_angle + t * (0.00075 * _this.speed)) * 2;
        _wobble.y *= Math.cos(_angle + t * (0.00065 * _this.speed)) * 1.75;
        _wobble.x *= Math.cos(_angle + t * (0.00075 * _this.speed)) * 1.1;
        _wobble.y *= Math.sin(_angle + t * (0.00025 * _this.speed)) * 1.15;
        _wobble.z = Math.sin(_angle + _wobble.x * 0.0025) * (100 * _this.zMove);
        _wobble.multiply(_this.scale);
        _wobble.add(_origin);
        if (_position) {
            if (_this.ease) {
                _position.interp(_wobble, _this.alpha, _this.ease)
            } else {
                _position.lerp(_wobble, _this.alpha)
            }
        }
    };
    this.copyOrigin = function() {
        _origin.copyFrom(_position)
    }
});
Class(function Data() {
    Inherit(this, Model);
    var _this = this;
    (function() {})()
}, "static");
Data.Class(function Notifications() {
    Inherit(this, Model);
    var _this = this;
    (function() {})();

    function prepareMessage(plane) {
        if (!plane) {
            return
        }
        var stamps = plane.data.stamps;
        var latestStamp = stamps[stamps.length - 1];
        var total = stamps.length - 1;
        var message;
        var miles = ThrowPlanes.instance().getDistance(stamps);
        if (total === 0) {
            message = "Your plane is in " + latestStamp.address + ". No one has caught your plane yet. "
        } else {
            if (total === 1) {
                message = "Your plane has travelled " + numberWithCommas(miles) + " miles to " + latestStamp.address + "."
            } else {
                message = "Your plane has travelled " + numberWithCommas(miles) + " miles and visited " + total + " cities."
            }
        }
        return {
            type: "push",
            id: plane.id,
            title: "Your plane just arrived in " + latestStamp.address,
            body: message
        }
    }

    function numberWithCommas(x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
    }
    this.getMessage = function(callback) {
        _this.delayedCall(function() {
            Data.Planes.refreshPlanes(function(planes) {
                var latestPlane;
                if (planes && planes.length > 0) {
                    for (var i = 0; i < planes.length; i++) {
                        var plane = planes[i];
                        if (latestPlane) {
                            if (plane.data.lastUpdated && plane.data.lastUpdated > latestPlane.data.lastUpdated) {
                                latestPlane = plane
                            }
                        } else {
                            latestPlane = plane
                        }
                    }
                }
                if (!latestPlane) {
                    latestPlane = planes[planes.length - 1]
                }
                if (callback) {
                    callback(prepareMessage(latestPlane));
                    callback = null
                }
            })
        }, 1000)
    }
});
Data.Class(function WebNotifications() {
    Inherit(this, Model);
    var _this = this;
    var _registration, _subscription;
    (function() {})();

    function init() {
        if (!("serviceWorker" in navigator)) {
            return
        }
        _this.active = true;
        navigator.serviceWorker.register("sw.js").then(handleRegistration).then(handleReady).then(handleError).then(listen)
    }

    function handleRegistration(e) {
        _registration = e
    }

    function handleReady() {
        uploadAssets()
    }

    function handleError(e) {}

    function getAssets() {
        var assets = [];
        assets.push(Config.CDN + "assets/css/style.css");
        assets.push(Config.CDN + "assets/js/planes.js?" + (window._CACHE_ || 0));
        for (var i = 0; i < ASSETS.length; i++) {
            var asset = ASSETS[i];
            var path = Config.CDN + asset;
            if (asset.strpos("images/stamps")) {
                path = Config.PROXY + asset
            }
            assets.push(path)
        }
        return assets
    }

    function uploadAssets() {
        if (navigator.serviceWorker) {
            if (navigator.serviceWorker.controller) {
                navigator.serviceWorker.controller.postMessage(getAssets())
            } else {
                navigator.serviceWorker.getRegistration("https://paperplanes.world/").then(function(reg) {
                    if (reg.active) {
                        reg.active.postMessage(getAssets())
                    }
                })
            }
        } else {
            console.log("sw not available")
        }
    }

    function subscribe() {
        if (_this.requested) {
            return
        }
        _this.requested = true;
        if (_registration) {
            return _registration.pushManager.subscribe({
                userVisibleOnly: true
            }).then(function(pushSubscription) {
                return new Promise(function(resolve, reject) {
                    _subscription = pushSubscription;
                    var paths = _subscription.endpoint.split("/");
                    var id = paths[paths.length - 1];
                    if (!Storage.set("register_notification")) {
                        Storage.set("register_notification", true);
                        GATracker.trackEvent("web_notification", "web_notification", "web_notification")
                    }
                    Data.User.setSubscriptionId(id);
                    resolve()
                })
            })
        }
    }

    function listen() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            if (event.data.error) {
                reject(event.data.error)
            } else {
                switch (event.data.type) {
                    case "push":
                        prepareMessage();
                        break
                }
            }
        };
        if (_registration.active) {
            _registration.active.postMessage({
                type: "register"
            }, [channel.port2])
        }
    }

    function prepareMessage() {
        if ("serviceWorker" in navigator) {
            Data.Notifications.getMessage(function(message) {
                _registration.active.postMessage(message)
            })
        }
    }

    function unsubscribe() {
        _subscription.unsubscribe().then(function(event) {
            Data.User.setSubscriptionId(null)
        })
    }
    this.init = function() {
        init()
    };
    this.subscribe = function() {
        if (!_this.active) {
            return
        }
        _this.delayedCall(subscribe, 2000)
    }
});
Data.Class(function Planes() {
    Inherit(this, Model);
    var _this = this;
    var _caughtPlane;
    var _createdPlanes = Storage.get("created_planes") || [];
    var _defaultPlane = require("DefaultPlane");
    var _myPlanes = Storage.get("myPlanes") || [];
    var _offline = Storage.get("uploadOffline") || [];
    this.count = 0;
    (function() {
        if (Device.mobile) {
            retrievePlanes()
        }
        addListeners();
        if (Mobile.Notifications.DATA) {
            mobileNotification(Mobile.Notifications.DATA)
        }
    })();

    function retrievePlanes(callback) {
        if (!Mobile.System.CONNECTIVITY) {
            return
        }
        var queue = [];
        var myPlanes = [];
        var load = function() {
            var obj = queue.shift();
            if (!obj || !obj.id) {
                _myPlanes = myPlanes;
                Storage.set("myPlanes", _myPlanes);
                _this.events.fire(PlanesEvents.LOADED_MY_PLANES);
                if (callback) {
                    callback(_myPlanes);
                    callback = null
                }
                return
            }
            var xhr = XHR.get(Config.APP_ENGINE + "/getData", {
                type: "planes",
                id: obj.id
            }, function(e) {
                if (!e.data) {
                    _myPlanes.push(obj);
                    console.log("unsuccessful", obj.id);
                    load();
                    return
                }
                var plane = e;
                plane.data = JSON.parse(plane.data);
                plane.number = obj.number;
                myPlanes.push(plane);
                load()
            })
        };
        _createdPlanes.forEach(function(obj) {
            queue.push(obj)
        });
        var planeTotal = Math.min(_createdPlanes.length, 5);
        for (var i = 0; i < planeTotal; i++) {
            load()
        }
    }

    function uploadWhenOnline(data) {
        _offline.push(data);
        Storage.set("uploadOffline", _offline)
    }

    function addListeners() {
        if (Device.mobile) {
            _this.events.subscribe(Mobile.Events.INTERNET_STATUS, internetStatus)
        }
        _this.events.subscribe(Mobile.Events.NOTIFICATION, mobileNotification)
    }

    function internetStatus(e) {
        if (e.connected) {
            _offline.forEach(function(data) {
                var id = data.__saveId;
                delete data.__saveId;
                XHR.post(Config.APP_ENGINE + "/setData", {
                    type: "planes",
                    data: JSON.stringify(data),
                    id: id
                })
            });
            _offline = [];
            Storage.set("uploadOffline", [])
        }
    }

    function mobileNotification(e) {
        var lastNot = Storage.get("handleNotification") || 0;
        if (Render.TIME - lastNot < 3000) {
            return
        }
        Storage.set("handleNotification", Render.TIME);
        Mobile.PushNotifications.reload();
        _this.delayedCall(function() {
            if (e.data === "new") {
                location = location.protocol + location.pathname + "?new=true"
            } else {
                if (e.data.strpos("plane")) {
                    var id = e.data.split("/")[1];
                    location = location.protocol + location.pathname + "?plane=" + id
                }
            }
        }, 250)
    }
    this.createPlane = function(data, callback) {
        var err = new Error();
        var stack = err.stack.toString();
        if (!Device.mobile || !stack.strpos("endFlow")) {
            return callback()
        }
        var id = Utils.timestamp();
        data.pool = Data.User.getPool();
        Data.WebNotifications.subscribe();
        var subscriptionID = Data.User.getSubscriptionId();
        data.subscriptionId = subscriptionID || -1;
        data.lastUpdated = Date.now();
        data.client = Mobile.isNative() ? "app" : "web";
        var handleData = function(e) {
            var store = {};
            store.data = Utils.cloneObject(data);
            store.id = id;
            store.subscriptionId = subscriptionID;
            store.number = e.count + 1;
            store.pool = store.data.pool;
            _createdPlanes.push(store);
            if (_createdPlanes.length > 50) {
                _createdPlanes.shift()
            }
            Storage.set("created_planes", _createdPlanes);
            _this.delayedCall(retrievePlanes, 500);
            _this.count = e.count + 1;
            if (typeof callback == "function") {
                callback(e.count + 1)
            }
        };
        if (Mobile.System.CONNECTIVITY) {
            XHR.post(Config.APP_ENGINE + "/setData", {
                type: "planes",
                data: JSON.stringify(data),
                id: id
            }, handleData)
        } else {
            var count = Storage.get("lastCount") || 0;
            handleData({
                count: count + Utils.doRandom(100, 1000)
            });
            data.__saveId = id;
            uploadWhenOnline(data)
        }
    };
    this.throwPlane = function(data, rethrow) {
        data.evt = rethrow ? "rethrow" : "throw_plane";
        data.atio = Data.User.isAtIO();
        Data.Socket.send(data)
    };
    this.updatePlane = function(stampData, callback) {
        if (!Device.mobile) {
            return
        }
        if (!_caughtPlane) {
            if (_this.count < 2) {
                _this.count = 2
            }
            callback();
            return
        }
        _caughtPlane.data.lastUpdated = Date.now();
        _caughtPlane.data.pool = Data.User.getPool();
        _caughtPlane.data.stamps.push(stampData);
        XHR.post(Config.APP_ENGINE + "/setData", {
            type: "planes",
            data: JSON.stringify(_caughtPlane.data),
            id: _caughtPlane.id
        }, function(e) {
            _this.count = e.count + 1;
            _caughtPlane = null;
            callback()
        })
    };
    this.refreshPlanes = function(callback) {
        retrievePlanes(callback)
    };
    this.getCreatedPlanes = function() {
        return _myPlanes
    };
    this.getLatestPlane = function(callback) {
        if (_myPlanes && _myPlanes.length > 0) {
            var obj = _myPlanes[0];
            var xhr = XHR.get(Config.APP_ENGINE + "/getData", {
                type: "planes",
                id: obj.id
            }, function(e) {
                if (!e.data) {
                    console.log("unsuccessful", obj.id);
                    callback({
                        success: false
                    });
                    return
                }
                var plane = e;
                plane.data = JSON.parse(plane.data);
                plane.number = obj.number;
                _myPlanes[0] = plane;
                callback(plane)
            })
        }
        return null
    };
    this.catchPlane = function(callback) {
        if (!Device.mobile) {
            return
        }
        var lookupPool = (function() {
            var pool = Data.User.getPool();
            if (pool == "world") {
                return Utils.headsTails(0, 1) ? "east" : "west"
            } else {
                if (pool == "west") {
                    return Utils.headsTails(0, 1) ? "east" : "world"
                } else {
                    return Utils.headsTails(0, 1) ? "west" : "world"
                }
            }
        })();
        XHR.get(Config.APP_ENGINE + "/select", {
            pool: lookupPool
        }, function(e) {
            if (e.fail || e.pool == "nopool") {
                callback(_defaultPlane.data);
                _caughtPlane = null;
                return
            }
            _caughtPlane = e;
            _caughtPlane.data = JSON.parse(_caughtPlane.data);
            callback(_caughtPlane.data)
        })
    };
    this.findPlaneByData = function(data) {
        for (var i = 0; i < _myPlanes.length; i++) {
            if (data.id == _myPlanes[i].id) {
                return _myPlanes[i]
            }
        }
    }
});
Data.Class(function Socket() {
    Inherit(this, Model);
    var _this = this;
    var _type, _pipe, _io, _ignore;
    var _exp = "p";
    var Pipe;
    this.SCREEN_IO = false;
    this.MOBILE_IO = false;
    this.MOBILE = false;
    this.DESKTOP = false;
    this.INITIAL_EVENT = {};
    (function() {
        HydraEvents.createLocalEmitter(_this);
        Hydra.ready(function() {
            defer(loadIO);
            addListeners()
        })
    })();

    function getActiveServers() {
        var url = "https://storage.googleapis.com/at-socketnetwork/assets/data/active_servers.json";
        XHR.get(url, function(data) {
            console.log(data)
        })
    }

    function loadIO() {
        Hydra.CDN = Hydra.CDN || "";
        Data.registerData();
        AssetLoader.loadAssets([Hydra.CDN + "assets/js/lib/_socketio.js"], Data.triggerData)
    }

    function init() {
        if (_this.SCREEN_IO) {
            Pipe = SocketPipeIO;
            _type = "io";
            _io = true
        } else {
            if (_this.MOBILE_IO) {
                Pipe = SocketPipeSender;
                _type = "s";
                _io = true
            } else {
                if (_this.MOBILE) {
                    Pipe = SocketPipeSender;
                    _type = "s"
                } else {
                    if (_this.DESKTOP) {
                        Pipe = SocketPipeReceiver;
                        _type = "r"
                    }
                }
            }
        }
        if (!Pipe) {
            return console.warn("No Pipe type found")
        }
        createPipe()
    }

    function createPipe() {
        _pipe = _this.initClass(Pipe, _type, _exp, _io);
        _pipe.onMessage = receiveData;
        _pipe.onEvent = receiveEvent;
        _pipe.sideMessage = sideMessage;
        _pipe.events.add(HydraEvents.READY, pipeReady)
    }

    function addListeners() {
        _this.events.subscribe(HydraEvents.BROWSER_FOCUS, browserFocus)
    }

    function browserFocus(e) {
        if (e.type == "blur") {
            _ignore = true
        } else {
            _ignore = false
        }
    }

    function receiveData(e) {
        if (e.test || (e.d && e.d.test)) {
            return console.log(e)
        }
        if (!_this.logged) {
            console.log(e);
            _this.logged = true
        }
        if (_ignore) {
            return
        }
        _this.fire("message", e)
    }

    function receiveEvent(e) {
        _this.INITIAL_EVENT = e;
        _this.fire("event", e)
    }

    function sideMessage(e) {
        _this.fire("side", e)
    }

    function pipeReady() {}
    this.set("experience", function(val) {
        _exp = val
    });
    this.send = function(data) {
        if (!_pipe) {
            return nextFrame(function() {
                _this.send(data)
            })
        }
        _pipe.send(data)
    };
    this.emitToSide = function(data) {
        if (!_pipe) {
            return nextFrame(function() {
                _this.emitToSide(data)
            })
        }
        _pipe.emitToSide(data)
    };
    this.getActiveServers = function() {
        getActiveServers()
    };
    this.calculateDistance = function(lat1, lon1, lat2, lon2) {
        var R = 6378.1;
        var dLat = Utils.toRadians(lat2 - lat1);
        var dLon = Utils.toRadians(lon2 - lon1);
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(Utils.toRadians(lat1)) * Math.cos(Utils.toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c
    };
    this.connect = function() {
        init()
    };
    this.test = function() {
        if (!_pipe) {
            return console.warn("no pipe!")
        }
        _pipe.send({
            test: true
        })
    }
});
Module(function SocketConfig() {
    this.exports = {
        io: {
            host: "funnel.socketnetwork.io",
            directPortStart: 7150,
            funnelPortStart: 7100,
            totalPorts: 4
        },
        app_engine: "app.socketnetwork.io"
    }
});
Class(function SocketPipeIO(_type, _exp) {
    Inherit(this, Component);
    var _this = this;
    var _send;
    var _config = require("SocketConfig").io;
    var _connections = [];
    var _event = {};
    var _send = {};
    var _alerted = false;
    (function() {
        if (!Hydra.HASH.strpos("side")) {
            initSockets(_config.directPortStart);
            initSockets(_config.funnelPortStart)
        } else {
            initSideConnection()
        }
    })();

    function initSockets(start) {
        var port = start;
        var max = port + _config.totalPorts;
        for (var i = port; i < max; i++) {
            (function(i) {
                var connection = io.connect("https://" + _config.host + ":" + i, {
                    transports: ["websocket"]
                });
                connection.on("r", receiveData);
                connection.on("connect_error", function() {
                    if (!_alerted) {
                        _alerted = true
                    }
                });
                connection.on("connect", function() {
                    _alerted = true;
                    if (!_send[i]) {
                        connection.emit("i", {
                            t: _type,
                            x: _exp
                        })
                    }
                    _send[i] = true
                });
                connection.on("reconnect", function() {
                    if (!_send[i]) {
                        connection.emit("i", {
                            t: _type,
                            x: _exp
                        })
                    }
                    _send[i] = true
                });
                connection.on("disconnect", function() {
                    _send[i] = false
                });
                _connections.push(connection)
            })(i)
        }
        _this.events.fire(HydraEvents.READY)
    }

    function initSideConnection() {
        var i = "side;";
        var connection = io.connect("https://" + _config.host + ":" + _config.directPortStart, {
            transports: ["websocket"]
        });
        connection.on("sideMsg", sideMsg);
        connection.on("connect", function() {
            _alerted = true;
            if (!_send[i]) {
                connection.emit("i", {
                    t: "side",
                    x: _exp
                })
            }
            _send[i] = true
        });
        connection.on("reconnect", function() {
            if (!_send[i]) {
                connection.emit("i", {
                    t: "side",
                    x: _exp
                })
            }
            _send[i] = true
        });
        connection.on("disconnect", function() {
            _send[i] = false
        })
    }

    function receiveData(e) {
        _this.onMessage && _this.onMessage(e.d)
    }

    function sideMsg(e) {
        _this.sideMessage && _this.sideMessage(e.d)
    }
    this.send = function(data) {
        _event.t = _type;
        _event.x = _exp;
        _event.d = data;
        _connections.forEach(function(conn) {
            conn.emit("event", _event)
        })
    };
    this.emitToSide = function(data) {
        _event.t = _type;
        _event.x = _exp;
        _event.d = data;
        _connections.forEach(function(conn) {
            conn.emit("side", _event)
        })
    }
});
Class(function SocketPipeReceiver(_type, _exp) {
    Inherit(this, SocketPipeSelector);
    var _this = this;
    var _io, _send;
    var _alerted = false;
    (function() {
        _this.select(connect)
    })();

    function connect(obj) {
        _io = io.connect("https://" + obj.host + ":" + obj.port, {
            transports: ["websocket"]
        });
        _io.on("r", receiveData);
        _io.on("ev", receiveEvent);
        _io.on("connect_error", function() {
            if (!_alerted) {
                _alerted = true
            }
        });
        _io.on("connect", function() {
            _alerted = true;
            if (!_send) {
                _io.emit("i", {
                    t: _type,
                    x: _exp
                })
            }
            _send = true
        });
        _io.on("disconnect", function() {
            _send = false
        });
        _this.events.fire(HydraEvents.READY);
        _io.on("reconnected", function() {
            if (!_send) {
                _io.emit("i", {
                    t: _type,
                    x: _exp
                })
            }
            _send = true
        })
    }

    function receiveData(e) {
        _this.onMessage && _this.onMessage(e.d)
    }

    function receiveEvent(e) {
        _this.onEvent && _this.onEvent(e.d)
    }
    this.send = function() {};
    this.event = function() {}
});
Class(function SocketPipeSelector() {
    Inherit(this, Component);
    var _this = this;
    var _active, _location, _server, _host, _port;
    var _config = require("SocketConfig");
    (function() {})();

    function getActiveServers(callback) {
        var url = "https://storage.googleapis.com/at-socketnetwork/assets/data/active_servers.json?" + Utils.timestamp();
        XHR.get(url, function(data) {
            _active = data;
            setServer();
            callback()
        })
    }

    function setServer() {
        var servers = [];
        var userCoords = Data.User.getCoords();
        for (var key in _active) {
            var server = _active[key];
            setupCoords(server, key);
            server.distFromUser = Data.Socket.calculateDistance(userCoords[0], userCoords[1], server.coords[0], server.coords[1]);
            servers.push(server)
        }
        servers.sort(function(a, b) {
            return a.distFromUser - b.distFromUser
        });
        _server = servers[0];
        _host = _server.host;
        _port = setPort()
    }

    function setupCoords(server, key) {
        if (key.strpos("us-east")) {
            server.coords = [40.7053, -74.2588]
        } else {
            if (key.strpos("us-central")) {
                server.coords = [39.0915, -94.8565]
            } else {
                if (key.strpos("us-west")) {
                    server.coords = [45.5945, -121.1786]
                } else {
                    if (key.strpos("europe")) {
                        server.coords = [51.5285, -0.242]
                    } else {
                        if (key.strpos("asia")) {
                            server.coords = [35.6691, 139.5923]
                        }
                    }
                }
            }
        }
    }

    function setPort() {
        var array = [];
        for (var key in _server.ports) {
            array.push({
                port: key,
                conn: _server.ports[key]
            })
        }
        array.sort(function(a, b) {
            return a.conn - b.conn
        });
        return array[0].port
    }
    this.select = function(callback) {
        if (!_host) {
            getActiveServers(function() {
                callback({
                    host: _host,
                    port: _port
                })
            })
        } else {
            callback({
                host: _host,
                port: _port
            })
        }
    };
    this.selectDirect = function(callback) {
        var min = _config.io.directPortStart;
        var max = min + _config.io.totalPorts - 1;
        defer(function() {
            callback({
                host: _config.io.host,
                port: Utils.doRandom(min, max)
            })
        })
    }
});
Class(function SocketPipeSender(_type, _exp, _atIO) {
    Inherit(this, SocketPipeSelector);
    var _this = this;
    var _io, _sendEvent;
    var _alerted = false;
    var _send = {};
    (function() {
        if (_atIO) {
            _this.selectDirect(connect)
        } else {
            _this.select(connect)
        }
    })();

    function connect(obj) {
        _io = io.connect("https://" + obj.host + ":" + obj.port, {
            transports: ["websocket"]
        });
        _io.on("r", receiveData);
        _io.on("ev", receiveEvent);
        _this.events.fire(HydraEvents.READY);
        _io.on("connect_error", function() {
            if (!_alerted) {
                _alerted = true
            }
        });
        _io.on("disconnect", function() {
            _sendEvent = false
        });
        _io.on("connect", function() {
            _alerted = true;
            if (!_sendEvent) {
                _io.emit("i", {
                    t: _type,
                    x: _exp
                })
            }
            _sendEvent = true
        });
        _io.on("reconnected", function() {
            if (!_sendEvent) {
                _io.emit("i", {
                    t: _type,
                    x: _exp
                })
            }
            _sendEvent = true
        })
    }

    function receiveData(e) {
        _this.onMessage && _this.onMessage(e.d)
    }

    function receiveEvent(e) {
        _this.onEvent && _this.onEvent(e.d)
    }
    this.send = function(data) {
        _send.x = _exp;
        _send.t = _type;
        _send.d = data;
        _io && _io.emit("s", _send)
    };
    this.event = function(data) {}
});
Data.Class(function User() {
    Inherit(this, Model);
    var _this = this;
    var _data;
    var _subscriptionId;
    (function() {
        if (Mobile.isNative()) {
            getNativeGeo()
        } else {
            if (Storage.get("accurate_geo")) {
                getAccurateGeo()
            }
        }
    })();

    function getNativeGeo() {
        Mobile.Geolocation.accuracy = Mobile.Geolocation.NEAREST_TEN;
        Mobile.Geolocation.events.add(Mobile.Events.GEOLOCATION_AUTH, function(e) {
            if (e.status == "ALLOWED") {
                Mobile.Geolocation.requestLocation()
            }
        });
        Mobile.Geolocation.events.add(Mobile.Events.GEOLOCATION_UPDATE, function(e) {
            reverseGeocode(e.latitude, e.longitude)
        });
        Mobile.Geolocation.events.add(Mobile.Events.GEOLOCATION_ERROR, function(e) {
            _this.delayedCall(function() {
                Mobile.Geolocation.requestLocation()
            }, 500)
        });
        Mobile.Geolocation.checkPermission(function(e) {
            if (e.enabled) {
                Mobile.Geolocation.requestLocation()
            } else {
                Mobile.Geolocation.requestPermission()
            }
        })
    }

    function getAccurateGeo() {
        navigator.geolocation.getCurrentPosition(function(data) {
            var lat = data.coords.latitude;
            var lng = data.coords.longitude;
            reverseGeocode(lat, lng)
        })
    }

    function setIOData() {
        _data.region = "ca";
        _data.city = "mountain view";
        _data.country = "us";
        _data.country_name = "united states";
        _data.coords = [37.42677, -122.08289]
    }

    function checkEmpty() {
        if (!_data.country || _data.country == "" || _data.country == "?" || _data.country == "zz") {
            _data.region = "Planet Earth";
            _data.country = "";
            _data.country_name = "";
            _data.coords = [0, 0]
        }
        if (!_data.region || _data.region == "" || _data.region == "?") {
            _data.region = "Planet Earth";
            _data.country = "";
            _data.country_name = "";
            _data.coords = [0, 0]
        }
        if (!_data.city || _data.city == "" || _data.city == "?") {
            _data.city = "Planet Earth";
            _data.country = "";
            _data.country_name = "";
            _data.coords = [0, 0]
        }
    }

    function reverseGeocode(lat, lng) {
        XHR.get("https://maps.googleapis.com/maps/api/geocode/json?latlng=" + lat + "," + lng + "&sensor=true", function(data) {
            try {
                var findResult = function(search) {
                    var components = data.results[0].address_components;
                    for (var i in components) {
                        var component = components[i];
                        var types = component.types;
                        for (var i = 0; i < types.length; i++) {
                            var type = types[i];
                            if (type.strpos(search)) {
                                return component
                            }
                        }
                    }
                    return {}
                };
                _data.city = findResult("neighborhood").long_name || findResult("locality").long_name || _data.city;
                _data.region = findResult("administrative_area_level_1").short_name || _data.region;
                _data.country = findResult("country").short_name || _data.country;
                _data.coords = [lat, lng];
                Storage.set("accurate_geo", _data)
            } catch (e) {}
        })
    }
    this.getLocation = function() {
        var data = Storage.get("accurate_geo") || _data;
        return {
            country: data.country,
            region: data.region,
            city: data.city,
            country_name: data.country_name
        }
    };
    this.matchIP = function() {
        return false
    };
    this.getCoords = function() {
        return _data.coords
    };
    this.getPool = function(country, coords) {
        country = country || _data.country;
        coords = coords || _data.coords;
        if (country.toLowerCase() != "us") {
            return "world"
        } else {
            return coords[1] < -94.8558 ? "west" : "east"
        }
    };
    this.getSubscriptionId = function() {
        if (_subscriptionId) {
            return _subscriptionId
        }
        return null
    };
    this.setSubscriptionId = function(id) {
        _subscriptionId = id
    };
    if (Hydra.LOCAL) {
        _subscriptionId = 7
    }
    this.isAtIO = function() {
        return false;
        if (!_data.ip.strpos(":")) {
            var array = _data.ip.split(".");
            var valid = true;
            if (Number(array[0]) != 108) {
                valid = false
            }
            if (Number(array[1]) != 177) {
                valid = false
            }
            if (Number(array[2]) < 20 || Number(array[2]) > 23) {
                valid = false
            }
            if (Number(array[3]) < 0 || Number(array[3]) > 255) {
                valid = false
            }
            if (valid) {
                return true
            }
        }
        if (_data.city.toLowerCase() == "mountain view") {
            return true
        }
        return false
    };
    this.data = function(data) {
        if (!data) {
            data = Storage.get("last_userData") || {}
        }
        _data = data;
        if (Mobile.isNative()) {
            Storage.set("last_userData", data)
        }
        defer(function() {
            checkEmpty()
        })
    };
    this.getAccurateGeo = function() {
        if (!Mobile.isNative()) {
            getAccurateGeo()
        }
    };
    this.usingAccurateGeo = function() {
        return Mobile.isNative() || Storage.get("accurate_geo")
    };
    if (window.USER_VALUES && window.USER_VALUES.coords) {
        this.data(USER_VALUES)
    }
});
Mobile.Class(function PushNotifications() {
    Inherit(this, Mobile.BaseModule);
    var _this = this;
    (function() {
        _this.init()
    })();

    function init() {}

    function handleId(subscriptionId) {
        Data.User.setSubscriptionId(subscriptionId)
    }
    this.incoming = function(e) {
        switch (e.fn) {
            case "subscriptionId":
                handleId(e.subscriptionId);
                break
        }
    };
    this.reload = function() {
        _this.send({
            fn: "reload"
        })
    }
}, "static");
Class(function AudioController() {
    Inherit(this, Component);
    var _this = this;
    var disableAllAudio = (function() {
        if (Hydra.HASH.strpos("side")) {
            return true
        }
        return false
    })();
    var disablePlaneSounds = false;
    var disableMusic = false;
    var disablePlaneEnterSounds = false;
    var planeEnterPanning = false;
    var limitEventsToklang = true;
    var loadKlangLocally = true;
    var eventInterval = 0.1;
    var _numberOfFlocks;
    var _flockIsAudible = [];
    var _debugMeshes = [];
    var _debug = false;
    var _debugBox;
    var _lastEventTime = 0;
    var _volumes = [];
    this.load = function(onComplete) {
        if (disableAllAudio) {
            onComplete();
            return
        }
        var klangRemoteUrl;
        var klangLocalUrl;
        if (Device.mobile) {
            klangRemoteUrl = "https://klangfiles.s3.amazonaws.com/uploads/projects/l0k3G/config.js";
            klangLocalUrl = "mobile"
        } else {
            if (!Device.mobile && Tests.AT_IO()) {
                klangRemoteUrl = "https://klangfiles.s3.amazonaws.com/uploads/projects/6iTfI/config.js";
                klangLocalUrl = "desktop_hq"
            } else {
                klangRemoteUrl = "https://klangfiles.s3.amazonaws.com/uploads/projects/6iTfI/config.js";
                klangLocalUrl = "desktop_lq"
            }
        }
        var klangUrl = loadKlangLocally ? Config.CDN + "assets/audio/" + klangLocalUrl + "/config.js" : klangRemoteUrl;
        Klang.init(klangUrl, function() {
            if (Device.mobile) {
                initMobile();
                onComplete()
            } else {
                var loadGroup = Tests.AT_IO() ? "io" : "home";
                Klang.load(loadGroup, function() {
                    onComplete()
                });
                if (!disableMusic) {
                    init()
                }
            }
        })
    };

    function initMobile() {
        document.addEventListener("touchend", function onTouchEnd() {
            Klang.initIOS();
            document.removeEventListener("touchend", onTouchEnd)
        })
    }
    this.trigger = function() {
        if (!disableAllAudio) {
            Klang.triggerEvent.apply(Klang, arguments)
        }
    };
    this.setNumThreads = function(_numThreads) {
        _numberOfFlocks = _numThreads;
        init()
    };
    this.planeEnter = function(point) {
        if (disablePlaneEnterSounds) {
            return
        }
        var camera = World.instance().camera;
        var pan = point.project(camera);
        var panVal = Math.min(0.8, Math.max(-0.8, pan.x));
        this.trigger("plane_enter", panVal, planeEnterPanning)
    };

    function init() {
        for (var i = 0; i < _numberOfFlocks; i++) {
            _flockIsAudible[i] = false;
            _volumes[i] = {
                vol: 0,
                pan: 0
            }
        }
    }
    this.updateFlock = function(index, pos, releasedPlanes) {
        if (disableAllAudio || disablePlaneSounds || _numberOfFlocks === 0) {
            return
        }
        var camera = World.instance().camera;
        var scene = World.instance().scene;
        var HALF_EXTENT = 200;
        var x = pos.x;
        var y = pos.y;
        var z = pos.z;
        var pos = new THREE.Vector3(x, y, z);
        if (_debug) {
            if (!_debugMeshes[index]) {
                var geometry = new THREE.BoxGeometry(10, 10, 10);
                var material = new THREE.MeshBasicMaterial({
                    color: 16776960
                });
                var mesh = new THREE.Mesh(geometry, material);
                scene.add(mesh);
                _debugMeshes[index] = mesh
            }
            _debugMeshes[index].position.set(x, y, z);
            if (releasedPlanes > 0) {
                _debugMeshes[index].material.color.setHex(16711680)
            }
        }
        var halfExtent = new THREE.Vector3(-1, 1, 1).unproject(camera);
        halfExtent.x *= 0.25;
        halfExtent.y *= 0.25;
        halfExtent.z = 200;
        var collisionCube = new THREE.Vector3(camera.position.x, camera.position.y, camera.position.z + 300);
        if (_debug) {
            if (!_debugBox) {
                var geometry = new THREE.BoxGeometry(halfExtent.x * 2, halfExtent.y * 2, halfExtent.z * 2);
                var material = new THREE.MeshBasicMaterial({
                    color: 16711680,
                    transparent: true,
                    opacity: 0.2
                });
                var mesh = new THREE.Mesh(geometry, material);
                _debugBox = mesh;
                scene.add(mesh)
            }
            _debugBox.position.set(collisionCube.x, collisionCube.y, collisionCube.z)
        }
        if ((pos.x >= collisionCube.x && pos.x <= collisionCube.x + halfExtent.x * 2) && (pos.y >= collisionCube.y && pos.y <= collisionCube.y + halfExtent.y * 2) && (pos.z >= collisionCube.z && pos.z <= collisionCube.z + halfExtent.z * 2)) {
            if (!_flockIsAudible[index] && releasedPlanes > 0) {
                _flockIsAudible[index] = true;
                Klang.trigger("play_phrase", index, 1);
                var flockLoop = 0;
                if (releasedPlanes > 25) {
                    flockLoop = 1
                } else {
                    if (releasedPlanes > 50) {
                        flockLoop = 2
                    }
                }
                Klang.trigger("flock_oneshot", index, flockLoop)
            }
        } else {
            if (_flockIsAudible[index]) {
                _flockIsAudible[index] = false
            }
        }
        var distance = pos.distanceTo(camera.position);
        var distanceNormalized = Math.min(1, (distance / HALF_EXTENT) / 4);
        var vol = 1 - distanceNormalized;
        vol = Math.max(0, vol);
        var pan = pos.project(camera);
        var panVal = Math.min(0.8, Math.max(-0.8, pan.x));
        if (limitEventsToklang) {
            _volumes[index].vol = vol;
            _volumes[index].pan = panVal;
            if (Klang.Util.now() - _lastEventTime > eventInterval) {
                Klang.trigger("update_flocks", _volumes, eventInterval);
                _lastEventTime = Klang.Util.now()
            }
        } else {
            Klang.trigger("update_flock", index, panVal, vol)
        }
    };
    (function() {})()
}, "static");
Class(function Blocker() {
    Inherit(this, Controller);
    var _this = this;
    var $container, $logo, $subCopy;
    var _view, _earth, _title, _loader;
    (function() {
        initContainer();
        initLoader()
    })();

    function initContainer() {
        $container = _this.container;
        $container.size("100%");
        Stage.add($container)
    }

    function initLoader() {
        _loader = _this.initClass(LoaderDesktop);
        _loader.events.add(HydraEvents.COMPLETE, initExperience)
    }

    function initExperience() {
        _loader = _loader.destroy();
        $logo = $container.create(".logo");
        $logo.size(55, 55).center().css({
            marginTop: -160,
            opacity: 0
        }).bg("assets/images/loader/plane-logo.png").setZ(10);
        $container.add(World.instance().renderer.domElement);
        BackgroundView.instance();
        _earth = Earth.instance();
        World.instance().scene.add(_earth.object3D);
        _earth.object3D.position.y = Mobile.phone ? -200 : -180;
        _earth.object3D.position.z = -650;
        var titleCopy = Mobile.phone ? Copy.INTRO : Copy.INTRO_DESKTOP;
        if (Hydra.HASH.strpos("after")) {
            titleCopy = Mobile.phone ? Copy.AFTER : Copy.AFTER_DESKTOP
        }
        _title = _this.initClass(UITitle, titleCopy);
        _title.css({
            marginBottom: 15
        });
        $subCopy = $container.create(".subcopy");
        $subCopy.fontStyle("roboto", Mobile.phone ? 15 : 17, "#fff");
        $subCopy.css({
            width: "100%",
            top: "50%",
            opacity: 0,
            letterSpacing: 1,
            marginTop: 20,
            textAlign: "center"
        }).setZ(10);
        $subCopy.html(Hydra.HASH.strpos("after") ? Copy.AFTER_DESKTOP_SUB : Copy.BLOCK_SUB);
        Render.start(loop);
        _this.delayedCall(animateIn, 500)
    }

    function loop() {
        _earth.object3D.rotation.y += 0.0003;
        _earth.object3D.rotation.x += 0.0004;
        _earth.object3D.rotation.z += 0.00035
    }

    function animateIn() {
        TweenManager.tween(_earth.object3D.position, {
            z: Mobile.phone ? -400 : -550
        }, 10000, "easeOutSine");
        _this.delayedCall(_title.animateIn, 500);
        $logo.transform({
            x: -200,
            y: 400,
            rotation: 20,
            scale: 0.8
        }).css({
            opacity: 0
        }).tween({
            x: 0,
            y: 0,
            rotation: 0,
            opacity: 1,
            scale: 1
        }, 2000, "easeOutQuart");
        $subCopy.transform({
            y: 20
        }).css({
            opacity: 0
        }).tween({
            opacity: 1,
            y: 0
        }, 2000, "easeOutCubic", 2000)
    }
}, "singleton");
Class(function World() {
    Inherit(this, Component);
    var _this = this;
    var _renderer, _scene, _camera, _controls, _fx;
    var _snapshot, _imageData;
    (function() {
        initWorld();
        addHandlers();
        Render.start(loop);
        defer(resize)
    })();

    function initWorld() {
        _renderer = new THREE.WebGLRenderer();
        _renderer.setPixelRatio(Tests.getDPR());
        _renderer.setSize(Stage.width, Stage.height);
        _renderer.setClearColor(16777215);
        _scene = new THREE.Scene();
        _camera = new THREE.PerspectiveCamera(35, Stage.width / Stage.height, 1, 10000);
        _camera.position.set(0, 0, -700);
        _camera.positionTarget = new THREE.Vector3(0, 0, -700);
        _camera.target = new THREE.Vector3();
        _camera.lookAt(_camera.target);
        if (!Device.mobile) {
            _controls = new THREE.TrackballControls(_camera)
        }
        _fx = _this.initClass(WorldFX, _scene, _camera, _renderer)
    }

    function addHandlers() {
        _this.events.subscribe(HydraEvents.RESIZE, resize)
    }

    function resize() {
        _renderer.setSize(Stage.width, Stage.height);
        _camera.aspect = Stage.width / Stage.height;
        _camera.updateProjectionMatrix()
    }

    function loop() {
        if (!Device.mobile) {
            _camera.position.lerp(_camera.positionTarget, 0.02)
        }
        _fx.update();
        if (_snapshot && !_imageData) {
            _imageData = _renderer.domElement.toDataURL("image/png")
        }
    }
    _this.get("renderer", function() {
        return _renderer
    });
    _this.get("scene", function() {
        return _scene
    });
    _this.get("camera", function() {
        return _camera
    });
    _this.getSnapshot = function(callback) {
        _snapshot = true;
        _this.delayedCall(function() {
            if (_imageData) {
                callback(_imageData)
            } else {
                console.log("Snapshot not ready");
                callback(null)
            }
            _snapshot = false;
            _imageData = null
        }, 200)
    }
}, "singleton");
Class(function ContainerDesktop() {
    Inherit(this, Controller);
    var _this = this;
    var $container;
    var _flocking, _loader, _earth, _debug;
    (function() {
        initContainer();
        initLoader()
    })();

    function initContainer() {
        $container = _this.container;
        $container.size("100%");
        Stage.add($container);
        if (Config.BEAST) {
            Stage.css({
                cursor: "none"
            })
        }
        if (Tests.AT_IO()) {
            Stage.bg("#c8cef9");
            $container.css({
                opacity: 0
            });
            addListeners()
        }
    }

    function initLoader() {
        _loader = _this.initClass(LoaderDesktop);
        _loader.events.add(HydraEvents.COMPLETE, initExperience)
    }

    function initExperience() {
        initRenderer();
        initViews();
        _this.delayedCall(function() {
            initFlow()
        }, 2000)
    }

    function initRenderer() {
        $container.add(World.instance().renderer.domElement)
    }

    function initViews() {
        BackgroundView.instance();
        _earth = Earth.instance();
        World.instance().scene.add(_earth.object3D);
        _earth.object3D.rotation.reorder("XZY");
        _earth.object3D.rotation.x = 0.2;
        _earth.object3D.rotation.z = 0.3;
        _flocking = PlaneFlocking.instance();
        if (Config.BEAST) {
            _flocking.init(2000, 8)
        } else {
            var range = Tests.GET_TEST_RESULTS();
            if (typeof range !== "number") {
                range = 0
            }
            var planes = Math.round(Utils.range(range, 0, 1, 2000, 1000));
            var threads = Math.round(Utils.range(range, 0, 1, 8, 4));
            _flocking.init(planes, threads)
        }
        World.instance().scene.add(_flocking.object3D);
        _flocking.object3D.rotation.copy(_earth.object3D.rotation);
        World.instance().scene.add(ThrownPlane.instance().group)
    }

    function initFlow() {
        if (Tests.AT_IO()) {
            IOFlow.instance().init(_loader)
        } else {
            DesktopFlow.instance();
            _loader.animateOut(function() {
                _loader = _loader.destroy()
            })
        }
    }

    function addListeners() {
        _this.events.subscribe(PlanesEvents.START_EXP, start);
        _debug = function(e) {
            if (e.keyCode == 18) {
                e.preventDefault()
            }
        };
        if (Tests.AT_IO()) {
            __window.bind("keydown", _debug)
        }
    }

    function start() {
        BackgroundView.instance().reset();
        $container.tween({
            opacity: 1
        }, 2000, "easeInOutSine", 200)
    }
}, "singleton");
Class(function DesktopFlow() {
    Inherit(this, Component);
    var _this = this;
    var _intro, _stats, _outro;
    (function() {
        initViews();
        initIntro()
    })();

    function initViews() {
        _intro = _this.initClass(IntroDesktop);
        _stats = _this.initClass(Stats)
    }

    function initIntro() {
        if (Hydra.HASH && Hydra.HASH.indexOf("skip") !== -1) {
            _intro = _intro.destroy();
            World.instance().camera.position.set(0, 0, -700);
            World.instance().camera.positionTarget.set(0, 0, -700);
            _this.events.fire(PlanesEvents.ALLOW_PLANES);
            initStats();
            return
        }
        _intro.start();
        _intro.onComplete = function() {
            _intro = _intro.destroy();
            _this.events.fire(PlanesEvents.ALLOW_PLANES);
            initStats();
            releasePlanes()
        }
    }

    function initStats() {
        _stats.start()
    }

    function releasePlanes() {
        var status = PlaneFlocking.instance().addPlane();
        if (status == "finished") {
            return
        }
        _this.delayedCall(releasePlanes, 2000)
    }
}, "singleton");
Class(function IOFlow() {
    Inherit(this, Component);
    var _this = this;
    var _intro, _stats, _outro, _loader;
    (function() {
        initViews()
    })();

    function initViews() {
        _intro = _this.initClass(IntroDesktop);
        _stats = _this.initClass(Stats);
        _outro = _this.initClass(OutroDesktop);
        if (Hydra.HASH && Hydra.HASH.indexOf("skip") !== -1) {
            _loader.animateOut(function() {
                _loader = _loader.destroy()
            });
            _this.isIntroTriggered = true;
            _intro = _intro.destroy();
            World.instance().camera.position.set(0, 0, -700);
            World.instance().camera.positionTarget.set(0, 0, -700);
            _this.events.fire(PlanesEvents.ALLOW_PLANES);
            initStats()
        }
    }

    function addHandlers() {
        __window.bind("keydown", onKeydown);
        __window.bind("keyup", onKeyup)
    }

    function onKeydown(e) {
        if (e.keyCode == 80) {
            _this.isCmdDown = true
        }
        if (e.keyCode == 49 && _this.isCmdDown && !_this.isIntroTriggered) {
            _this.isIntroTriggered = true;
            initIntro()
        }
        if (e.keyCode == 50 && _this.isCmdDown && !_this.isOutroTriggered && _this.isIntroTriggered && _this.isStatsInit) {
            _this.isOutroTriggered = true;
            initOutro()
        }
    }

    function onKeyup(e) {
        if (e.keyCode == 80) {
            _this.isCmdDown = false
        }
    }

    function initIntro() {
        Data.Socket.emitToSide({
            start: true
        });
        _this.events.fire(PlanesEvents.START_EXP);
        console.log("INTRO TRIGGERED");
        _loader.animateOut(function() {
            _loader = _loader.destroy()
        });
        _intro.start();
        _intro.onComplete = function() {
            _intro = _intro.destroy();
            _this.events.fire(PlanesEvents.ALLOW_PLANES);
            initStats()
        }
    }

    function initStats() {
        _this.isStatsInit = true;
        _stats.start()
    }

    function initOutro() {
        Data.Socket.emitToSide({
            end: true
        });
        console.log("OUTRO TRIGGERED");
        _this.events.fire(PlanesEvents.END_EXPERIENCE);
        _outro.start()
    }
    this.init = function(loader) {
        _loader = loader;
        addHandlers()
    }
}, "singleton");
Class(function IntroDesktop() {
    Inherit(this, View);
    var _this = this;
    var $this, $log, $logo, $sub;
    var _camera, _view, _title, _throw;
    (function() {
        initHTML();
        if (!Tests.AT_IO()) {
            initViews()
        }
        initPositions()
    })();

    function initHTML() {
        $this = _this.element;
        $this.css({
            position: "static"
        });
        Stage.add($this)
    }

    function initViews() {
        $logo = $this.create(".logo");
        $logo.size(60, 60).center().css({
            marginTop: -155,
            opacity: 0
        }).bg("assets/images/loader/plane-logo.png").setZ(10);
        _title = _this.initClass(UITitle, Copy.INTRO_DESKTOP);
        _title.css({
            marginBottom: 0
        });
        $sub = Stage.create(".subcopy");
        $sub.fontStyle("roboto", 19, "#fff");
        $sub.css({
            right: 50,
            bottom: 42,
            letterSpacing: 1,
            lineHeight: 28,
            textAlign: "right",
            opacity: 0
        }).setZ(10);
        $sub.html(Copy.DESKTOP_SUB);
        _throw = _this.initClass(UIThrowPrompt, [Stage]);
        Stage.add(_throw);
        _throw.css({
            left: "",
            right: 85,
            bottom: 80,
            top: "",
            marginTop: "",
            marginLeft: ""
        });
        _throw.transform({
            rotation: -90,
            scale: 0.6
        })
    }

    function initPositions() {
        _camera = World.instance().camera;
        _camera.position.set(0, 180, -50);
        _camera.positionTarget.set(0, 180, -50)
    }

    function animateIn() {
        if ($logo) {
            _this.delayedCall(_title.animateIn, 1600);
            $logo.transform({
                x: -180,
                y: 400,
                rotation: 15,
                scale: 0.8
            }).css({
                opacity: 0
            }).tween({
                x: 0,
                y: 0,
                rotation: 0,
                opacity: 1,
                scale: 1
            }, 2500, "easeOutQuart", 800);
            _this.delayedCall(function() {
                _this.delayedCall(_throw.animateIn, 5500);
                _this.delayedCall(_throw.animateOut, 10000);
                $sub.tween({
                    opacity: 0.9
                }, 2000, "easeInOutSine", 5000);
                $logo.tween({
                    x: 120,
                    y: -250,
                    rotation: -5,
                    opacity: 0
                }, 2000, "easeInCubic");
                _title.element.tween({
                    opacity: 0
                }, 2000, "easeOutSine", 300, function() {
                    _title = _title.destroy()
                })
            }, 4500)
        }
        TweenManager.tween(_camera.positionTarget, {
            y: 0,
            z: -700
        }, 15000, "easeInOutQuart", function() {
            if (typeof _this.onComplete == "function") {
                _this.onComplete()
            }
        });
        AudioController.trigger("music_start");
        AudioController.trigger("ambience")
    }
    this.start = function() {
        defer(animateIn)
    }
});
Class(function LoaderDesktop() {
    Inherit(this, View);
    var _this = this;
    var $this;
    var _view, _loader;
    (function() {
        initHTML();
        initViews();
        style();
        initLoader();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element
    }

    function initViews() {
        if (Tests.AT_IO()) {
            return
        }
        _view = _this.initClass(LoaderDesktopView)
    }

    function style() {
        $this.size("100%").css({
            background: "#959cd5",
        }).setZ(1)
    }

    function initLoader() {
        AssetUtil.exclude(["mobile", "stamps", "icons"]);
        var paths = AssetUtil.loadAssets(["assets"]);
        _loader = _this.initClass(AssetLoader, paths, 3);
        _loader.add(1);
        AudioController.load(function() {
            _loader.trigger(1)
        });
        if (Tests.AT_IO()) {
            return
        }
        _loader.add(1);
        var test = _this.initClass(LoaderLoadTest);
        test.onComplete = function(results) {
            _loader.trigger(1);
            test = test.destroy()
        }
    }

    function addHandlers() {
        _loader.events.add(HydraEvents.COMPLETE, complete)
    }

    function complete() {
        Data.Socket.connect();
        _this.events.fire(HydraEvents.COMPLETE)
    }
    this.animateOut = function(callback) {
        $this.tween({
            opacity: 0
        }, 1000, "easeOutCubic", function() {
            if (typeof callback == "function") {
                callback()
            }
        })
    }
});
Class(function LoaderLoadTest() {
    Inherit(this, Component);
    var _this = this;
    var _thread;
    (function() {
        initTest()
    })();

    function calculate(e, id) {
        var start = Date.now();
        var array = [];
        for (var i = 0; i < 20000; i++) {
            array[i] = Math.pow(Math.sin(Math.random()), 2)
        }
        array = null;
        var end = Date.now();
        post({
            time: end - start
        }, id)
    }

    function initTest() {
        _thread = _this.initClass(Thread);
        _thread.loadFunction(calculate);
        _thread.calculate({}, function(e) {
            Tests.RESULT = e.time;
            if (typeof _this.onComplete == "function") {
                _this.onComplete()
            }
        })
    }
});
Class(function OutroDesktop() {
    Inherit(this, View);
    var _this = this;
    var $this;
    var _camera;
    (function() {
        initHTML();
        style();
        initViews()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.size("100%").css({
            background: "#c8cef9",
        }).setZ(1);
        $this.css({
            opacity: 0
        })
    }

    function initViews() {
        _camera = World.instance().camera
    }

    function animateIn() {
        $this.tween({
            opacity: 1
        }, 5000, "easeInOutCubic");
        TweenManager.tween(_camera.positionTarget, {
            x: 0,
            y: 180,
            z: -50
        }, 5000, "easeInOutCubic", function() {})
    }
    this.start = function() {
        Stage.add($this);
        animateIn()
    }
});
Class(function LocationPing() {
    Inherit(this, Component);
    var _this = this;
    var _currentPings = [];
    (function() {})();

    function getPing(coords) {
        var exists = false;
        _currentPings.every(function(ping) {
            if (ping.coords[0] !== coords[0]) {
                return true
            }
            if (ping.coords[1] !== coords[1]) {
                return true
            }
            exists = true;
            return false
        });
        if (exists) {
            return null
        }
        if (LocationPing.POOL.length === 0) {
            addPingToPool(coords)
        }
        return LocationPing.POOL.shift()
    }

    function addPingToPool(coords) {
        var ping = _this.initClass(LocationPingView);
        ping.coords = coords;
        LocationPing.POOL.push(ping)
    }
    this.display = function(coords) {
        var ping = getPing(coords);
        if (!ping) {
            return
        }
        _currentPings.push(ping);
        ping.group.rotation.y = coords[1] * Math.PI / 180 - 1.6;
        ping.group.rotation.z = coords[0] * Math.PI / 180;
        ping.animateIn();
        _this.delayedCall(ping.animateOut, 2000);
        _this.delayedCall(function() {
            ping.stop();
            _currentPings.findAndRemove(ping);
            LocationPing.POOL.push(ping)
        }, 6000)
    }
}, function() {
    LocationPing.POOL = []
});
Class(function ThrownPlane() {
    Inherit(this, Component);
    var _this = this;
    var _ping;
    var _debug, _planeFromIO;
    this.group = new THREE.Group();
    var _colors = Config.STAMPS_COLORS;
    var _throttle = 0;
    var _throttleIO = 0;
    (function() {
        initViews();
        addHandlers();
        setInterval(clearThrottle, 1000)
    })();

    function initViews() {
        _ping = _this.initClass(LocationPing)
    }

    function needsThrottle() {
        _throttle++;
        return _throttle > (Config.BEAST ? Config.THROTTLE_SECOND : 2)
    }

    function needsThrottleIO() {
        _throttleIO++;
        return _throttleIO > Config.THROTTLE_SECOND_IO
    }

    function clearThrottle() {
        _throttle = 0;
        _throttleIO = 0
    }

    function addHandlers() {
        _this.events.subscribe(PlanesEvents.ALLOW_PLANES, listenToPlanes);
        _this.events.subscribe(PlanesEvents.END_EXPERIENCE, stopListeningToPlanes);
        _debug = function(e) {
            if (e.keyCode == 32) {
                var location = Config.LOCATIONS[Utils.doRandom(0, Config.LOCATIONS.length - 1)];
                var coords = [location.coords.lat, location.coords.lng];
                newPlane({
                    coords: coords,
                    color: _colors[Utils.doRandom(0, _colors.length - 1)],
                    scale: {
                        x: Utils.doRandom(50, 110) * 0.01,
                        z: Utils.doRandom(50, 100) * 0.01
                    },
                    atio: true,
                    location: location.location
                })
            }
        };
        if (Tests.AT_IO() || Config.BEAST) {
            __window.bind("keydown", _debug)
        } else {
            _this.delayedCall(firePlane, 10000 + Utils.doRandom(5000, 8000))
        }
    }

    function firePlane() {
        var location = Config.LOCATIONS[Utils.doRandom(0, Config.LOCATIONS.length - 1)];
        var coords = [location.coords.lat, location.coords.lng];
        newPlane({
            coords: coords,
            color: _colors[Utils.doRandom(0, _colors.length - 1)],
            scale: {
                x: Utils.doRandom(50, 110) * 0.01,
                z: Utils.doRandom(50, 100) * 0.01
            },
            atio: true,
            location: location.location
        });
        _this.delayedCall(firePlane, Utils.doRandom(5000, 10000) * 1.4)
    }

    function listenToPlanes() {
        Data.Socket.on("message", newPlane)
    }

    function stopListeningToPlanes() {
        Data.Socket.off("message", newPlane)
    }

    function newPlane(e) {
        PlaneFlocking.instance().addPlane();
        var createPlane = function() {
            var plane = _this.initClass(ThrownPlaneView, e);
            _this.group.add(plane.group);
            plane.onComplete = function() {
                _this.group.remove(plane.group);
                if (!Tests.AT_IO()) {
                    plane = plane.destroy()
                }
            }
        };
        if (needsThrottle()) {
            if (e.atio) {
                if (!needsThrottleIO()) {
                    createPlane()
                }
            }
        } else {
            createPlane()
        }
        _ping.display(e.coords);
        if (Tests.AT_IO()) {
            return
        }
        if (e.location.length > 20) {
            return
        }
        if (_this.realTimeTimeout) {
            return
        }
        checkProximity(e)
    }

    function checkProximity(e) {
        var a = Data.User.getCoords();
        var b = e.coords;
        var distance = getDistanceFromLatLonInMiles(a[0], a[1], b[0], b[1]);
        if (distance < 100) {
            _this.realTimeTimeout = true;
            _this.delayedCall(function() {
                _this.realTimeTimeout = false
            }, 1000 * 60 * 5);
            console.log("realtime added:", e.location);
            _this.events.fire(PlanesEvents.ADD_REALTIME, {
                location: e.location,
                coords: {
                    lat: e.coords[0],
                    lng: e.coords[1]
                },
            })
        }
    }

    function getDistanceFromLatLonInMiles(lat1, lon1, lat2, lon2) {
        var R = 6371;
        var dLat = deg2rad(lat2 - lat1);
        var dLon = deg2rad(lon2 - lon1);
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c;
        return toMiles(d)
    }

    function deg2rad(deg) {
        return deg * (Math.PI / 180)
    }

    function toMiles(value) {
        return value * 0.621371
    }
    this.getDistance = function(stamps) {
        var miles = 0;
        if (stamps.length > 0) {
            for (var i = 0; i < stamps.length; i++) {
                if (stamps[i] && stamps[i].coords && stamps[i].coords.length > 1) {
                    miles += getDistanceFromLatLonInMiles(stamps[i].coords[0], stamps[i].coords[1])
                }
            }
            return miles
        }
        return -1
    }
}, "singleton");
Class(function Stats() {
    Inherit(this, View);
    var _this = this;
    var $this;
    var _movement, _text, _ping, _realTimeLocation;
    var _timeoutSet, _timeoutStat, _timeoutStat2;
    var _stats = [];
    var _statsPool = [];
    if (Tests.AT_IO()) {
        _stats = Config.IO_LOCATION_LIST
    } else {
        Config.LOCATIONS.forEach(function(location) {
            for (var i = 0; i < location.priority; i++) {
                _stats.push(location)
            }
        })
    }
    var _index = -1;
    var _set = [];
    (function() {
        initHTML();
        initViews();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element;
        $this.css({
            position: "static"
        });
        Stage.add($this)
    }

    function initViews() {
        _movement = _this.initClass(StatsMovement);
        _text = _this.initClass(StatsMeshText);
        _ping = _this.initClass(StatsPing)
    }

    function populatePool() {
        _stats.forEach(function(e, i) {
            _statsPool.push(i)
        })
    }

    function startSet() {
        if (_stats.length == 0) {
            _timeoutSet = _this.delayedCall(showStat, 2000);
            return
        }
        _index = -1;
        _set = [];
        if (_statsPool.length === 0) {
            populatePool()
        }
        for (var i = 0; i < 3; i++) {
            var statIndex = Tests.AT_IO() ? _statsPool.splice(0, 1) : _statsPool.splice(Utils.doRandom(0, _statsPool.length - 1), 1);
            _set.push(_stats[statIndex]);
            if (_statsPool.length === 0) {
                populatePool()
            }
        }
        showStat()
    }

    function showStat() {
        _index++;
        if (_index == _set.length) {
            _timeoutSet = _this.delayedCall(startSet, 20000);
            return
        }
        var stat = _realTimeLocation ? _realTimeLocation : _set[_index];
        if (_realTimeLocation) {
            _realTimeLocation = null
        }
        var position = _movement.zoomToLocation(stat, _index === 0);
        _movement.rotateToLocation(stat);
        _ping.highlightLocation(stat);
        _text.animateIn(stat, position);
        _timeoutStat = _this.delayedCall(showStat, 16500);
        _timeoutStat2 = _this.delayedCall(_movement.zoomOut, 11000)
    }

    function addHandlers() {
        _this.events.subscribe(PlanesEvents.END_EXPERIENCE, stopStats);
        _this.events.subscribe(PlanesEvents.ADD_REALTIME, addRealtimeLocation)
    }

    function stopStats() {
        _movement.stopStats();
        _text.animateOut();
        if (_timeoutSet) {
            clearTimeout(_timeoutSet)
        }
        if (_timeoutStat) {
            clearTimeout(_timeoutStat)
        }
        if (_timeoutStat2) {
            clearTimeout(_timeoutStat2)
        }
    }

    function addRealtimeLocation(location) {
        _realTimeLocation = location
    }
    this.start = function() {
        _timeoutSet = _this.delayedCall(startSet, Tests.AT_IO() ? 60000 : 10000)
    }
});
Class(function StatsMovement() {
    Inherit(this, Component);
    var _this = this;
    var _camera, _earth, _flocking;
    var _tweenStrength, _tweenZoom, _tweenRotation;
    var _autoSpin = {
        strength: 1
    };
    var _animRotation = new THREE.Vector3();
    var _positions = [{
        x: 140,
        y: 135,
        z: -450,
        offset: {
            y: -1.3,
            x: 0,
            z: 0
        }
    }, {
        x: -140,
        y: 135,
        z: -450,
        offset: {
            y: 1,
            x: 0,
            z: 0
        }
    }, {
        x: 220,
        y: 0,
        z: -450,
        offset: {
            y: -1.3,
            x: 0,
            z: 0
        }
    }, {
        x: -220,
        y: 0,
        z: -450,
        offset: {
            y: 1,
            x: 0,
            z: 0
        }
    }, {
        x: 140,
        y: -110,
        z: -450,
        offset: {
            y: -1.2,
            x: 0,
            z: 0
        }
    }, {
        x: -140,
        y: -110,
        z: -450,
        offset: {
            y: 1,
            x: 0,
            z: 0
        }
    }, ];
    var _positionIndex = 0;
    var _lastPositionIndex = -1;
    (function() {
        initViews();
        Render.start(loop)
    })();

    function initViews() {
        _camera = World.instance().camera;
        _earth = Earth.instance();
        _flocking = PlaneFlocking.instance()
    }

    function loop() {
        _earth.object3D.rotation.y += 0.004 * _autoSpin.strength;
        if (_this.isAnimating) {
            _earth.object3D.rotation.y += (_animRotation.y - _earth.object3D.rotation.y) * 0.1 * (1 - _autoSpin.strength);
            _earth.object3D.rotation.x += (_animRotation.x - _earth.object3D.rotation.x) * 0.05 * (1 - _autoSpin.strength);
            _earth.object3D.rotation.z += (_animRotation.z - _earth.object3D.rotation.z) * 0.05 * (1 - _autoSpin.strength)
        } else {
            if (!_this.isZoomed) {
                _earth.object3D.rotation.x += (0.2 - _earth.object3D.rotation.x) * 0.01 * _autoSpin.strength;
                _earth.object3D.rotation.z += (0.3 - _earth.object3D.rotation.z) * 0.01 * _autoSpin.strength;
                if (_earth.object3D.rotation.y > Math.PI * 2) {
                    _earth.object3D.rotation.y -= Math.PI * 2
                }
            }
        }
        if (_flocking.object3D.rotation.y - _earth.object3D.rotation.y > Math.PI) {
            _flocking.object3D.rotation.y -= Math.PI * 2
        }
        if (_flocking.object3D.rotation.y - _earth.object3D.rotation.y < -Math.PI) {
            _flocking.object3D.rotation.y += Math.PI * 2
        }
        _flocking.object3D.rotation.x += (_earth.object3D.rotation.x - _flocking.object3D.rotation.x) * 0.01;
        _flocking.object3D.rotation.y += (_earth.object3D.rotation.y - _flocking.object3D.rotation.y) * 0.01;
        _flocking.object3D.rotation.z += (_earth.object3D.rotation.z - _flocking.object3D.rotation.z) * 0.01
    }
    this.zoomToLocation = function(stat, isFirst) {
        if (_tweenZoom && _tweenZoom.stop) {
            _tweenZoom.stop()
        }
        _this.isZoomed = true;
        var lat = stat.coords.lat;
        _positionIndex = lat > 30 ? 0 : lat > -10 ? 2 : 4;
        if (_positionIndex === _lastPositionIndex) {
            _positionIndex += 1
        } else {
            if (_positionIndex + 1 == _lastPositionIndex) {} else {
                _positionIndex += Utils.doRandom(0, 1)
            }
        }
        _lastPositionIndex = _positionIndex;
        var pos = _positions[_positionIndex];
        _tweenZoom = TweenManager.tween(_camera.positionTarget, {
            x: pos.x,
            y: pos.y,
            z: pos.z
        }, isFirst ? 10000 : 8000, isFirst ? "easeInOutQuart" : "easeOutSine");
        _tweenStrength = TweenManager.tween(_autoSpin, {
            strength: 0.1
        }, 10000, "easeInOutQuart");
        return pos
    };
    this.zoomOut = function() {
        _this.isZoomed = false;
        _tweenZoom = TweenManager.tween(_camera.positionTarget, {
            x: 0,
            y: 0,
            z: -900
        }, 10000, "easeInOutQuart");
        _tweenStrength = TweenManager.tween(_autoSpin, {
            strength: 1
        }, 10000, "easeInOutQuart")
    };
    this.rotateToLocation = function(stat) {
        var pos = _positions[_positionIndex];
        var x = -stat.coords.lat * Math.PI / 180 * 0.5 + pos.offset.x;
        var y = -stat.coords.lng * Math.PI / 180 - Math.PI + pos.offset.y;
        if (y - _earth.object3D.rotation.y > Math.PI) {
            y -= Math.PI * 2
        }
        if (y - _earth.object3D.rotation.y < -Math.PI) {
            y += Math.PI * 2
        }
        _this.isAnimating = true;
        _animRotation.set(_earth.object3D.rotation.x, _earth.object3D.rotation.y, _earth.object3D.rotation.z);
        _tweenRotation = TweenManager.tween(_animRotation, {
            x: x,
            y: y,
            z: 0
        }, 10000, "easeInOutQuart", function() {
            _this.isAnimating = false
        })
    };
    this.stopStats = function() {
        _this.isAnimating = false;
        _this.isZoomed = false;
        if (_tweenZoom && _tweenZoom.stop) {
            _tweenZoom.stop()
        }
        if (_tweenRotation && _tweenRotation.stop) {
            _tweenRotation.stop()
        }
        if (_tweenStrength && _tweenStrength.stop) {
            _tweenStrength.stop()
        }
        _tweenStrength = TweenManager.tween(_autoSpin, {
            strength: 1
        }, 10000, "easeInOutQuart")
    }
});
Class(function WorldFX(_scene, _camera, _renderer) {
    Inherit(this, Component);
    var _this = this;
    var _nuke, _dof;
    (function() {
        initNuke()
    })();

    function initNuke() {
        _nuke = _this.initClass(Nuke, Stage, {
            renderer: _renderer,
            camera: _camera,
            scene: _scene,
            dpr: Config.BEAST ? 2 : 1
        });
        if (Tests.useDOF()) {
            _dof = _this.initClass(DOFPass, _nuke, _camera, _scene, _renderer)
        }
    }
    this.update = function() {
        _dof && _dof.render();
        _nuke.render()
    }
});
Class(function ContainerMobile() {
    Inherit(this, Controller);
    var _this = this;
    var $container;
    var _loader, _intro;
    (function() {
        initContainer();
        if (!Mobile.isNative() && Mobile.os == "Android" && !location.hostname.strpos("local") && (window.matchMedia && !window.matchMedia("(display-mode: standalone)").matches)) {
            Mobile.fullscreen()
        }
        Mobile.setOrientation("portrait");
        initLoader();
        addHandlers()
    })();

    function initContainer() {
        $container = _this.container;
        $container.size("100%");
        Stage.add($container)
    }

    function initLoader() {
        _loader = _this.initClass(LoaderMobile)
    }

    function addHandlers() {
        _loader.events.add(HydraEvents.COMPLETE, initIntro)
    }

    function initIntro() {
        initRenderer();
        initViews();
        var planeID = Number(Utils.query("plane"));
        var deepLink = false;
        if (planeID > -1) {
            Data.Planes.getCreatedPlanes().forEach(function(data) {
                if (data.id == planeID) {
                    deepLink = data
                }
            })
        }
        if (deepLink) {
            var data = deepLink;
            if (_intro) {
                _intro.animateOut(function() {
                    _intro = _intro.destroy()
                })
            }
            AboutPrompt.instance().hide();
            UIMobile.instance().toHomeScreen(true);
            CatchPlane.instance().init();
            PlaneFlocking.instance().init(300, 4);
            MyPlanes.instance().showPrompt(function() {
                _this.delayedCall(function() {
                    _this.events.fire(PlanesEvents.MY_PLANES_SWIPE_PROGRESS, {
                        spring: 0
                    });
                    _this.events.fire(PlanesEvents.FORCE_MY_PLANES_SWIPE, {
                        force: true
                    });
                    var waitToselect = function() {
                        if (!MyPlanes.instance().isOpen) {
                            _this.delayedCall(waitToselect, 100);
                            return
                        }
                        MyPlanes.instance().openDetail({
                            data: data
                        });
                        setTimeout(function() {
                            if (_loader && _loader.animateOut) {
                                _loader.animateOut(function() {
                                    _loader = _loader.destroy()
                                })
                            }
                        }, 500)
                    };
                    _this.delayedCall(waitToselect, 100)
                }, 100)
            });
            return
        }
        if (Utils.query("new") == "true") {
            if (_intro) {
                _intro.animateOut(function() {
                    _intro = _intro.destroy()
                })
            }
            AboutPrompt.instance().hide();
            UIMobile.instance().toHomeScreen(true);
            CatchPlane.instance().init();
            MyPlanes.instance().showPrompt();
            PlaneFlocking.instance().init(300, 4);
            _this.delayedCall(function() {
                _this.delayedCall(function() {
                    _this.events.fire(PlanesEvents.NEW_PLANE)
                }, 100);
                _this.delayedCall(function() {
                    if (_loader && _loader.animateOut) {
                        _loader.animateOut(function() {
                            _loader = _loader.destroy()
                        })
                    }
                }, 1000)
            }, 500);
            return
        }
        if (_loader && _loader.animateOut) {
            _loader.animateOut(function() {
                _loader = _loader.destroy()
            })
        }
        if (Hydra.HASH.indexOf("skip") !== -1) {
            if (_intro) {
                _intro.animateOut(function() {
                    _intro = _intro.destroy()
                })
            }
            AboutPrompt.instance().hide();
            UIMobile.instance().toHomeScreen();
            CatchPlane.instance().init();
            MyPlanes.instance().showPrompt();
            PlaneFlocking.instance().init(300, 4);
            return
        }
        _intro = _this.initClass(IntroMobile);
        _intro.events.add(HydraEvents.COMPLETE, initExperience)
    }

    function initRenderer() {
        $container.add(World.instance().renderer.domElement);
        World.instance().camera.position.set(0, 0, -100);
        BackgroundView.instance()
    }

    function initViews() {
        $container.add(MyPlanes.instance().container);
        $container.add(UIMobile.instance().container);
        $container.add(CreatePlane.instance().container);
        CatchPlane.instance()
    }

    function initExperience() {
        if (Tests.RETURN_USER()) {
            if (_intro) {
                _intro.animateOut(function() {
                    _intro = _intro.destroy()
                })
            }
            AboutPrompt.instance();
            UIMobile.instance().toHomeScreen();
            CatchPlane.instance().init();
            MyPlanes.instance().showPrompt()
        } else {
            _intro = _intro.destroy();
            _this.events.subscribe(PlanesEvents.CONFIRMATION_HIDDEN, initCatching)
        }
    }

    function initCatching() {
        _this.events.unsubscribe(PlanesEvents.CONFIRMATION_HIDDEN, initCatching);
        defer(CatchPlane.instance().init)
    }
    this.newPlane = function() {};
    this.viewPlane = function(id) {}
}, "singleton");
Class(function CatchPlane() {
    Inherit(this, Component);
    var _this = this;
    var _net, _butteflies, _plane, _ui, _confirmation;
    (function() {
        initViews();
        addHandlers()
    })();

    function initViews() {
        _net = _this.initClass(NetView);
        _butteflies = _this.initClass(PlaneButterflies);
        _plane = _this.initClass(PlaneCaught)
    }

    function addHandlers() {
        _this.events.subscribe(PlanesEvents.CATCH_PLANE, catchPlane);
        _this.events.subscribe(PlanesEvents.RE_THROW_CAUGHT_PLANE, endFlow);
        _this.events.subscribe(PlanesEvents.NEW_PLANE, newPlane);
        _this.events.subscribe(PlanesEvents.CONFIRMATION_HIDDEN, refreshButterflies);
        _this.events.subscribe(PlanesEvents.CANCEL, refresh);
        _this.events.subscribe(PlanesEvents.MY_PLANES_SWIPE_COMPLETE, hideCatching)
    }

    function refresh() {
        if (!_this.initialised) {
            return
        }
        refreshButterflies();
        replacePlane()
    }

    function newPlane() {
        if (!_this.initialised) {
            return
        }
        hideCatching();
        replacePlane();
        GATracker.trackEvent("new planes", "click", "init", 1);
        UIMobile.instance().removeCatchPrompt()
    }

    function refreshButterflies() {
        if (!_this.initialised) {
            return
        }
        _butteflies.resume();
        _net.renewNet()
    }

    function catchPlane() {
        if (!_this.initialised) {
            return
        }
        _butteflies.pause();
        _net.catchPlane();
        AudioController.trigger("catch");
        AudioController.trigger("catch_zoom");
        GATracker.trackEvent("catch plane", "click", "catch", 1);
        UIMobile.instance().removeCatchPrompt()
    }

    function hideCatching() {
        defer(_butteflies.pause);
        defer(_net.animateOut)
    }

    function replacePlane() {
        if (!_this.initialised) {
            return
        }
        if (!_plane.initialised) {
            return
        }
        _plane.destroy();
        _plane = _this.initClass(PlaneCaught);
        _plane.init()
    }

    function endFlow() {
        Data.Planes.updatePlane(PlaneStampTexture.DATA, function() {
            replacePlane();
            initConfirmation()
        })
    }

    function initConfirmation() {
        GATracker.trackEvent("catch plane", "click", "confirmation", 1);
        _confirmation = _this.initClass(ConfirmationView, false);
        _confirmation.animateIn();
        _confirmation.onComplete = function() {
            _this.events.fire(PlanesEvents.CONFIRMATION_HIDDEN);
            if (_confirmation) {
                _confirmation = _confirmation.destroy()
            }
        }
    }
    this.init = function() {
        _this.initialised = true;
        if (!_this.hasLoadedOnce) {
            UIMobile.instance().createCatchPrompt()
        }
        _this.hasLoadedOnce = false;
        _net.init();
        _butteflies.init();
        _plane.init()
    }
}, "singleton");
Class(function CreatePlane() {
    Inherit(this, Controller);
    var _this = this;
    var $container;
    var _plane, _confirmation;
    (function() {
        initContainer();
        addHandlers();
        _this.isFirstPlane = !Tests.RETURN_USER()
    })();

    function initContainer() {
        $container = _this.container;
        $container.css({
            position: "static"
        })
    }

    function addHandlers() {
        _this.events.subscribe(PlanesEvents.NEW_PLANE, newPlane);
        _this.events.subscribe(PlanesEvents.THROW_NEW_PLANE, endFlow);
        _this.events.subscribe(PlanesEvents.CANCEL, removePlane)
    }

    function newPlane() {
        if (_this.isCreated) {
            return
        }
        if (!Tests.RETURN_USER()) {
            AboutPrompt.instance()
        }
        _this.isCreated = true;
        _plane = _this.initClass(PlaneNew, _this.isFirstPlane);
        _this.isFirstPlane = false;
        GATracker.trackEvent("new planes", "click", "init", 1)
    }

    function endFlow() {
        removePlane();
        var location = Data.User.getLocation();
        var address = location.city.capitalize() + (location.region.length ? ", " + location.region.toUpperCase() : "");
        var date = DateUtil.getDate();
        var data = {
            date: date.text,
            address: address,
            country: location.country.toUpperCase(),
            countries: 1,
            stamps: [PlaneStampTexture.DATA]
        };
        Data.Planes.createPlane(data, initConfirmation)
    }

    function removePlane() {
        if (_plane) {
            _plane = _plane.destroy()
        }
        _this.isCreated = false
    }

    function initConfirmation() {
        _confirmation = _this.initClass(ConfirmationView, true);
        _confirmation.animateIn();
        _confirmation.onComplete = function() {
            _this.events.fire(PlanesEvents.CONFIRMATION_HIDDEN);
            if (_confirmation) {
                _confirmation = _confirmation.destroy()
            }
        }
    }
}, "singleton");
Class(function MyPlanes() {
    Inherit(this, Controller);
    var _this = this;
    var $container;
    var _swipePrompt, _list, _detail, _velocity;
    (function() {
        initContainer();
        style();
        initViews();
        addHandlers()
    })();

    function initContainer() {
        $container = _this.container
    }

    function style() {
        $container.css({
            position: "static"
        })
    }

    function initViews() {
        _swipePrompt = _this.initClass(MyPlanesSwipePrompt);
        _list = _this.initClass(MyPlanesList)
    }

    function addHandlers() {
        _this.events.subscribe(PlanesEvents.CATCH_PLANE, hidePrompt);
        _this.events.subscribe(PlanesEvents.NEW_PLANE, hidePrompt);
        _this.events.subscribe(PlanesEvents.CONFIRMATION_HIDDEN, showPrompt);
        _this.events.subscribe(PlanesEvents.CANCEL, refresh);
        _this.events.subscribe(PlanesEvents.MY_PLANES_SWIPE_COMPLETE, animateIn);
        _this.events.subscribe(PlanesEvents.PLANE_LIST_SELECT, openDetail);
        _this.events.subscribe(PlanesEvents.PLANE_DETAIL_CLOSE, closeDetail)
    }

    function hidePrompt() {
        _swipePrompt.animateOut();
        _list.element.hide()
    }

    function showPrompt(callback) {
        _swipePrompt.animateIn(callback);
        _list.element.show()
    }

    function animateIn(e) {
        _velocity = e.velocity * 0.01;
        Render.start(loop);
        AudioController.trigger("myplanes_in");
        GATracker.trackEvent("my planes", "click", "init", 1);
        UIMobile.instance().removeCatchPrompt()
    }

    function loop() {
        _velocity += ((-Stage.height - _swipePrompt.element.y) * 0.1 - _velocity) * 0.2;
        _swipePrompt.element.y += _velocity;
        _list.element.y += _velocity;
        _swipePrompt.element.transform();
        _list.element.transform();
        if (Math.abs(_velocity) < 0.01) {
            start()
        }
    }

    function start() {
        _this.isOpen = true;
        _list.element.transform({
            y: 0
        });
        _swipePrompt.element.transform({
            y: 0
        }).hide();
        Render.stop(loop);
        UIMobile.instance().closePrompt.animateIn()
    }

    function refresh() {
        if (_this.isDetail) {
            _detail.fadeOut(function() {
                _this.isDetail = false;
                _detail = _detail.destroy()
            })
        }
        if (_this.isOpen) {
            _this.isOpen = false;
            _list.animateOut(_swipePrompt.animateIn);
            return
        }
        showPrompt()
    }

    function openDetail(e) {
        if (!_this.isOpen || _this.isDetail) {
            return
        }
        _this.isDetail = true;
        _list.animateShiftOut();
        GATracker.trackEvent("my planes", "click", "open detail", 1);
        _detail = _this.initClass(MyPlanesDetailView, e.data);
        _this.delayedCall(_detail.animateIn, 100)
    }

    function closeDetail() {
        GATracker.trackEvent("my planes", "click", "close detail", 1);
        UIMobile.instance().closePrompt.animateIn();
        _list.animateShiftIn();
        _detail.animateOut(function() {
            _this.isDetail = false;
            _detail = _detail.destroy()
        })
    }
    this.showPrompt = showPrompt;
    this.openDetail = openDetail;
    this.hide = function() {
        $container.hide()
    };
    this.show = function() {
        $container.show()
    };
    this.onDestroy = function() {
        Render.stop(loop)
    }
}, "singleton");
Class(function IntroMobile() {
    Inherit(this, View);
    var _this = this;
    var $this;
    var _view, _earth, _flocking, _earthTween;
    (function() {
        initHTML();
        style();
        initViews();
        addHandlers();
        Render.start(loop);
        _this.delayedCall(animateIn, 300)
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.css({
            position: "static"
        })
    }

    function initViews() {
        _view = _this.initClass(IntroMobileView);
        initEarth();
        initFlocking()
    }

    function initEarth() {
        _earth = Earth.instance();
        World.instance().scene.add(_earth.object3D);
        var s = 0.15;
        _earth.object3D.scale.set(s, s, s);
        _earth.object3D.position.set(0, -33, -80);
        _earth.object3D.rotation.set(-0.5, 3, 0)
    }

    function initFlocking() {
        _flocking = PlaneFlocking.instance();
        _flocking.init(Tests.slowMeshUpload() ? 100 : 300, 4);
        World.instance().scene.add(_flocking.object3D);
        var s = 0.15;
        _flocking.object3D.scale.set(s, s, s);
        _flocking.object3D.position.set(0, -33, 0);
        _this.events.fire(PlanesEvents.PAUSE_FLOCKING)
    }

    function loop() {
        _earth.object3D.rotation.y += 0.001;
        _earth.object3D.rotation.x += 0.0015;
        if (_flocking) {
            _flocking.object3D.rotation.y += 0.0007
        }
        if (_flocking) {
            _flocking.object3D.rotation.x += 0.0004
        }
    }

    function animateIn() {
        var delay = Tests.slowMeshUpload() ? 4000 : 0;
        _this.delayedCall(_view.animateIn, delay * 0.5);
        _this.delayedCall(function() {
            _this.events.fire(PlanesEvents.RESUME_FLOCKING)
        }, 2000 + delay);
        if (!Tests.RETURN_USER()) {
            _this.delayedCall(function() {
                UIMobile.instance().newPrompt.animateIn()
            }, 4500 + delay)
        }
        _earthTween = TweenManager.tween(_earth.object3D.position, {
            z: -40,
            y: -35
        }, 12000, "easeOutCubic", 500 + delay, function() {})
    }

    function addHandlers() {
        if (Tests.RETURN_USER()) {
            var delay = Tests.slowMeshUpload() ? 4000 : 0;
            _this.delayedCall(function() {
                Stage.bind("touchend", complete)
            }, delay + 4000)
        } else {
            _this.events.subscribe(PlanesEvents.NEW_PLANE, complete)
        }
    }

    function complete() {
        if (Tests.RETURN_USER()) {
            Stage.unbind("touchend", complete);
            hideElements(function() {
                _this.events.fire(HydraEvents.COMPLETE)
            })
        } else {
            _this.events.fire(HydraEvents.COMPLETE)
        }
    }

    function hideElements(callback) {
        _view.animateOut();
        if (_earthTween && _earthTween.stop) {
            _earthTween.stop()
        }
        _flocking.animateOut();
        TweenManager.tween(_earth.object3D.position, {
            y: -50
        }, 1000, "easeInCubic", callback)
    }
    this.animateOut = function(callback) {
        $this.tween({
            opacity: 0
        }, 500, "easeOutCubic", function() {
            if (typeof callback == "function") {
                callback()
            }
        })
    };
    this.onDestroy = function() {
        if (_earthTween && _earthTween.stop) {
            _earthTween.stop()
        }
        Render.stop(loop);
        World.instance().scene.remove(_earth.object3D);
        World.instance().scene.remove(_flocking.object3D)
    }
});
Class(function LoaderMobile() {
    Inherit(this, View);
    var _this = this;
    var $this;
    var _view, _loader;
    (function() {
        initHTML();
        initViews();
        style();
        initLoader();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element
    }

    function initViews() {
        _view = _this.initClass(LoaderMobileView)
    }

    function style() {
        $this.size("100%").css({
            background: "#959cd5",
        }).setZ(10)
    }

    function initLoader() {
        AssetUtil.exclude(["stamps", "loader"]);
        var paths = AssetUtil.loadAssets(["assets"]);
        _loader = _this.initClass(AssetLoader, paths, 3);
        if (Mobile.isNative()) {
            if (Mobile.System.CONNECTIVITY) {
                _loader.add(1);
                XHR.get(Config.APP_ENGINE + "/geo", function(e) {
                    Data.User.data(e);
                    _loader.trigger(1)
                })
            } else {
                Data.User.data(null)
            }
        }
    }

    function addHandlers() {
        _loader.events.add(HydraEvents.COMPLETE, complete)
    }

    function complete() {
        Data.Socket.connect();
        _this.events.fire(HydraEvents.COMPLETE);
        AssetUtil.clearExclude();
        AssetUtil.loadAllAssets();
        AudioController.load(function() {})
    }
    this.animateOut = function(callback) {
        $this.tween({
            opacity: 0
        }, 1000, "easeOutCubic", 200, function() {
            if (typeof callback == "function") {
                callback()
            }
        })
    }
});
Class(function OverlayMobile() {
    Inherit(this, Controller);
    var _this = this;
    var $container, $bg;
    var _view;
    (function() {
        initContainer();
        initView()
    })();

    function initContainer() {
        $container = _this.container;
        $container.size("100%").hide().setZ(1000);
        if (!Tests.NO_CSS_BLEND()) {
            $container.blendMode("screen")
        }
        Stage.add($container);
        $bg = $container.create(".bg");
        $bg.size("100%").bg("#fff")
    }

    function initView() {
        _view = _this.initClass(OverlayMobileView, Copy.INFO_TEXT)
    }
    this.animateIn = function() {
        var max = Stage.height * (1 + (Stage.width / Stage.height) * 0.5);
        $bg.size(max, max).css({
            borderRadius: max
        }).center().transformPoint(max - 120, max - 100).transform({
            scale: 0.2
        }).tween({
            scale: 1
        }, 1000, "easeOutQuart");
        $container.show().css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 300, "easeOutSine");
        _view.animateIn();
        AudioController.trigger("about_in");
        AudioController.trigger("tap");
        GATracker.trackEvent("about", "click", "about in", 1)
    };
    this.animateOut = function() {
        $container.tween({
            opacity: 0,
            scale: 1.15
        }, 500, "easeOutSine", function() {
            $container.hide().clearTransform();
            _view.element.invisible()
        });
        GATracker.trackEvent("about", "click", "about out", 1);
        AudioController.trigger("tap")
    }
}, "Singleton");
Class(function UIMobile() {
    Inherit(this, Controller);
    var _this = this;
    var $container;
    var _newPrompt, _closePrompt, _catchPrompt, _instructions, _scalePrompt, _pinchPrompt, _rotatePrompt, _throwPrompt, _flipPrompt;
    (function() {
        initContainer();
        initViews();
        style();
        addHandlers()
    })();

    function initContainer() {
        $container = _this.container
    }

    function initViews() {
        _newPrompt = _this.initClass(UINewPrompt);
        _newPrompt.offset = true;
        _newPrompt.css({
            bottom: "",
            top: "50%",
            marginTop: 40
        });
        _closePrompt = _this.initClass(UIClosePrompt);
        _instructions = _this.initClass(UIInstructions)
    }

    function style() {
        $container.css({
            position: "static"
        })
    }

    function addHandlers() {
        _this.events.subscribe(PlanesEvents.NEW_PLANE, toNewPlaneScreen);
        _this.events.subscribe(PlanesEvents.CONFIRMATION_HIDDEN, toHomeScreen);
        _this.events.subscribe(PlanesEvents.CANCEL, toHomeScreen);
        _this.events.subscribe(PlanesEvents.MY_PLANES_SWIPE_COMPLETE, clearScreen)
    }

    function clearScreen() {
        _newPrompt.animateOut();
        _instructions.animateOut()
    }

    function toNewPlaneScreen() {
        _newPrompt.animateOut()
    }

    function toHomeScreen(skip) {
        _closePrompt.animateOut();
        _newPrompt.offset = false;
        _newPrompt.animateIn();
        _newPrompt.css({
            bottom: 100,
            top: "",
            marginTop: ""
        });
        if (skip) {
            return
        }
        defer(function() {
            _instructions.update("WAVE")
        })
    }

    function createScalePrompt() {
        _scalePrompt = _this.initClass(UIScaleCompletePrompt);
        _scalePrompt.animateIn();
        _scalePrompt.events.subscribe(HydraEvents.COMPLETE, removeScalePrompt);
        return _scalePrompt
    }

    function removeScalePrompt() {
        defer(function() {
            if (_scalePrompt) {
                _scalePrompt = _scalePrompt.destroy()
            }
        })
    }

    function createFlipPrompt() {
        _flipPrompt = _this.initClass(UIFlipPrompt);
        _flipPrompt.animateIn();
        return _flipPrompt
    }

    function removeFlipPrompt() {
        if (_flipPrompt) {
            _flipPrompt = _flipPrompt.destroy()
        }
    }

    function createPinchPrompt(y) {
        _pinchPrompt = _this.initClass(UIPinchPrompt, y);
        _pinchPrompt.animateIn();
        return _pinchPrompt
    }

    function removePinchPrompt() {
        if (_pinchPrompt) {
            _pinchPrompt = _pinchPrompt.destroy()
        }
    }

    function createRotatePrompt() {
        _rotatePrompt = _this.initClass(UIRotatePrompt);
        _rotatePrompt.animateIn()
    }

    function removeRotatePrompt() {
        if (_rotatePrompt) {
            _rotatePrompt = _rotatePrompt.destroy()
        }
    }

    function createThrowPrompt() {
        _throwPrompt = _this.initClass(UIThrowPrompt);
        _throwPrompt.animateIn();
        return _throwPrompt
    }

    function removeThrowPrompt() {
        if (_throwPrompt) {
            _throwPrompt = _throwPrompt.destroy()
        }
    }

    function createCatchPrompt() {
        if (!_catchPrompt) {
            _catchPrompt = _this.initClass(UICatchPrompt)
        }
        _catchPrompt.animateIn()
    }

    function removeCatchPrompt() {
        if (_catchPrompt) {
            _catchPrompt.animateOut(function() {
                _catchPrompt = _catchPrompt.destroy()
            })
        }
    }
    this.toHomeScreen = toHomeScreen;
    this.createScalePrompt = createScalePrompt;
    this.createPinchPrompt = createPinchPrompt;
    this.removePinchPrompt = removePinchPrompt;
    this.createRotatePrompt = createRotatePrompt;
    this.removeRotatePrompt = removeRotatePrompt;
    this.createThrowPrompt = createThrowPrompt;
    this.removeThrowPrompt = removeThrowPrompt;
    this.createFlipPrompt = createFlipPrompt;
    this.removeFlipPrompt = removeFlipPrompt;
    this.createCatchPrompt = createCatchPrompt;
    this.removeCatchPrompt = removeCatchPrompt;
    this.get("newPrompt", function() {
        return _newPrompt
    });
    this.get("closePrompt", function() {
        return _closePrompt
    });
    this.get("instructions", function() {
        return _instructions
    });
    this.hide = function() {
        $container.hide()
    };
    this.show = function() {
        $container.show()
    }
}, "singleton");
Class(function Playground() {
    Inherit(this, Controller);
    var _this = this;
    var $container;
    var _scene, _renderer, _camera, _view, _controls;
    (function() {
        Global.PLAYGROUND = true;
        initContainer();
        initThree();
        initView();
        addListeners();
        Render.start(loop)
    })();

    function initContainer() {
        $container = _this.container;
        $container.size("100%");
        Stage.add($container)
    }

    function initThree() {
        _scene = new THREE.Scene();
        _camera = new THREE.PerspectiveCamera(45, Stage.width / Stage.height, 10, 100000);
        _renderer = new THREE.WebGLRenderer({
            antialias: false
        });
        _renderer.setPixelRatio(2);
        _renderer.setSize(Stage.width, Stage.height);
        _renderer.shadowMapEnabled = true;
        _this.scene = _scene;
        Global.PLAYGROUND_SCENE = _scene;
        Global.PLAYGROUND_RENDERER = _renderer;
        Global.PLAYGROUND_CAMERA = _camera;
        _renderer.setClearColor(1776411);
        _camera.position.z = 2000;
        _controls = new THREE.TrackballControls(_camera);
        $container.add(_renderer.domElement)
    }

    function initView() {
        var hash = Hydra.HASH.split("/")[1].split("?")[0];
        var view = "Playground" + hash;
        if (!hash) {
            throw "No view for Playground found on Hash"
        }
        if (!window[view]) {
            throw "No Playground class " + view + " found."
        }
        _view = _this.initClass(window[view], _camera);
        _scene.add(_view.object3D)
    }

    function loop() {
        _controls.update();
        _renderer.render(_scene, _camera)
    }

    function addListeners() {
        _this.events.subscribe(HydraEvents.RESIZE, resizeHandler)
    }

    function resizeHandler() {
        _renderer.setSize(Stage.width, Stage.height);
        if (!_camera.custom) {
            _camera.aspect = Stage.width / Stage.height;
            _camera.updateProjectionMatrix()
        }
    }
    this.setScene = function(scene, camera) {
        _scene = scene;
        _camera = camera
    };
    this.setCamera = function(camera) {
        _camera = camera;
        _camera.custom = true
    };
    this.removeRenderer = function() {
        $container.remove();
        Render.stop(loop)
    }
}, "singleton");
Class(function Sidescreen() {
    Inherit(this, Controller);
    var _this = this;
    var $container;
    var _view, _loader, _flocking, _interval;
    (function() {
        initContainer();
        initView();
        addListeners()
    })();

    function initContainer() {
        $container = _this.container;
        $container.size("100%").css({
            opacity: 0
        });
        Stage.bg("#c8cef9");
        Stage.add($container)
    }

    function initView() {
        _loader = _this.initClass(LoaderDesktop);
        _loader.events.add(HydraEvents.COMPLETE, loadComplete);
        _loader.element.hide();
        _view = _this.initClass(SidescreenView)
    }

    function loadComplete() {
        _loader = _loader.destroy();
        $container.add(World.instance().renderer.domElement);
        BackgroundView.instance();
        _flocking = PlaneFlocking.instance();
        _flocking.init(250, 1);
        World.instance().scene.add(_flocking.object3D);
        var s = 1;
        _flocking.object3D.scale.set(s, s, s)
    }

    function addListeners() {
        _this.events.subscribe(PlanesEvents.START_EXP, start);
        _this.events.subscribe(PlanesEvents.END_EXP, end)
    }

    function start() {
        BackgroundView.instance().reset();
        $container.tween({
            opacity: 1
        }, 2000, "easeOutSine", 200);
        _this.delayedCall(_view.animateIn, 1500);
        _this.delayedCall(function() {
            _interval = setInterval(addPlane, 10000)
        }, 40000)
    }

    function end() {
        clearInterval(_interval);
        $container.tween({
            opacity: 0
        }, 1000, "easeOutSine");
        var scale = 0.45;
        var $ioLogo = Stage.create("ioLogo");
        $ioLogo.size(500 * scale, 340 * scale).center().css({
            opacity: 0,
            marginLeft: -250 * scale - 10,
            marginTop: -170 * scale - 50
        }).bg("assets/images/common/iologo.png");
        $ioLogo.css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 1000, "easeOutSine", 1000, function() {
            $ioLogo.tween({
                opacity: 0
            }, 1000, "easeOutSine", 1000)
        })
    }

    function addPlane() {
        console.log("add");
        _flocking.addPlane()
    }
}, "singleton");
Class(function BackgroundView() {
    Inherit(this, Component);
    var _this = this;
    var _shader, _timeoutOrder;
    var _colors = {
        purple: "#9da4e1",
        blue: "#83c9de",
        pink: "#d7b7ea",
    };
    this.object3D = new THREE.Object3D();
    (function() {
        initBackground();
        addHandlers();
        Render.start(loop)
    })();

    function initBackground() {
        var geometry = new THREE.PlaneBufferGeometry(2, 2, 1, 1);
        _shader = _this.initClass(Shader, "BackgroundRaytrace", "BackgroundRaytrace");
        _shader.uniforms = {
            time: {
                type: "f",
                value: 0
            },
            resolution: {
                type: "v2",
                value: new THREE.Vector2(Stage.width, Stage.height)
            },
            color0: {
                type: "c",
                value: new THREE.Color(_colors.purple)
            },
            color1: {
                type: "c",
                value: new THREE.Color(_colors.blue)
            },
            color2: {
                type: "c",
                value: new THREE.Color(_colors.pink)
            },
            camera: {
                type: "c",
                value: new THREE.Color(_colors.pink)
            },
            override: {
                type: "f",
                value: 1
            }
        };
        _shader.material.depthTest = false;
        var mesh = new THREE.Mesh(geometry, _shader.material);
        mesh.frustumCulled = false;
        _this.object3D.add(mesh);
        World.instance().scene.add(_this.object3D)
    }

    function addHandlers() {
        _this.events.subscribe(HydraEvents.RESIZE, resize);
        FXObjects.on("override", override)
    }

    function override(e) {
        if (e == "override") {
            _this.object3D.visible = false
        } else {
            _this.object3D.visible = true
        }
    }

    function resize() {
        _shader.uniforms.resolution.value.set(Stage.width, Stage.height)
    }

    function loop(t, dt) {
        _shader.uniforms.time.value = dt
    }
    this.toFront = function() {
        if (_timeoutOrder) {
            clearTimeout(_timeoutOrder)
        }
        _timeoutOrder = _this.delayedCall(function() {
            _shader.material.depthTest = true
        }, 200)
    };
    this.toBack = function() {
        if (_timeoutOrder) {
            clearTimeout(_timeoutOrder)
        }
        _timeoutOrder = _this.delayedCall(function() {
            _shader.material.depthTest = false
        }, 100)
    };
    this.override = function(val) {
        _shader.set("override", val)
    };
    this.reset = function() {
        Render.stop(loop);
        Render.start(loop)
    }
}, "singleton");
Class(function Earth() {
    Inherit(this, Component);
    var _this = this;
    var _land, _sea, _earth, _cube, _glow;
    var _time = 0;
    this.object3D = new THREE.Group();
    (function() {
        initCube();
        initMesh();
        Render.start(loop)
    })();

    function initCube() {
        if (Config.BEAST) {
            _cube = new THREE.CubeCamera(10, 10000, 1024);
            _this.object3D.add(_cube)
        }
    }

    function initMesh() {
        _earth = Utils3D.loadObject("earth");
        _this.object3D.add(_earth);
        _earth.scale.set(0.7, 0.7, 0.7);
        _earth.rotation.y = Utils.toRadians(238);
        Dev.expose("earf", _earth);
        _land = _earth.children[0].children[0];
        _land.frustumCulled = false;
        _land.shader = _this.initClass(Shader, "LandGeometry", "LandGeometry");
        _land.shader.uniforms = {
            light: {
                type: "v3",
                value: new THREE.Vector3(-5000, 2000, -5000)
            },
            ambient1: {
                type: "c",
                value: new THREE.Color(11511550)
            },
            ambient2: {
                type: "c",
                value: new THREE.Color(11790847)
            },
            map: {
                type: "t",
                value: Utils3D.getTexture("assets/images/earth/shadows.jpg")
            },
            shadowMix: {
                type: "f",
                value: 0
            },
            fadeOut: {
                type: "f",
                value: 0
            },
            time: {
                type: "f",
                value: 0
            },
        };
        _land.material = _land.shader.material;
        _land.scale.set(0.975, 0.975, 0.975);
        if (Tests.oceanAnimation()) {
            _land.scale.set(0.96, 0.96, 0.96);
            _land.position.y -= 0.5
        }
        _land.shader.set("ambient1", new THREE.Color(9886694));
        _land.shader.set("ambient2", new THREE.Color(7248598));
        _sea = _earth.children[2].children[0];
        _sea.frustumCulled = false;
        _sea.geometry = new THREE.BufferGeometry().fromGeometry(_sea.geometry);
        setOceanAttributes(_sea.geometry);
        insertSphere(_earth.children[1].children[0]);
        _sea.shader = _this.initClass(Shader, Tests.oceanAnimation() ? "OceanGeometry" : "OceanGeometryBasic", "OceanGeometry");
        _sea.shader.uniforms = {
            light: {
                type: "v3",
                value: new THREE.Vector3(-5000, 2000, -5000)
            },
            ambient1: {
                type: "c",
                value: new THREE.Color(10733036)
            },
            ambient2: {
                type: "c",
                value: new THREE.Color(8950227)
            },
            rimColor: {
                type: "c",
                value: new THREE.Color(4661124)
            },
            map: {
                type: "t",
                value: Utils3D.getTexture("assets/images/earth/shadows.jpg")
            },
            shadowMix: {
                type: "f",
                value: 0
            },
            fadeOut: {
                type: "f",
                value: 0
            },
            time: {
                type: "f",
                value: 0
            },
        };
        _sea.material = _sea.shader.material;
        _sea.shader.set("shadowMix", 1);
        _sea.shader.uniforms.map.value = Utils3D.getTexture("assets/images/earth/shadows.jpg");
        var img = new THREE.MeshBasicMaterial({
            map: Utils3D.getTexture("assets/images/earth/glow.png"),
            transparent: true,
            blending: THREE.AdditiveBlending,
            depthWrite: false,
            side: THREE.DoubleSide
        });
        img.opacity = 0;
        var plane = new THREE.PlaneBufferGeometry(1800, 1800);
        _glow = new THREE.Mesh(plane, img);
        _glow.frustumCulled = false;
        if (!Device.mobile) {
            TweenManager.tween(_glow.material, {
                opacity: 0.15
            }, 10000, "easeOutSine", 5000)
        }
        FXObjects.register(_land);
        FXObjects.register(_sea);
        _glow.rotation.y = Math.PI;
        _glow.position.z = 160;
        var s = 0.5;
        _glow.scale.set(s, s, s);
        if (!Device.mobile) {
            World.instance().scene.add(_glow)
        }
    }

    function loop(t, dt, delta) {
        _time += delta;
        _land.shader.uniforms.time.value = _time;
        _sea.shader.uniforms.time.value = _time;
        if (_cube) {
            BackgroundView.instance().override(0);
            _this.object3D.visible = false;
            _cube && _cube.updateCubeMap(World.instance().renderer, World.instance().scene);
            _this.object3D.visible = true;
            BackgroundView.instance().override(1)
        }
    }

    function insertSphere(mesh) {
        if (!_cube) {
            return mesh.visible = false
        }
        var shader = _this.initClass(Shader, "OceanReflection", "OceanReflection");
        shader.uniforms = {
            tCube: {
                type: "t",
                value: _cube.renderTarget
            }
        };
        shader.material.transparent = true;
        shader.material.depthWrite = false;
        shader.material.blending = THREE.AdditiveBlending;
        mesh.scale.set(0.975, 0.975, 0.975);
        mesh.material = shader.material
    }

    function setOceanAttributes(geom) {
        var position = geom.attributes.position;
        var angle = new Float32Array(position.count);
        var speed = new Float32Array(position.count);
        var radius = new Float32Array(position.count);
        var len = position.count;
        for (var i = 0; i < len; i++) {
            angle[i] = Utils.toRadians(Utils.doRandom(0, 360));
            speed[i] = Utils.doRandom(50, 150) / 150;
            radius[i] = Utils.doRandom(-10, 10) / 100
        }
        geom.addAttribute("angle", new THREE.BufferAttribute(angle, 1));
        geom.addAttribute("speed", new THREE.BufferAttribute(speed, 1));
        geom.addAttribute("radius", new THREE.BufferAttribute(radius, 1))
    }
    this.halfVisible = function() {
        _land.shader.material.transparent = true;
        _sea.shader.material.transparent = true;
        _land.shader.uniforms.fadeOut.value = 1;
        _sea.shader.uniforms.fadeOut.value = 1
    };
    this.fullVisible = function() {
        _land.shader.material.transparent = false;
        _sea.shader.material.transparent = false;
        _land.shader.uniforms.fadeOut.value = 0;
        _sea.shader.uniforms.fadeOut.value = 0
    };
    this.onDestroy = function() {
        Render.stop(loop)
    }
}, "singleton");
Class(function PlaneFlocking() {
    Inherit(this, Component);
    var _this = this;
    var _simulation, _planes, _numParticles, _numThreads;
    this.object3D = new THREE.Object3D();
    var _totalAdded = 0;
    (function() {})();

    function initPlanes() {
        var textureSize = 16;
        _planes = _this.initClass(PlaneInstance, "PlaneCPUInstance", textureSize, _numParticles);
        _this.object3D.add(_planes.object3D);
        _simulation = _this.initClass(PlaneFlockingCPU, _numParticles, _numThreads, _planes.geometry);
        if (!Device.mobile) {
            releasePlanes()
        }
    }

    function releasePlanes() {
        _totalAdded = Tests.AT_IO() || Hydra.HASH.strpos("side") ? 0 : 100;
        for (var i = 0; i < _numParticles; i++) {
            _planes.geometry.attributes.released.setX(i, i < _totalAdded ? 1 : 0)
        }
        _planes.geometry.attributes.released.needsUpdate = true
    }

    function updateLockedGeometry(numToAdd) {
        for (var i = 0; i < numToAdd; i++) {
            for (var j = 0; j < _numParticles; j++) {
                if (_planes.geometry.attributes.released.array[j] === 0 && _planes.geometry.attributes.offset.array[j * 3 + 1] < -300) {
                    _planes.geometry.attributes.released.setX(j, 1);
                    _totalAdded++;
                    break
                }
            }
        }
        _planes.geometry.attributes.released.needsUpdate = true
    }

    function addHandlers() {
        var debug = function(e) {
            if (e.keyCode == 70) {
                var numToAdd = 15;
                numToAdd = Math.min(numToAdd, _numParticles - _totalAdded);
                updateLockedGeometry(numToAdd)
            }
        };
        if (Tests.AT_IO()) {
            __window.bind("keydown", debug)
        }
    }
    this.init = function(numParticles, numThreads) {
        _numParticles = Math.round(numParticles * Tests.getPlaneReduce());
        _numThreads = numThreads;
        AudioController.setNumThreads(_numThreads);
        initPlanes();
        if (Tests.AT_IO()) {
            addHandlers()
        }
    };
    this.animateOut = function() {
        _simulation.disperse();
        _planes.fadeOut()
    };
    this.animateIn = function() {
        _simulation.assemble();
        _planes.fadeIn()
    };
    this.addPlane = function() {
        if (_totalAdded >= _numParticles) {
            return "finished"
        }
        var numToAdd = Tests.AT_IO() ? 1 : 5;
        numToAdd = Math.min(numToAdd, _numParticles - _totalAdded);
        updateLockedGeometry(numToAdd)
    }
}, "singleton");
Class(function PlaneFlockingCPU(_numParticles, _numThreads, _geometry) {
    Inherit(this, Component);
    var _this = this;
    var _chunks = [];
    (function() {
        initChunks();
        addHandlers()
    })();

    function initChunks() {
        for (var i = 0; i < _numThreads; i++) {
            var chunk = _this.initClass(PlaneFlockingChunk, i, Math.floor(_numParticles / _numThreads), _geometry, _numThreads);
            _chunks.push(chunk)
        }
    }

    function addHandlers() {
        _this.events.subscribe(PlanesEvents.PAUSE_FLOCKING, pause);
        _this.events.subscribe(PlanesEvents.RESUME_FLOCKING, resume)
    }

    function pause() {
        _chunks.forEach(function(chunk) {
            chunk.pause()
        })
    }

    function resume() {
        _chunks.forEach(function(chunk) {
            chunk.resume()
        })
    }
    this.disperse = function() {
        _chunks.forEach(function(chunk) {
            chunk.disperse()
        });
        _this.delayedCall(pause, 1000)
    };
    this.assemble = function() {
        _chunks.forEach(function(chunk) {
            chunk.assemble()
        })
    }
});
Class(function FlockingAlignment(_neighborDist, _maxSpeed) {
    Inherit(this, Component);
    var _this = this;
    var _neighborSq = _neighborDist * _neighborDist;
    var _steer = new Vector3();
    this.init = function(p) {
        p.aCount = 0;
        if (!p.aSum) {
            p.aSum = new Vector3()
        }
        p.aSum.clear()
    };
    this.compare = function(p, f, distSq, calc) {
        if (!p.neighborSq) {
            p.neighborSq = Math.pow(_neighborDist * p.alignmentOffset, 2)
        }
        if (distSq < p.neighborSq) {
            p.aSum.add(f.vel);
            p.aCount++
        }
    };
    this.calculate = function(p) {
        if (p.aCount > 0) {
            var sum = p.aSum;
            sum.divide(p.aCount).normalize().multiply(_maxSpeed);
            _steer.subVectors(sum, p.vel);
            p.applyForce(_steer)
        }
    };
    this.set("neighborDist", function(value) {
        _neighborDist = value;
        _neighborSq = _neighborDist * _neighborDist
    });
    this.set("maxSpeed", function(value) {
        _maxSpeed = value
    })
});
Class(function FlockingAttract() {
    Inherit(this, Component);
    var _this = this;
    var _delta = new Vector3();
    var _points = [];
    this.addPoint = function(pos, radius, strength) {
        pos.radius = radius;
        pos.strength = strength;
        pos.radiusSq = pos.radius * pos.radius;
        _points.push(pos)
    };
    this.removeLastPoint = function() {
        _points.pop()
    };
    this.applyBehavior = function(p) {
        if (p.fixed) {
            return
        }
        _delta.clear().sub(p.pos);
        var distSq = _delta.lengthSq();
        for (var i = 0; i < _points.length; i++) {
            var point = _points[i];
            if (distSq < point.radiusSq && distSq > 0.000001) {
                _delta.normalize().multiply(1 - distSq / point.radiusSq);
                p.acc.add(_delta.multiply(point.strength * p.gravityOffset))
            }
        }
    }
});
Class(function FlockingBehavior() {
    Inherit(this, Component);
    var _this = this;
    var _config = {};
    _config.separation = 20;
    _config.separationMaxSpeed = 1000;
    _config.alignmentNeighborDist = 80;
    _config.alignmentMaxSpeed = 1000;
    _config.cohesionNeighborDist = 800;
    _config.cohesionMaxSpeed = 200;
    var _negate = new Vector3();
    var _separation = _this.initClass(FlockingSeparation, _config.separation, _config.separationMaxSpeed);
    var _align = _this.initClass(FlockingAlignment, _config.alignmentNeighborDist, _config.alignmentMaxSpeed);
    var _cohesion = _this.initClass(FlockingCohesion, _config.cohesionNeighborDist, _config.cohesionMaxSpeed);
    var _area = 2000;
    var _spaces = 7;
    var _cube = [];
    var _calc = new Vector3();

    function checkPosition(p) {
        var x = ~~(Utils.range(p.pos.x, -_area, _area, 0, _spaces));
        var y = ~~(Utils.range(p.pos.y, -_area, _area, 0, _spaces));
        var z = ~~(Utils.range(p.pos.z, -_area, _area, 0, _spaces));
        if (!_cube[x]) {
            _cube[x] = []
        }
        if (!_cube[x][y]) {
            _cube[x][y] = []
        }
        if (!_cube[x][y][z]) {
            _cube[x][y][z] = []
        }
        var lookup = _cube[x][y][z];
        if (p.location != lookup) {
            if (p.location) {
                p.location.findAndRemove(p)
            }
            lookup.push(p)
        }
        p.location = lookup
    }
    this.applyBehavior = function(p) {
        checkPosition(p);
        _separation.init(p);
        _align.init(p);
        _cohesion.init(p);
        var len = p.location.length;
        for (var i = len - 1; i > -1; i--) {
            var f = p.location[i];
            if (f == p) {
                continue
            }
            _calc.subVectors(p.pos, f.pos);
            var distSq = _calc.lengthSq();
            _separation.compare(p, f, distSq, _calc);
            _align.compare(p, f, distSq, _calc);
            _cohesion.compare(p, f, distSq, _calc)
        }
        _separation.calculate(p);
        _align.calculate(p);
        _cohesion.calculate(p);
        p.vel.multiply(p.friction);
        if (p.pos.lengthSq() < 180 * 180 || p.vel.lengthSq() < 1) {
            _negate.copy(p.pos).multiply(-0.2);
            p.applyForce(_negate)
        }
    };
    this.set("separation", function(value) {
        _config.separation = value;
        _separation.separation = value
    });
    this.set("separationMaxSpeed", function(value) {
        _config.separationMaxSpeed = value;
        _separation.maxSpeed = value
    });
    this.set("alignmentNeighborDist", function(value) {
        _config.alignmentNeighborDist = value;
        _align.neighborDist = value
    });
    this.set("alignmentMaxSpeed", function(value) {
        _config.alignmentMaxSpeed = value;
        _align.maxSpeed = value
    });
    this.set("cohesionNeighborDist", function(value) {
        _config.cohesionNeighborDist = value;
        _cohesion.neighborDist = value
    });
    this.set("cohesionMaxSpeed", function(value) {
        _config.cohesionMaxSpeed = value;
        _cohesion.maxSpeed = value
    })
});
Class(function FlockingCohesion(_neighborDist, _maxSpeed) {
    Inherit(this, Component);
    var _this = this;
    var _neighborSq = _neighborDist * _neighborDist;
    var _seek = new Vector3();
    var _steer = new Vector3();
    this.init = function(p) {
        p.cCount = 0;
        if (!p.cSum) {
            p.cSum = new Vector3()
        }
        p.cSum.clear()
    };
    this.compare = function(p, f, distSq, calc) {
        if (!p.neighorSq) {
            p.neighborSq = Math.pow(_neighborDist * p.cohesionOffset, 2)
        }
        if (distSq < p.neighborSq) {
            p.cSum.add(f.pos);
            p.cCount++
        }
    };
    this.calculate = function(p) {
        if (p.cCount > 0) {
            var sum = p.cSum;
            sum.divide(p.cCount);
            _seek.subVectors(sum, p.pos);
            _seek.normalize().multiply(_maxSpeed);
            _steer.subVectors(_seek, p.vel);
            p.applyForce(_steer)
        }
    };
    this.set("neighborDist", function(value) {
        _neighborDist = value;
        _neighborSq = _neighborDist * _neighborDist
    });
    this.set("maxSpeed", function(value) {
        _maxSpeed = value
    })
});
Class(function FlockingRotation() {
    Inherit(this, Component);
    var _this = this;
    var _origin = new Vector3(0, 0, -1);
    var _u = new Vector3();
    var _c = new Vector3();
    var _axis = new Vector3(0, 0, -1);
    var _z = new THREE.Quaternion();
    (function() {})();
    this.applyBehavior = function(p) {
        _u.copyFrom(p.vel);
        _u.normalize();
        _c.copyFrom(_u);
        var cos_theta = _u.dot(_origin);
        var angle = Math.acos(cos_theta);
        _c.cross(_origin);
        _c.normalize();
        p.targetRotation.setFromAxisAngle(_c, angle);
        _z.setFromAxisAngle(_axis, -0.5 + p.random * 2);
        p.targetRotation.multiply(_z);
        p.rotation.slerp(p.targetRotation, 0.07);
        p.finalPosition.lerp(p.pos, 0.1)
    }
});
Class(function FlockingSeparation(_separation, _maxSpeed) {
    Inherit(this, Component);
    var _this = this;
    var _separationSq = _separation * _separation;
    var _calc = new Vector3();
    var _steer = new Vector3();
    this.init = function(p) {
        p.sCount = 0;
        if (!p.sSum) {
            p.sSum = new Vector3()
        }
        p.sSum.clear()
    };
    this.compare = function(p, f, distSq, calc) {
        if (!p.sepSq) {
            p.sepSq = Math.pow(_separation * p.separationOffset, 2)
        }
        if (distSq < p.sepSq) {
            _calc.copyFrom(calc).multiply(p.separationOffset).normalize();
            p.sSum.add(_calc);
            p.sCount++
        }
    };
    this.calculate = function(p) {
        if (p.sCount > 0) {
            p.sSum.divide(p.sCount);
            p.sSum.setLength(_maxSpeed);
            _steer.subVectors(p.sSum, p.vel);
            p.applyForce(_steer)
        }
    };
    this.set("separation", function(value) {
        _separation = value;
        _separationSq = _separation * _separation
    });
    this.set("maxSpeed", function(value) {
        _maxSpeed = value
    })
});
Class(function PlaneFlockingBehaviour(_particles) {
    Inherit(this, Component);
    var _this = this;
    var _alignmentWeight = 50;
    var _cohesionWeight = 60;
    var _separationWeight = 70;
    (function() {})();
    var computeFactors = (function() {
        var averageVelocity = new Vector3();
        var averagePosition = new Vector3();
        var averageDistance = new Vector3();
        var distance = new Vector3();
        var direction = new Vector3();
        return function(p) {
            averageVelocity.clear();
            averagePosition.clear();
            averageDistance.clear();
            var neighborCount = 0;
            _particles.forEach(function(q) {
                if (q != p && p.pos.distanceTo(q.pos) < 400) {
                    neighborCount++;
                    averageVelocity.add(q.vel);
                    averagePosition.add(q.pos);
                    distance.copyFrom(q.pos);
                    distance.sub(p.pos);
                    averageDistance.add(distance)
                }
            });
            if (neighborCount !== 0) {
                averageVelocity.divide(neighborCount);
                averagePosition.divide(neighborCount);
                averageDistance.divide(neighborCount)
            }
            averageVelocity.normalize();
            direction.copyFrom(averagePosition);
            direction.sub(p.pos);
            direction.normalize();
            averageDistance.multiply(-1);
            averageDistance.normalize();
            averageVelocity.multiply(_alignmentWeight);
            direction.multiply(_cohesionWeight);
            averageDistance.multiply(_separationWeight);
            return [averageVelocity, direction, averageDistance]
        }
    })();
    this.applyBehavior = function(p) {
        var factors = computeFactors(p);
        var alignment = factors[0];
        var cohesion = factors[1];
        var separation = factors[2];
        p.vel.add(alignment);
        p.vel.add(cohesion);
        p.vel.add(separation)
    }
});
Class(function PlaneGravityBehaviour() {
    Inherit(this, Component);
    var _this = this;
    var _pull = new Vector3();
    (function() {})();
    this.applyBehavior = function(p) {
        _pull.copyFrom(p.pos);
        _pull.multiply(Utils.range(_pull.length(), 700, 1000, 0, -0.06, true));
        p.vel.add(_pull)
    }
});
Class(function PlaneGroundBehaviour() {
    Inherit(this, Component);
    var _this = this;
    var _push = new Vector3();
    (function() {})();
    this.applyBehavior = function(p) {
        _push.copyFrom(p.pos);
        var multiply = Utils.range(_push.length(), 400, 450, 1, 0, true);
        _push.normalize();
        _push.multiply(multiply);
        p.vel.add(_push)
    }
});
Class(function PlaneSpeedBehaviour() {
    Inherit(this, Component);
    var _this = this;
    var _pull = new Vector3();
    (function() {})();
    this.applyBehavior = function(p) {
        p.vel.multiply(Utils.range(p.vel.length(), 10, 20, 1, 0.9, true))
    }
});
Class(function PlaneFlockingChunk(_index, _numParticles, _geometry, _numThreads) {
    Inherit(this, Component);
    var _this = this;
    var _thread, _recycle, _render;
    var OFFSET = 7;
    (function() {
        initThread();
        Render.start(loop)
    })();

    function initThread() {
        _thread = _this.initClass(Thread, PlaneFlockingThread);
        _thread.importScript(Config.PROXY + "assets/js/lib/three.min.js");
        _thread.importClass(Vector2, Vector3, ParticlePhysics, EulerIntegrator, LinkedList, PlaneFlockingThreadConverter, Particle, WiggleBehavior, FlockingAlignment, FlockingAttract, FlockingBehavior, FlockingCohesion, FlockingSeparation, FlockingRotation, PlaneFlockingBehaviour, PlaneGravityBehaviour, PlaneGroundBehaviour, PlaneSpeedBehaviour, ObjectPool);
        _thread.init({
            total: _numParticles
        });
        _thread.on("transfer", updateGeometry)
    }

    function loop() {
        if (!_render) {
            _render = {}
        }
        _render.time = Render.TSL;
        _render.delta = Render.DELTA;
        _thread.render(_render)
    }

    function updateGeometry(e) {
        var audioPos;
        var releasedPlanes = [];
        for (var k = 0; k < _numThreads; k++) {
            releasedPlanes.push(0)
        }
        for (var i = 0, j = _index * _numParticles; i < e.values.length; i += OFFSET, j++) {
            _geometry.attributes.offset.setXYZ(j, e.values[i + 0], e.values[i + 1], e.values[i + 2]);
            _geometry.attributes.orientation.setXYZW(j, e.values[i + 3], e.values[i + 4], e.values[i + 5], e.values[i + 6]);
            if (i === 0) {
                audioPos = {
                    x: e.values[i + 0],
                    y: e.values[i + 1],
                    z: e.values[i + 2]
                }
            }
            if (_geometry.attributes.released.getX(j) !== 0) {
                releasedPlanes[_index]++
            }
        }
        _geometry.attributes.offset.needsUpdate = true;
        _geometry.attributes.orientation.needsUpdate = true;
        if (!Device.mobile) {
            AudioController.updateFlock(_index, audioPos, releasedPlanes[_index])
        }
        recycle(e.values)
    }

    function recycle(buffer) {
        if (!_recycle) {
            _recycle = {
                transfer: true,
                msg: {
                    buffers: []
                }
            }
        }
        _recycle.msg.array = buffer;
        _recycle.msg.buffers.length = 0;
        _recycle.msg.buffers.push(buffer.buffer);
        _thread.recycleBuffer(_recycle)
    }
    this.pause = function() {
        Render.stop(loop)
    };
    this.resume = function() {
        Render.start(loop)
    };
    this.disperse = function() {
        _this.isDispersed = true;
        _thread.disperse()
    };
    this.assemble = function() {
        if (!_this.isDispersed) {
            return
        }
        _this.isDispersed = false;
        _thread.assemble()
    };
    this.onDestroy = function() {
        Render.stop(loop)
    }
});
Class(function PlaneFlockingThread() {
    Inherit(this, Component);
    var _this = this;
    var _system, _converter, _wiggle, _behavior, _attractor;
    var _particles = [];
    var _count = 0;
    (function() {})();

    function initSystem() {
        var integrator = new EulerIntegrator();
        integrator.useDeltaTime = true;
        _system = _this.initClass(ParticlePhysics, integrator);
        _converter = _this.initClass(PlaneFlockingThreadConverter, _system.particles)
    }

    function initParticles(numParticles) {
        var max = 1000;
        for (var i = 0; i < numParticles; i++) {
            var p = new Particle(new Vector3(Utils.doRandom(-max, max), 0, 0), 0, 0);
            p.targetRotation = new THREE.Quaternion();
            p.rotation = new THREE.Quaternion();
            p.vel.set(Utils.doRandom(-100, 100) / 10, Utils.doRandom(-100, 100) / 10, Utils.doRandom(-100, 100) / 10);
            _system.addParticle(p);
            _particles.push(p);
            p.separationOffset = Utils.doRandom(8, 12) / 10;
            p.alignmentOffset = Utils.doRandom(5, 20) / 10;
            p.cohesionOffset = Utils.doRandom(90, 100) / 100;
            p.friction = Utils.doRandom(900, 1000) / 1000;
            p.gravityOffset = Utils.doRandom(90, 150) / 100;
            p.random = Math.random();
            p.finalPosition = new Vector3()
        }
    }

    function initBehaviours() {
        _behavior = new FlockingBehavior();
        _system.addBehavior(_behavior);
        var attract = new Vector3();
        _wiggle = new WiggleBehavior(attract);
        _wiggle.scale = 60;
        _wiggle.speed = 20;
        _wiggle.attract = attract;
        _attractor = new FlockingAttract();
        _attractor.addPoint(attract, 100000, 350);
        _attractor.addPoint(new Vector3(), 600, -600);
        _system.addBehavior(_attractor);
        _system.addBehavior(new FlockingRotation());
        _system.friction = 0.993;
        setTimeout(function() {}, 2000)
    }

    function loop(time, delta, mouse) {
        _count++;
        _system.update();
        var data = _converter.convert();
        var message = {};
        var buffers = [];
        for (var key in data) {
            message[key] = data[key];
            buffers.push(data[key].buffer)
        }
        emit("transfer", message, buffers)
    }
    this.init = function(e) {
        initSystem();
        initParticles(e.total);
        initBehaviours()
    };
    this.disperse = function() {
        _attractor.addPoint(new Vector3(0, 0, 0), 1000, 1000)
    };
    this.assemble = function() {
        _attractor.removeLastPoint()
    };
    this.render = function(e) {
        loop(e.time, e.delta, e.mouse)
    };
    this.recycleBuffer = function(e) {
        _converter.recycle(e.array)
    }
});
Class(function PlaneFlockingThreadConverter(_particles) {
    Inherit(this, Component);
    var _this = this;
    var OFFSET = 7;
    var _buffer = {};
    var _pool;
    (function() {})();

    function initPool() {
        _pool = new ObjectPool();
        for (var i = 0; i < 20; i++) {
            var array = new Float32Array(_particles.length * OFFSET);
            _pool.insert(array)
        }
    }
    this.convert = function() {
        if (!_pool) {
            initPool()
        }
        var values = _pool.get() || new Float32Array(_particles.length * OFFSET);
        var p = _particles.start();
        var index = 0;
        while (p) {
            values[index * OFFSET + 0] = p.finalPosition.x;
            values[index * OFFSET + 1] = p.finalPosition.y;
            values[index * OFFSET + 2] = p.finalPosition.z;
            values[index * OFFSET + 3] = p.rotation.x;
            values[index * OFFSET + 4] = p.rotation.y;
            values[index * OFFSET + 5] = p.rotation.z;
            values[index * OFFSET + 6] = p.rotation.w;
            index++;
            p = _particles.next()
        }
        _buffer.values = values;
        return _buffer
    };
    this.recycle = function(array) {
        _pool.put(array)
    }
});
Class(function PlaneFlockingGPGPU(_textureSize, _plane) {
    Inherit(this, Component);
    var _this = this;
    var _simulator;
    (function() {
        initSimulator()
    })();

    function initSimulator() {
        _simulator = _this.initClass(PlaneFlockingGPGPUShaders, _textureSize, _plane)
    }
});
Class(function PlaneFlockingGPGPUShaders(_textureSize, _plane) {
    Inherit(this, Component);
    var _this = this;
    var _camera, _scene, _quad, _passThroughShader, _positionShader, _velocityShader, _flipflop, _rtPosition1, _rtPosition2, _rtVelocity1, _rtVelocity2;
    var _renderer = new THREE.WebGLRenderer();
    var _numParticles = _textureSize * _textureSize;
    var _boundary = 100;
    (function() {
        initScene();
        initShaders();
        initTextures();
        Render.start(loop)
    })();

    function initScene() {
        _camera = new THREE.Camera();
        _camera.position.z = 1;
        _scene = new THREE.Scene();
        _passThroughShader = _this.initClass(Shader, "PassThrough", "PassThrough");
        _passThroughShader.uniforms = {
            time: {
                type: "f",
                value: 1
            },
            resolution: {
                type: "v2",
                value: new THREE.Vector2(_textureSize, _textureSize)
            },
            texture: {
                type: "t",
                value: null
            }
        };
        _quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), _passThroughShader.material);
        _quad.frustumCulled = false;
        _scene.add(_quad)
    }

    function initShaders() {
        _positionShader = _this.initClass(Shader, "PassThrough", "PassThrough");
        _positionShader.uniforms = {
            time: {
                type: "f",
                value: 1
            },
            delta: {
                type: "f",
                value: 1
            },
            resolution: {
                type: "v2",
                value: new THREE.Vector2(_textureSize, _textureSize)
            },
            texturePosition: {
                type: "t",
                value: null
            },
            textureVelocity: {
                type: "t",
                value: null
            },
        };
        _velocityShader = _this.initClass(Shader, "PassThrough", "PassThrough");
        _velocityShader.uniforms = {
            time: {
                type: "f",
                value: 1
            },
            delta: {
                type: "f",
                value: 1
            },
            resolution: {
                type: "v2",
                value: new THREE.Vector2(_textureSize, _textureSize)
            },
            texturePosition: {
                type: "t",
                value: null
            },
            textureVelocity: {
                type: "t",
                value: null
            },
            testing: {
                type: "f",
                value: 1
            },
            seperationDistance: {
                type: "f",
                value: 20
            },
            alignmentDistance: {
                type: "f",
                value: 20
            },
            cohesionDistance: {
                type: "f",
                value: 20
            },
            freedomFactor: {
                type: "f",
                value: 0.75
            },
            predator: {
                type: "v3",
                value: new THREE.Vector3()
            },
        }
    }

    function initTextures() {
        var dtPosition = generatePositionTexture();
        var dtVelocity = generateVelocityTexture();
        _rtPosition1 = getRenderTarget(THREE.RGBAFormat);
        _rtPosition2 = _rtPosition1.clone();
        _rtVelocity1 = getRenderTarget(THREE.RGBFormat);
        _rtVelocity2 = _rtVelocity1.clone();
        renderTexture(dtPosition, _rtPosition1);
        renderTexture(_rtPosition1, _rtPosition2);
        renderTexture(dtVelocity, _rtVelocity1);
        renderTexture(_rtVelocity1, _rtVelocity2);
        _velocityShader.uniforms.testing.value = 10
    }

    function generatePositionTexture() {
        var a = new Float32Array(_numParticles * 4);
        for (var k = 0, kl = a.length; k < kl; k += 4) {
            var x = Math.random() * _boundary - _boundary * 0.5;
            var y = Math.random() * _boundary - _boundary * 0.5;
            var z = Math.random() * _boundary - _boundary * 0.5;
            a[k + 0] = x;
            a[k + 1] = y;
            a[k + 2] = z;
            a[k + 3] = 1
        }
        var texture = new THREE.DataTexture(a, _textureSize, _textureSize, THREE.RGBAFormat, THREE.FloatType);
        texture.needsUpdate = true;
        return texture
    }

    function generateVelocityTexture() {
        var a = new Float32Array(_numParticles * 3);
        for (var k = 0, kl = a.length; k < kl; k += 3) {
            var x = Math.random() - 0.5;
            var y = Math.random() - 0.5;
            var z = Math.random() - 0.5;
            a[k + 0] = x * 10;
            a[k + 1] = y * 10;
            a[k + 2] = z * 10
        }
        var texture = new THREE.DataTexture(a, _textureSize, _textureSize, THREE.RGBFormat, THREE.FloatType);
        texture.needsUpdate = true;
        return texture
    }

    function getRenderTarget(type) {
        return new THREE.WebGLRenderTarget(_textureSize, _textureSize, {
            wrapS: THREE.RepeatWrapping,
            wrapT: THREE.RepeatWrapping,
            minFilter: THREE.NearestFilter,
            magFilter: THREE.NearestFilter,
            format: type,
            type: THREE.FloatType,
            stencilBuffer: false
        })
    }

    function renderTexture(input, output) {
        _quad.material = _passThroughShader;
        _passThroughShader.uniforms.texture.value = input;
        _renderer.render(_scene, _camera, output)
    }

    function renderPosition(position, velocity, output) {
        _quad.material = _positionShader.material;
        _positionShader.uniforms.texturePosition.value = position;
        _positionShader.uniforms.textureVelocity.value = velocity;
        _renderer.render(_scene, _camera, output);
        _plane.texturePosition = output
    }

    function renderVelocity(position, velocity, output) {
        _quad.material = _velocityShader;
        _velocityShader.uniforms.texturePosition.value = position;
        _velocityShader.uniforms.textureVelocity.value = velocity;
        _renderer.render(_scene, _camera, output);
        _plane.textureVelocity = output
    }

    function loop(t, dt, delta) {
        _velocityShader.uniforms.time.value = dt;
        _velocityShader.uniforms.delta.value = delta;
        _positionShader.uniforms.time.value = dt;
        _positionShader.uniforms.delta.value = delta;
        if (_flipflop) {
            renderVelocity(_rtPosition1, _rtVelocity1, _rtVelocity2);
            renderPosition(_rtPosition1, _rtVelocity2, _rtPosition2)
        } else {
            renderVelocity(_rtPosition2, _rtVelocity2, _rtVelocity1);
            renderPosition(_rtPosition2, _rtVelocity1, _rtPosition1)
        }
        _flipflop = !_flipflop
    }
});
Class(function PlaneFoldGeometry() {
    Inherit(this, Component);
    var _this = this;
    var _geometry, _frontShader, _backShader, _frontMesh, _backMesh, _frontMixer, _backMixer;
    this.mesh = new THREE.Group();
    this.object3D = new THREE.Group();
    this.flipContainer = new THREE.Group();
    this.swayContainer = new THREE.Group();
    var _frame = 91;
    (function() {
        initGeometry();
        initShader();
        initMesh();
        initAnimation();
        initStampTexture()
    })();

    function initGeometry() {
        _geometry = PlaneFoldGeometry.getGeometry()
    }

    function initShader() {
        var borderTexture = Utils3D.getTexture("assets/images/plane/border.jpg");
        var matCapTexture = Utils3D.getTexture("assets/images/plane/matcap2.jpg");
        var foldTexture = Utils3D.getTexture("assets/images/plane/fold.jpg");
        var splatTexture = Utils3D.getTexture("assets/images/stamps/splat.png");
        _frontShader = _this.initClass(Shader, "PlaneFold", "PlaneFold");
        _frontShader.uniforms = {
            tBorder: {
                type: "t",
                value: borderTexture
            },
            tMatCap: {
                type: "t",
                value: matCapTexture
            },
            tFold: {
                type: "t",
                value: foldTexture
            },
            tStamp: {
                type: "t",
                value: null
            },
            tSplat: {
                type: "t",
                value: splatTexture
            },
            fIntensity: {
                type: "f",
                value: 1
            },
            fAge: {
                type: "f",
                value: 0
            },
            fFade: {
                type: "f",
                value: 0
            },
            splatColor: {
                type: "c",
                value: new THREE.Color("#f00")
            },
            splatAlpha: {
                type: "f",
                value: 0
            },
            splatScale: {
                type: "f",
                value: 0
            },
            splatPosition: {
                type: "v2",
                value: new THREE.Vector2()
            },
            stripColor: {
                type: "c",
                value: new THREE.Color(16777215)
            },
            stripAlpha: {
                type: "f",
                value: 0
            },
        };
        _frontShader.material.morphTargets = true;
        _frontShader.material.morphNormals = true;
        _frontShader.material.side = THREE.FrontSide;
        _frontShader.material.extensions.derivatives = true;
        _backShader = _this.initClass(Shader, "PlaneFold", "PlaneFold");
        _backShader.uniforms = {
            tBorder: {
                type: "t",
                value: borderTexture
            },
            tMatCap: {
                type: "t",
                value: matCapTexture
            },
            tFold: {
                type: "t",
                value: foldTexture
            },
            tStamp: {
                type: "t",
                value: null
            },
            tSplat: {
                type: "t",
                value: null
            },
            fIntensity: {
                type: "f",
                value: 0.05
            },
            fAge: {
                type: "f",
                value: 0
            },
            fFade: {
                type: "f",
                value: 0
            },
            splatColor: {
                type: "c",
                value: new THREE.Color()
            },
            splatAlpha: {
                type: "f",
                value: 0
            },
            splatScale: {
                type: "f",
                value: 0
            },
            splatPosition: {
                type: "v2",
                value: new THREE.Vector2()
            },
            stripColor: {
                type: "c",
                value: new THREE.Color(16777215)
            },
            stripAlpha: {
                type: "f",
                value: 0
            },
        };
        _backShader.material.morphTargets = true;
        _backShader.material.morphNormals = true;
        _backShader.material.side = THREE.BackSide;
        _backShader.material.extensions.derivatives = true
    }

    function initMesh() {
        _frontMesh = new THREE.Mesh(_geometry, _frontShader.material);
        _backMesh = new THREE.Mesh(_geometry, _backShader.material);
        _frontMesh.frustumCulled = false;
        _backMesh.frustumCulled = false;
        _this.mesh.add(_frontMesh);
        _this.mesh.add(_backMesh);
        _this.object3D.add(_this.mesh);
        _this.object3D.rotation.order = "YXZ";
        _this.flipContainer.add(_this.object3D);
        _this.flipContainer.rotation.order = "YXZ";
        _this.swayContainer.add(_this.flipContainer);
        _this.swayContainer.rotation.order = "YXZ"
    }

    function initAnimation() {
        _frontMixer = new THREE.AnimationMixer(_frontMesh);
        _frontMixer.clipAction(_geometry.animations[0]).setDuration(96).play();
        _frontMixer.update(_frame);
        _backMixer = new THREE.AnimationMixer(_backMesh);
        _backMixer.clipAction(_geometry.animations[0]).setDuration(96).play();
        _backMixer.update(_frame)
    }

    function initStampTexture() {
        _this.stamp = _this.initClass(PlaneStampTexture);
        _frontShader.uniforms.tStamp.value = _this.stamp.texture;
        _backShader.uniforms.tStamp.value = _this.stamp.texture;
        _this.stamp.onStamp = function(data) {
            _frontShader.uniforms.splatAlpha.value = 1;
            _frontShader.uniforms.splatScale.value = 0.3;
            _frontShader.uniforms.splatColor.value.set(data.color);
            _frontShader.uniforms.splatPosition.value.copy(data.position);
            _frontShader.tween("splatScale", 0.5, 300, "easeOutCubic");
            _frontShader.tween("splatAlpha", 0, 300, "easeInOutCubic")
        }
    }
    this.age = function() {
        _frontShader.uniforms.fAge.value = 1;
        _backShader.uniforms.fAge.value = 1
    };
    this.update = function(frame) {
        var diff = frame - _frame;
        _frontMixer.update(diff);
        _backMixer.update(diff);
        _frame = frame
    };
    this.get("frame", function() {
        return _frame
    });
    this.set("fade", function(value) {
        _frontShader.uniforms.fFade.value = value;
        _backShader.uniforms.fFade.value = value
    });
    this.set("stripColor", function(value) {
        if (value == null) {
            _frontShader.uniforms.stripAlpha.value = 0;
            _backShader.uniforms.stripAlpha.value = 0;
            return
        }
        _frontShader.uniforms.stripColor.value.set(value);
        _backShader.uniforms.stripColor.value.set(value);
        _frontShader.uniforms.stripAlpha.value = 1;
        _backShader.uniforms.stripAlpha.value = 1
    });
    this.set("depth", function(value) {
        _frontShader.material.depthTest = value;
        _frontShader.material.depthWrite = value;
        _backShader.material.depthTest = value;
        _backShader.material.depthWrite = value
    });
    this.destroy = function() {
        _frontShader.material.dispose();
        _backShader.material.dispose()
    }
}, function() {
    var _geometry;
    PlaneFoldGeometry.getGeometry = function() {
        if (_geometry) {
            return _geometry
        }
        _geometry = Utils3D.loadGeometry("planeFold");
        projectUVsOnAxis(_geometry);
        return _geometry
    };

    function projectUVsOnAxis(geometry) {
        geometry.computeBoundingBox();
        var max = geometry.boundingBox.max;
        var min = geometry.boundingBox.min;
        var offset = new THREE.Vector2(0 - min.x, 0 - min.z);
        var range = new THREE.Vector2(max.x - min.x, max.z - min.z);
        geometry.faceVertexUvs[0] = [];
        geometry.faces.forEach(function(face) {
            var v1 = geometry.vertices[face.a];
            var v2 = geometry.vertices[face.b];
            var v3 = geometry.vertices[face.c];
            geometry.faceVertexUvs[0].push([new THREE.Vector2((v1.x + offset.x) / range.x, (v1.z + offset.y) / range.y), new THREE.Vector2((v2.x + offset.x) / range.x, (v2.z + offset.y) / range.y), new THREE.Vector2((v3.x + offset.x) / range.x, (v3.z + offset.y) / range.y)])
        });
        geometry.uvsNeedUpdate = true
    }
});
Class(function PlaneInstance(_shaderName, _textureSize, _numInstances) {
    Inherit(this, Component);
    var _this = this;
    var _geometry, _shader, _mesh, _override;
    _numInstances = _numInstances || _textureSize * _textureSize;
    this.object3D = new THREE.Group();
    (function() {
        initGeometry();
        initInstances();
        initShader();
        initMesh();
        Render.start(loop)
    })();

    function initGeometry() {
        _geometry = new THREE.InstancedBufferGeometry();
        var data = Hydra.JSON.plane;
        var vertices = new THREE.BufferAttribute(new Float32Array(data.vertices), 3);
        var uvs = new THREE.BufferAttribute(new Float32Array(data.uvs), 2);
        var normals = new THREE.BufferAttribute(new Float32Array(data.normals), 3);
        _geometry.addAttribute("position", vertices);
        _geometry.addAttribute("uv", uvs);
        _geometry.addAttribute("normal", normals)
    }

    function initInstances() {
        var offsets = new THREE.InstancedBufferAttribute(new Float32Array(_numInstances * 3), 3).setDynamic(true);
        var orientations = new THREE.InstancedBufferAttribute(new Float32Array(_numInstances * 4), 4).setDynamic(true);
        var random = new THREE.InstancedBufferAttribute(new Float32Array(_numInstances * 3), 3);
        var released = new THREE.InstancedBufferAttribute(new Float32Array(_numInstances), 1);
        var coords = new THREE.InstancedBufferAttribute(new Float32Array(_numInstances * 2), 2).setDynamic(true);
        for (var i = 0; i < _numInstances; i++) {
            var x = (i % _textureSize) / _textureSize;
            var y = Math.floor(i / _textureSize) / _textureSize;
            coords.setXY(i, x, y);
            random.setXYZ(i, Utils.doRandom(50, 150) / 100, Utils.doRandom(60, 150) / 100, Utils.doRandom(50, 100) / 100);
            released.setX(i, 1);
            offsets.setX(i, -1000)
        }
        _geometry.addAttribute("offset", offsets);
        _geometry.addAttribute("orientation", orientations);
        _geometry.addAttribute("coords", coords);
        _geometry.addAttribute("random", random);
        _geometry.addAttribute("released", released)
    }

    function initShader() {
        _shader = _this.initClass(Shader, _shaderName, _shaderName);
        _shader.uniforms = {
            tMatCap: {
                type: "t",
                value: Utils3D.getTexture("assets/images/plane/matcap.jpg")
            },
            time: {
                type: "f",
                value: 1
            },
            alpha: {
                type: "f",
                value: 1
            },
        };
        _shader.material.transparent = true;
        _shader.material.side = THREE.DoubleSide;
        if (_shaderName == "PlaneCPUInstance" && Tests.useDOF()) {
            FXObjects.on("override", overrideMaterial);
            _override = _this.initClass(Shader, "InstanceDepth", "InstanceDepth");
            _override.uniforms = {
                time: {
                    type: "f",
                    value: 1
                },
                alpha: {
                    type: "f",
                    value: 1
                },
                far: {
                    type: "f",
                    value: 1
                },
            };
            _override.material.transparent = true;
            _override.material.side = THREE.DoubleSide
        }
    }

    function initMesh() {
        var mesh = new THREE.Mesh(_geometry, _shader.material);
        mesh.frustumCulled = false;
        _this.object3D.add(mesh);
        _mesh = mesh
    }

    function loop(t, dt, delta) {
        _shader.uniforms.time.value += delta;
        if (_override) {
            _override.uniforms.time.value += delta
        }
    }

    function overrideMaterial(e) {
        if (e == "override") {
            _mesh.material = _override.material;
            _override.material.uniforms.far.value = World.instance().camera.far
        } else {
            _mesh.material = _shader.material
        }
    }
    this.get("geometry", function() {
        return _geometry
    });
    this.get("shader", function() {
        return _shader
    });
    this.set("texturePosition", function(value) {});
    this.set("textureVelocity", function(value) {});
    this.fadeIn = function(callback, delay) {
        Render.start(loop);
        _shader.material.depthTest = true;
        _shader.tween("alpha", 1, 1000, "easeOutCubic", delay || 0, function() {
            if (typeof callback == "function") {
                callback()
            }
        })
    };
    this.fadeOut = function(callback) {
        _shader.material.depthTest = false;
        _shader.tween("alpha", 0, 1000, "easeOutCubic", function() {
            Render.stop(loop);
            if (typeof callback == "function") {
                callback()
            }
        })
    };
    this.onDestroy = function() {
        Render.stop(loop)
    }
});
Class(function PlaneOrbitGeometry(_earth) {
    Inherit(this, Component);
    var _this = this;
    var _geometry, _shader, _tweenScale;
    this.group = new THREE.Group();
    (function() {
        initGeometry();
        initShader();
        initMesh();
        Render.start(loop)
    })();

    function initGeometry() {
        _geometry = PlaneOrbitGeometry.getGeometry()
    }

    function initShader() {
        _shader = _this.initClass(Shader, "OrbitPlane", "OrbitPlane");
        _shader.uniforms = {
            tMatCap: {
                type: "t",
                value: Utils3D.getTexture("assets/images/plane/matcap.jpg")
            },
            time: {
                type: "f",
                value: 1
            },
            alpha: {
                type: "f",
                value: 1
            },
        };
        _shader.material.transparent = true;
        _shader.material.side = THREE.DoubleSide
    }

    function initMesh() {
        var mesh = new THREE.Mesh(_geometry, _shader.material);
        mesh.frustumCulled = false;
        mesh.rotation.x = 0.15;
        mesh.position.y = -1;
        var s = 2;
        mesh.scale.set(s, s, s);
        _this.group.add(mesh);
        _this.group.scale.set(0.01, 0.01, 0.01);
        _this.group.position.set(160, 0, 0);
        _earth.object3D.add(_this.group)
    }

    function loop(t, dt, delta) {
        _shader.uniforms.time.value += delta
    }
    this.animateIn = function() {
        Render.start(loop);
        _tweenScale = TweenManager.tween(_this.group.scale, {
            x: 1,
            y: 1,
            z: 1
        }, 500, "easeOutCubic", 1000)
    };
    this.animateOut = function() {
        _tweenScale = TweenManager.tween(_this.group.scale, {
            x: 0.01,
            y: 0.01,
            z: 0.01
        }, 500, "easeInCubic", function() {
            Render.stop(loop)
        })
    };
    this.onDestroy = function() {
        _earth.object3D.remove(_this.group);
        if (_tweenScale && _tweenScale.stop) {
            _tweenScale.stop()
        }
        Render.stop(loop)
    }
}, function() {
    var _geometry;
    PlaneOrbitGeometry.getGeometry = function() {
        if (_geometry) {
            return _geometry
        }
        _geometry = new THREE.BufferGeometry();
        var data = Hydra.JSON.plane;
        var vertices = new THREE.BufferAttribute(new Float32Array(data.vertices), 3);
        var uvs = new THREE.BufferAttribute(new Float32Array(data.uvs), 2);
        var normals = new THREE.BufferAttribute(new Float32Array(data.normals), 3);
        _geometry.addAttribute("position", vertices);
        _geometry.addAttribute("uv", uvs);
        _geometry.addAttribute("normal", normals);
        return _geometry
    }
});
Class(function ThrownPlaneGeometry() {
    Inherit(this, Component);
    var _this = this;
    var _geometry, _shader, _mesh;
    this.group = new THREE.Group();
    (function() {
        initGeometry();
        initShader();
        initMesh();
        Render.start(loop)
    })();

    function initGeometry() {
        _geometry = ThrownPlaneGeometry.getGeometry()
    }

    function initShader() {
        _shader = ThrownPlaneGeometry.getShader();
        _shader.set("tMatCap", Utils3D.getTexture("assets/images/plane/matcap.jpg"));
        _shader.material.transparent = true;
        _shader.material.side = THREE.DoubleSide
    }

    function initMesh() {
        var mesh = new THREE.Mesh(_geometry, _shader.material);
        mesh.frustumCulled = false;
        mesh.rotation.x = 0.15;
        mesh.position.y = -1;
        _this.group.add(mesh);
        FXObjects.register(mesh);
        _mesh = mesh
    }

    function loop(t, dt, delta) {
        _shader.uniforms.time.value += delta
    }
    this.fadeIn = function(callback, delay) {
        Render.start(loop);
        _shader.material.depthTest = true;
        _shader.tween("alpha", 1, 1000, "easeOutCubic", delay || 0, function() {
            if (typeof callback == "function") {
                callback()
            }
        })
    };
    this.fadeOut = function(callback) {
        _shader.material.depthTest = false;
        _shader.tween("alpha", 0, 1000, "easeOutCubic", function() {
            Render.stop(loop);
            if (typeof callback == "function") {
                callback()
            }
        })
    };
    this.set("stripColor", function(value) {
        _shader.uniforms.stripColor.value.set(value)
    });
    this.onDestroy = function() {
        Render.stop(loop);
        FXObjects.remove(_mesh)
    }
}, function() {
    var _geometry, _shader;
    ThrownPlaneGeometry.getGeometry = function() {
        if (_geometry) {
            return _geometry
        }
        _geometry = new THREE.BufferGeometry();
        var data = Hydra.JSON.plane;
        var vertices = new THREE.BufferAttribute(new Float32Array(data.vertices), 3);
        var uvs = new THREE.BufferAttribute(new Float32Array(data.uvs), 2);
        var normals = new THREE.BufferAttribute(new Float32Array(data.normals), 3);
        _geometry.addAttribute("position", vertices);
        _geometry.addAttribute("uv", uvs);
        _geometry.addAttribute("normal", normals);
        return _geometry
    };
    ThrownPlaneGeometry.getShader = function() {
        if (!_shader) {
            _shader = new Shader("ThrownPlane", "ThrownPlane");
            _shader.uniforms = {
                tMatCap: {
                    type: "t",
                    value: null
                },
                time: {
                    type: "f",
                    value: 1
                },
                alpha: {
                    type: "f",
                    value: 1
                },
                stripColor: {
                    type: "c",
                    value: new THREE.Color(16777215)
                },
            }
        }
        return _shader.clone()
    }
});
Class(function IntroDesktopView() {
    Inherit(this, View);
    var _this = this;
    var $this, $start, $connect, $url;
    (function() {
        initHTML();
        style()
    })();

    function initHTML() {
        $this = _this.element;
        $start = $this.create("Start");
        $connect = $this.create("Connect");
        $url = $this.create("Url")
    }

    function style() {
        $this.css({
            position: "static",
            fontSize: 40,
            color: "#fff",
            textAlign: "center",
        });
        $start.html(Copy.READY).css({
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
            height: 100,
            lineHeight: 100,
            margin: "auto",
        });
        $connect.html(Copy.CONNECT).css({
            right: 0,
            bottom: "50%",
            left: 0,
        });
        $url.html("paperplanes.world").css({
            top: "50%",
            right: 0,
            left: 0,
            fontWeight: "bold",
        });
        $start.css({
            opacity: 0
        });
        $connect.css({
            opacity: 0
        });
        $url.css({
            opacity: 0
        })
    }
    this.animateIn = function() {
        $start.tween({
            opacity: 1
        }, 1000, "easeOutCubic", 4000, function() {
            $start.tween({
                opacity: 0
            }, 1000, "easeOutCubic", 3000, function() {})
        });
        $connect.tween({
            opacity: 1
        }, 1000, "easeOutCubic", 10500, function() {
            $connect.tween({
                opacity: 0
            }, 1000, "easeOutCubic", 5000, function() {});
            $url.tween({
                opacity: 0
            }, 1000, "easeOutCubic", 5000)
        });
        $url.tween({
            opacity: 1
        }, 1000, "easeOutCubic", 10500)
    }
});
Class(function LoaderDesktopView() {
    Inherit(this, View);
    var _this = this;
    var $this, $logo, $spinner;
    var _spin;
    (function() {
        initHTML();
        style()
    })();

    function initHTML() {
        $this = _this.element;
        $spinner = $this.create("Spinner");
        $logo = $this.create("Logo")
    }

    function style() {
        $this.css({
            position: "static"
        }).css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 2000, "easeInOutSine", 200);
        $spinner.size(120, 120).center().bg("assets/images/loader/spinner.png").css({
            opacity: 0.8,
        });
        _spin = _this.initClass(CSSAnimation);
        _spin.loop = true;
        _spin.duration = 2000;
        _spin.frames = [{
            rotation: 0
        }, {
            rotation: 360
        }];
        _spin.applyTo($spinner);
        _spin.play()
    }
});
Class(function LocationPingView(_coords) {
    Inherit(this, Component);
    var _this = this;
    var _shader;
    this.group = new THREE.Group();
    (function() {
        initPing()
    })();

    function initPing() {
        var geometry = LocationPingView.getGeometry();
        _shader = LocationPingView.getShader();
        _shader.material.side = THREE.DoubleSide;
        _shader.material.transparent = true;
        _shader.material.blending = THREE.AdditiveBlending;
        _shader.material.depthWrite = false;
        var mesh = new THREE.Mesh(geometry, _shader.material);
        mesh.position.x = 162;
        _this.group.add(mesh);
        _this.group.add(mesh);
        _this.group.rotation.reorder("YXZ");
        Earth.instance().object3D.add(_this.group)
    }

    function loop(t, dt) {
        _shader.uniforms.time.value = dt
    }
    this.animateIn = function() {
        Render.start(loop);
        _shader.tween("alpha", 0.2, 1000, "easeInOutCubic")
    };
    this.animateOut = function() {
        _shader.tween("alpha", 0, 1000, "easeInOutCubic")
    };
    this.stop = function() {
        Render.stop(loop)
    }
}, function() {
    var _geometry, _shader;
    LocationPingView.getGeometry = function() {
        if (_geometry) {
            return _geometry
        }
        _geometry = new THREE.CylinderBufferGeometry(10, 1, 5, 20, 1, true);
        _geometry.applyMatrix(new THREE.Matrix4().makeRotationZ(-Math.PI / 2));
        return _geometry
    };
    LocationPingView.getShader = function() {
        if (!_shader) {
            _shader = new Shader("EarthLocations", "EarthLocations2");
            _shader.uniforms = {
                time: {
                    type: "f",
                    value: 0
                },
                alpha: {
                    type: "f",
                    value: 0
                },
            }
        }
        return _shader.clone()
    }
});
Class(function ThrownPlaneCurve() {
    Inherit(this, Component);
    var _this = this;
    var _curve;
    this.group = new THREE.Group();
    (function() {
        initCurve()
    })();

    function initCurve() {
        var camPos = World.instance().camera.positionTarget.clone();
        camPos.y -= 15;
        camPos.x += Utils.doRandom(-100, 100) / 10;
        var points = [];
        var offsetZ = new THREE.Vector3(Utils.doRandom(-10, 10), Utils.doRandom(-10, 10), 150);
        points.push(camPos.clone().sub(offsetZ));
        points.push(camPos.clone().add(offsetZ));
        var angle, radius;
        if (camPos.z < -500) {
            angle = Utils.doRandom(-180, 180) / 180 * Math.PI;
            radius = Utils.doRandom(0, 120);
            points.push(new THREE.Vector3(radius * Math.sin(angle), radius * Math.cos(angle), -300))
        }
        if (Math.abs(camPos.x) < 50) {
            angle = Utils.doRandom(-180, 180) / 180 * Math.PI;
            radius = Utils.doRandom(180, 320);
            points.push(new THREE.Vector3(radius * Math.sin(angle), radius * Math.cos(angle), 0))
        } else {
            angle = Math.atan2(camPos.x, camPos.y) + Utils.doRandom(-45, 45) / 180 * Math.PI;
            radius = Utils.doRandom(170, 300);
            points.push(new THREE.Vector3(radius * Math.sin(angle), radius * Math.cos(angle), 50))
        }
        points.push(camPos.clone().normalize().multiplyScalar(-200));
        _curve = new THREE.CatmullRomCurve3(points);
        var geometry = new THREE.Geometry();
        geometry.vertices = _curve.getPoints(50);
        var material = new THREE.LineBasicMaterial({
            color: 15658734
        });
        var mesh = new THREE.Line(geometry, material);
        _this.group.add(mesh)
    }
    this.getPoint = function(alpha) {
        return _curve.getPoint(alpha)
    };
    this.get("curve", function() {
        return _curve
    })
});
Class(function ThrownPlaneTrail(_curve, _data) {
    Inherit(this, Component);
    var _this = this;
    var _trail;
    this.group = new THREE.Group();
    (function() {
        initTrail();
        addHandlers()
    })();

    function initTrail() {
        var geometry = new THREE.Geometry();
        geometry.vertices = _curve.getPoints(100);
        var calculateLineThickness = function(percentage, i, total) {
            return 1
        };
        var color = new THREE.Color(_data.color);
        color.r *= 0.52;
        color.g *= 0.52;
        color.b *= 0.52;
        _trail = new THREE.MeshLine();
        _trail.setGeometry(geometry, calculateLineThickness);
        var material = new THREE.MeshLineMaterial({
            sizeAttenuation: 1,
            useMap: 0,
            color: color,
            lineWidth: 7,
            resolution: new THREE.Vector2(Stage.width, Stage.height),
            transparent: true,
            opacity: 0.5,
        });
        material.depthWrite = false;
        material.blending = THREE.AdditiveBlending;
        _trail.mesh = new THREE.Mesh(_trail.geometry, material);
        _trail.mesh.frustumCulled = false;
        _this.group.add(_trail.mesh);
        FXObjects.register(_trail.mesh)
    }

    function addHandlers() {
        _this.events.subscribe(HydraEvents.RESIZE, resize)
    }

    function resize() {
        _trail.mesh.material.uniforms.resolution.value.set(Stage.width, Stage.height)
    }
    this.set("progress", function(value) {
        if (_trail.mesh.material.uniforms) {
            _trail.mesh.material.uniforms.progress.value = value
        }
    });
    this.onDestroy = function() {
        FXObjects.remove(_trail.mesh)
    }
});
Class(function ThrownPlaneView(_data) {
    Inherit(this, Component);
    var _this = this;
    var _plane, _curve, _trail, _flightTween;
    this.group = new THREE.Group();
    (function() {
        initGeometry();
        initCurve();
        initTrail();
        animateIn()
    })();

    function initGeometry() {
        _plane = _this.initClass(ThrownPlaneGeometry);
        _plane.randomOffset = Utils.doRandom(-60, 60) * Math.PI / 180;
        _plane.stripColor = _data.color;
        _plane.group.scale.set(_data.scale.x, 1, _data.scale.z);
        _this.group.add(_plane.group)
    }

    function initCurve() {
        _curve = _this.initClass(ThrownPlaneCurve)
    }

    function initTrail() {
        _trail = _this.initClass(ThrownPlaneTrail, _curve.curve, _data);
        _this.group.add(_trail.group)
    }

    function animateIn() {
        var temp = {
            a: 0.12
        };
        AudioController.planeEnter(_curve.getPoint(0));
        var onUpdate = function() {
            _plane.group.position.copy(_curve.getPoint(temp.a));
            var lookAt = _curve.getPoint(Math.max(0, temp.a - 0.01));
            _plane.group.lookAt(lookAt);
            _plane.group.rotation.z = 3.14 - _plane.group.rotation.y * 2;
            _plane.group.rotation.z += (1 - temp.a) * _plane.randomOffset;
            _trail.progress = temp.a
        };
        _flightTween = TweenManager.tween(temp, {
            a: 1
        }, 8000, "linear", function() {
            if (typeof _this.onComplete == "function") {
                _this.onComplete()
            }
        }, onUpdate)
    }
    this.onDestroy = function() {
        if (_flightTween && _flightTween.stop) {
            _flightTween.stop()
        }
        _this.group.remove(_plane.group)
    }
});
Class(function StatsMeshText() {
    Inherit(this, Component);
    var _this = this;
    var _titleFont, _captionFont, _titleGeometry, _captionGeometry, _titleShader, _captionShader, _titleMesh, _captionMesh;
    this.group = new THREE.Group();
    var _rotation = {
        strength: 1
    };
    (function() {
        initShaders();
        loadFont();
        World.instance().scene.add(_this.group);
        Render.start(loop)
    })();

    function initShaders() {
        var captionFontTexture = Utils3D.getTexture("assets/fonts/din.png");
        var titleFontTexture = Utils3D.getTexture("assets/fonts/din.png");
        [captionFontTexture, titleFontTexture].forEach(function(texture) {
            texture.minFilter = THREE.LinearMipMapLinearFilter;
            texture.magFilter = THREE.LinearFilter;
            texture.generateMipmaps = true;
            texture.anisotropy = World.instance().renderer.getMaxAnisotropy()
        });
        _titleShader = _this.initClass(Shader, "Stats", "Stats");
        _titleShader.uniforms = {
            map: {
                type: "t",
                value: titleFontTexture
            },
            opacity: {
                type: "f",
                value: 0
            },
            count: {
                type: "f",
                value: 4
            },
            threshold: {
                type: "f",
                value: 0.5
            },
            yOffset: {
                type: "f",
                value: 40
            },
        };
        _titleShader.material.side = THREE.DoubleSide;
        _titleShader.material.transparent = true;
        _titleShader.material.extensions.derivatives = true;
        _captionShader = _titleShader.clone();
        _captionShader.uniforms.yOffset.value = -100;
        _captionShader.uniforms.map.value = captionFontTexture
    }

    function loadFont() {
        SDFFontLoader.load(Config.CDN + "assets/fonts/din.txt", initGeometry);
        SDFFontLoader.load(Config.CDN + "assets/fonts/din.txt", initGeometry)
    }

    function initGeometry(font) {
        var text = new BMFontText({
            text: "temp",
            font: font,
            width: 4000,
            align: "center",
            letterSpacing: -10,
        });
        if (!_this.hasTitle) {
            _this.hasTitle = true;
            _titleFont = font;
            _titleGeometry = text.geometry;
            initMesh("title")
        } else {
            _captionFont = font;
            _captionGeometry = text.geometry;
            initMesh("caption")
        }
    }

    function initMesh(type) {
        if (type == "title") {
            _titleMesh = new THREE.Mesh(_titleGeometry, _titleShader.material);
            _titleMesh.frustumCulled = false;
            _titleMesh.position.x = -2000;
            var textAnchor = new THREE.Group();
            textAnchor.rotation.x = Math.PI;
            textAnchor.rotation.y = Math.PI;
            textAnchor.position.y = -11;
            var s = 0.5 * 0.2;
            textAnchor.scale.set(s, s, s);
            textAnchor.add(_titleMesh);
            _this.group.add(textAnchor);
            FXObjects.register(_titleMesh)
        } else {
            _captionMesh = new THREE.Mesh(_captionGeometry, _captionShader.material);
            _captionMesh.frustumCulled = false;
            _captionMesh.position.x = -2000;
            var textAnchor = new THREE.Group();
            textAnchor.rotation.x = Math.PI;
            textAnchor.rotation.y = Math.PI;
            textAnchor.position.y = 9;
            var s = 0.2 * 0.16;
            textAnchor.scale.set(s, s, s);
            textAnchor.add(_captionMesh);
            _this.group.add(textAnchor);
            FXObjects.register(_captionMesh)
        }
    }

    function loop() {
        _this.group.position.x = World.instance().camera.position.x;
        _this.group.position.y = World.instance().camera.position.y;
        _this.group.position.z = -160
    }

    function updateRotation() {
        _this.group.rotation.y = _rotation.position.offset.y * 0.8 * _rotation.strength;
        _this.group.rotation.x = (_rotation.position.y * 0.002 + 0.2) * _rotation.strength
    }
    this.animateIn = function(stat, position) {
        _rotation.position = position;
        var text = new BMFontText({
            text: stat.location,
            font: _titleFont,
            width: 4000,
            align: "center",
            letterSpacing: -5,
        });
        _titleGeometry = text.geometry;
        _titleMesh.geometry = _titleGeometry;
        _titleGeometry.needsUpdate = true;
        _titleShader.uniforms.count.value = _titleGeometry.attributes.letter.count / 4;
        text = new BMFontText({
            text: Copy.THROWN_TEXT[Utils.doRandom(0, Copy.THROWN_TEXT.length - 1)],
            font: _captionFont,
            width: 4000,
            align: "center",
            letterSpacing: 0,
        });
        _captionGeometry = text.geometry;
        _captionMesh.geometry = _captionGeometry;
        _captionGeometry.needsUpdate = true;
        _captionShader.uniforms.count.value = _captionGeometry.attributes.letter.count / 4;
        _titleShader.uniforms.yOffset.value = 40;
        _captionShader.uniforms.yOffset.value = -100;
        _titleShader.tween("opacity", 1, 8000, "easeOutCubic", 5000);
        _captionShader.tween("opacity", 1, 8000, "easeOutCubic", 4700);
        _this.delayedCall(_this.animateOut, 9500);
        TweenManager.tween(_rotation, {
            strength: 0.1
        }, 6000, "easeOutCubic", 4000, null, updateRotation)
    };
    this.animateOut = function() {
        _titleShader.uniforms.yOffset.value = -20;
        _captionShader.uniforms.yOffset.value = 50;
        _titleShader.tween("opacity", 0, 5000, "easeInCubic");
        _captionShader.tween("opacity", 0, 5000, "easeInCubic");
        TweenManager.tween(_rotation, {
            strength: 1
        }, 6000, "easeInCubic", 1000, null, updateRotation)
    }
});
Class(function StatsPing() {
    Inherit(this, Component);
    var _this = this;
    var _shader;
    _this.group = new THREE.Group();
    (function() {
        initGeometry();
        Render.start(loop)
    })();

    function initGeometry() {
        var geometry = new THREE.CylinderBufferGeometry(20, 1, 20, 20, 1, true);
        geometry.applyMatrix(new THREE.Matrix4().makeRotationZ(-Math.PI / 2));
        _shader = new Shader("EarthLocations", "EarthLocations");
        _shader.uniforms = {
            time: {
                type: "f",
                value: 0
            },
            alpha: {
                type: "f",
                value: 0
            },
        };
        _shader.material.side = THREE.DoubleSide;
        _shader.material.transparent = true;
        _shader.material.blending = THREE.AdditiveBlending;
        _shader.material.depthWrite = false;
        var mesh = new THREE.Mesh(geometry, _shader.material);
        mesh.position.x = 166;
        _this.group.add(mesh);
        FXObjects.register(mesh);
        _this.group.add(mesh);
        _this.group.rotation.reorder("YXZ");
        Earth.instance().object3D.add(_this.group)
    }

    function loop(t, dt) {
        _shader.uniforms.time.value = dt
    }
    this.highlightLocation = function(stat) {
        _this.group.rotation.y = stat.coords.lng * Math.PI / 180 - 1.6;
        _this.group.rotation.z = stat.coords.lat * Math.PI / 180;
        _this.delayedCall(_this.animateIn, 5000);
        _this.delayedCall(_this.animateOut, 12000)
    };
    this.animateIn = function() {
        AudioController.trigger("stats_in");
        _shader.tween("alpha", 0.2, 1000, "easeInOutSine")
    };
    this.animateOut = function() {
        AudioController.trigger("stats_out");
        _shader.tween("alpha", 0, 1000, "easeInOutSine")
    }
});
Class(function StatsText() {
    Inherit(this, View);
    var _this = this;
    var $this, $text1, $text2;
    (function() {
        initHTML()
    })();

    function initHTML() {
        $this = _this.element;
        $this.css({
            position: "static",
            color: "#fff",
        });
        $text1 = $this.create(".text");
        $text1.fontStyle("roboto", 38, "#fff");
        $text1.css({
            width: "100%",
            textAlign: "center",
            top: "50%",
            marginTop: -70
        });
        $text2 = $this.create(".text2");
        $text2.fontStyle("din", 60, "#fff");
        $text2.css({
            width: "100%",
            textAlign: "center",
            top: "50%",
            marginTop: -20
        })
    }
    this.animateIn = function(stat) {
        $text1.html(Copy.THROWN_TEXT[Utils.doRandom(0, Copy.THROWN_TEXT.length - 1)]).clearTransform().clearAlpha();
        $text2.html(stat.location).clearTransform().clearAlpha();
        $text2.fontSize = Utils.convertRange(stat.location.length, 5, 40, 90, 44);
        $text2.css({
            fontSize: $text2.fontSize
        });
        $this.invisible().clearTransform().clearAlpha();
        defer(function() {
            $text1.words = SplitTextfield.split($text1, "word");
            $text2.words = SplitTextfield.split($text2);
            $this.visible();
            var delay = 5000;
            AudioController.trigger("stats_text_in");
            for (var i = 0; i < $text1.words.length; i++) {
                var word = $text1.words[i];
                word.css({
                    display: "inline-block",
                    cssFloat: "",
                    styleFloat: ""
                });
                word.transform({
                    y: 0
                }).css({
                    opacity: 1
                });
                delay += 50
            }
            delay += 100;
            for (var i = 0; i < $text2.words.length; i++) {
                var word = $text2.words[i];
                word.css({
                    display: "inline-block",
                    cssFloat: "",
                    styleFloat: ""
                });
                word.transform({
                    y: 0
                }).css({
                    opacity: 1
                });
                delay += 40
            }
            _this.delayedCall(_this.animateOut, 10000)
        })
    };
    this.animateOut = function() {
        AudioController.trigger("stats_text_out");
        var delay = 0;
        for (var i = 0; i < $text1.words.length; i++) {
            var word = $text1.words[i];
            word.css({
                opacity: 0
            });
            delay += 30
        }
        delay -= 150;
        for (var i = 0; i < $text2.words.length; i++) {
            var word = $text2.words[i];
            word.css({
                opacity: 0
            });
            delay += 30
        }
    }
});
Class(function DOFPass(_nuke, _scene, _camera, _renderer) {
    Inherit(this, Component);
    var _this = this;
    var _rt, _depthShader, _shader;
    (function() {
        initDepthShader();
        initPass();
        initRT();
        addListeners()
    })();

    function initRT() {
        if (_rt) {
            _rt.dispose()
        }
        var params = {
            minFilter: THREE.LinearFilter,
            magFilter: THREE.LinearFilter,
            format: THREE.RGBAFormat,
            stencilBuffer: false
        };
        _rt = new THREE.WebGLRenderTarget(Stage.width, Stage.height, params);
        _shader.depth = _rt
    }

    function initDepthShader() {
        _depthShader = _this.initClass(Shader, "DepthOverride", "DepthOverride");
        _depthShader.uniforms = {
            far: {
                type: "f",
                value: 0
            }
        }
    }

    function initPass() {
        _shader = _this.initClass(TiltShiftShader);
        _nuke.add(_shader.x);
        _nuke.add(_shader.y);
        _shader.blur = 3;
        _shader.gradientBlur = 400
    }

    function addListeners() {
        _this.events.subscribe(HydraEvents.RESIZE, initRT)
    }
    this.render = function() {
        _shader.far = World.instance().camera.far;
        _shader.earth = Earth.instance().object3D.position;
        FXObjects.override(_depthShader.material);
        _nuke.renderToTexture(true, _rt);
        FXObjects.reset()
    }
});
Class(function FXObjects() {
    Inherit(this, Component);
    var _this = this;
    this.objects = [];
    this.OVERRIDE = "override";
    HydraEvents.createLocalEmitter(_this);
    this.register = function(obj) {
        _this.objects.push(obj)
    };
    this.remove = function(obj) {
        _this.objects.findAndRemove(obj)
    };
    this.override = function(mat) {
        _this.fire("override", "override");
        for (var i = _this.objects.length - 1; i > -1; i--) {
            var obj = _this.objects[i];
            obj.oMaterial = obj.material;
            if (!obj.overrideMat) {
                obj.overrideMat = mat.clone()
            }
            obj.overrideMat.uniforms.far.value = World.instance().camera.far;
            obj.overrideMat.side = THREE.DoubleSide;
            obj.material = obj.overrideMat
        }
    };
    this.reset = function() {
        _this.fire("override", "reset");
        for (var i = _this.objects.length - 1; i > -1; i--) {
            var obj = _this.objects[i];
            obj.material = obj.oMaterial
        }
    }
}, "static");
Class(function AboutPrompt() {
    Inherit(this, View);
    var _this = this;
    var $this;
    (function() {
        initHTML();
        style();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element;
        Stage.add($this)
    }

    function style() {
        $this.size(50, 50).bg("assets/images/icons/info.png").css({
            backgroundSize: "25px 25px",
            backgroundPosition: "center center",
            backgroundRepeat: "no-repeat",
            bottom: 14,
            right: 9,
            opacity: 0
        });
        $this.tween({
            opacity: 1
        }, 500, "easeOutCubic")
    }

    function addHandlers() {
        $this.touchClick(hover, click);
        _this.events.subscribe(PlanesEvents.CATCH_PLANE, hide);
        _this.events.subscribe(PlanesEvents.NEW_PLANE, hide);
        _this.events.subscribe(PlanesEvents.CONFIRMATION_HIDDEN, show);
        _this.events.subscribe(PlanesEvents.CANCEL, show)
    }

    function hover() {}

    function click() {
        if (_this.isTimeout) {
            return
        }
        _this.isTimeout = true;
        _this.delayedCall(function() {
            _this.isTimeout = false
        }, 1000);
        OverlayMobile.instance().animateIn();
        BackgroundView.instance().toFront();
        UIMobile.instance().hide();
        MyPlanes.instance().hide()
    }

    function hide() {
        $this.tween({
            opacity: 0
        }, 500, "easeOutCubic", function() {
            $this.hide()
        })
    }

    function show() {
        $this.show();
        $this.tween({
            opacity: 1
        }, 500, "easeOutCubic")
    }
    this.hide = hide
}, "singleton");
Class(function ConfirmationView(isNew) {
    Inherit(this, View);
    var _this = this;
    var $this, $title, $text, $touchPrompt;
    var _earth, _flocking, _title;
    (function() {
        initHTML();
        style();
        initEarth();
        initFlocking();
        _this.delayedCall(addHandlers, 3500);
        Render.start(loop)
    })();

    function initHTML() {
        $this = _this.element;
        $touchPrompt = $this.create("TouchPrompt");
        Stage.add($this)
    }

    function style() {
        $this.css({
            position: "static",
            textAlign: "center",
        });
        var text = isNew ? Copy.CONFIRM_TEXT : Copy.CONFIRM_TEXT_BACK;
        _title = _this.initClass(UITitle, text.replace("##", Utils.numberWithCommas(Data.Planes.count - 1)));
        $touchPrompt.html(Copy.CONTINUE).css({
            top: "65%",
            left: 0,
            right: 0,
            textAlign: "center",
            fontStyle: "italic",
            fontFamily: "instruction",
            fontSize: 15,
            letterSpacing: 0.5
        });
        $touchPrompt.css({
            opacity: 0,
        })
    }

    function initEarth() {
        _earth = Earth.instance();
        World.instance().scene.add(_earth.object3D);
        var s = 0.12;
        _earth.object3D.scale.set(s, s, s);
        _earth.object3D.position.set(0, -30, -70);
        _earth.object3D.rotation.set(-0.5, 3, 0)
    }

    function initFlocking() {
        _flocking = PlaneFlocking.instance();
        World.instance().scene.add(_flocking.object3D);
        var s = 0.15;
        _flocking.object3D.scale.set(s, s, s);
        _flocking.object3D.position.set(0, -33, 0);
        _this.events.fire(PlanesEvents.RESUME_FLOCKING)
    }

    function loop() {
        if (_earth) {
            _earth.object3D.rotation.y += 0.001;
            _earth.object3D.rotation.x += 0.0015
        }
    }

    function addHandlers() {
        Stage.bind("touchstart", _this.animateOut)
    }
    this.animateIn = function() {
        $this.css({
            opacity: 1
        });
        _this.delayedCall(_title.animateIn, 1000);
        $touchPrompt.transform({
            y: 10
        }).css({
            opacity: 0
        }).tween({
            opacity: 0.8,
            y: 0
        }, 1000, "easeOutCubic", 2500);
        TweenManager.tween(_earth.object3D.position, {
            y: -33,
            z: -30
        }, 3000, "easeOutSine");
        _flocking.animateIn();
        AudioController.trigger("lift_off");
        GATracker.trackEvent("confirmation", "click", "animate in", 1)
    };
    this.animateOut = function() {
        GATracker.trackEvent("confirmation", "click", "animate out", 1);
        Stage.unbind("touchstart", _this.animateOut);
        $this.tween({
            opacity: 0
        }, 700, "easeInOutCubic");
        TweenManager.tween(_earth.object3D.position, {
            y: -50
        }, 1000, "easeInCubic", function() {
            World.instance().scene.remove(_earth.object3D);
            World.instance().scene.remove(_flocking.object3D);
            _this.events.fire(PlanesEvents.PAUSE_FLOCKING);
            if (typeof _this.onComplete == "function") {
                _this.onComplete()
            }
        });
        _flocking.animateOut();
        AudioController.trigger("tap")
    };
    this.onDestroy = function() {
        Render.stop(loop);
        Stage.unbind("touchstart", _this.animateOut);
        World.instance().scene.remove(_earth.object3D);
        World.instance().scene.remove(_flocking.object3D);
        _this.events.fire(PlanesEvents.PAUSE_FLOCKING)
    }
});
Class(function IntroMobileView() {
    Inherit(this, View);
    var _this = this;
    var $this, $message, $touchPrompt;
    var _logo, _title;
    (function() {
        initHTML();
        style();
        initViews()
    })();

    function initHTML() {
        $this = _this.element;
        $message = $this.create("Message");
        $touchPrompt = $this.create("TouchPrompt")
    }

    function style() {
        $this.css({
            width: 500,
            height: "100%",
            top: 0,
            left: "50%",
            marginLeft: -250
        });
        _title = _this.initClass(UITitle, Copy.INTRO);
        $touchPrompt.html(Copy.BEGIN).css({
            top: "65%",
            left: 0,
            right: 0,
            textAlign: "center",
            fontStyle: "italic",
            fontFamily: "instruction",
            fontSize: 15,
            letterSpacing: 0.5
        });
        $touchPrompt.hide().css({
            opacity: 0,
        })
    }

    function initViews() {
        _logo = _this.initClass(IntroLogo)
    }
    this.animateIn = function() {
        _this.delayedCall(_logo.animateIn, 1000);
        _this.delayedCall(_logo.animateOut, 3300);
        _this.delayedCall(_title.animateIn, 4800);
        if (Tests.RETURN_USER()) {
            $touchPrompt.show().transform({
                y: 10
            }).css({
                opacity: 0
            });
            _this.delayedCall(function() {
                $touchPrompt.tween({
                    opacity: 0.8,
                    y: 0
                }, 1000, "easeOutCubic")
            }, 6500)
        }
    };
    this.animateOut = function() {
        _title.animateOut();
        $touchPrompt.tween({
            opacity: 0
        }, 1000, "easeOutCubic")
    }
});
Class(function IntroLogo() {
    Inherit(this, View);
    var _this = this;
    var $this, $plane, $logo, $nonIO;
    var _data, _svg;
    (function() {
        initHTML()
    })();

    function initHTML() {
        $this = _this.element;
        $this.css({
            position: "static"
        });
        $this.invisible().css({
            opacity: 0
        });
        $plane = $this.create("Plane");
        $plane.size(54, 54).bg("assets/images/loader/plane-logo.png").center().css({
            marginTop: -60,
            opacity: 0
        });
        $plane.css({
            opacity: 0
        });
        $plane.transform({
            x: -100,
            y: 250,
            rotation: 10,
            scale: 0.8
        });
        $logo = $this.create(".logo");
        var s = 0.8;
        $logo.size(320 * s, 65 * s).bg("assets/images/common/logo.png").center();
        $logo.invisible()
    }
    this.animateIn = function(delay) {
        $this.visible().tween({
            opacity: 0.9
        }, 700, "easeOutSine");
        $logo.div.className += " fade-logo";
        $logo.visible().tween({
            opacity: 1
        }, 1500, "easeInOutSine");
        $plane.tween({
            x: 9,
            y: -20,
            rotation: 0,
            opacity: 1,
            scale: 1
        }, 1700, "easeOutQuart", function() {
            $plane.tween({
                x: 100,
                y: -200,
                rotation: -10,
                opacity: 0
            }, 1500, "easeInCubic", 200)
        })
    };
    this.animateOut = function() {
        $this.tween({
            opacity: 0
        }, 1500, "easeOutSine")
    }
});
Class(function IntroLogoSVG() {
    Inherit(this, Component);
    var _this = this;
    (function() {})();
    this.paperPlanes = "M295.421,31.078c-6.515,11.188-24.075,44.422-34.131,50.889c-1.841,1.181-3.445-2.077,0.378-9.488l2.738-7.034c0.755-1.935,0.991-3.21,0.991-4.201c0-5.995-9.017-10.338-12.463-13.359l2.833-6.939l-5.099-3.115c-3.446,1.085-7.694,5.334-7.694,9.535c0,2.03,1.085,3.588,2.596,5.193c-2.407,5.334-4.909,10.385-6.845,13.879c0.006,0.017,0.019,0.033,0.025,0.05c-0.008,0-0.018-0.003-0.025-0.003c-6.043,10.527-15.059,16.711-23.415,16.711c-10.621,0-7.458-9.96-7.458-9.96c13.879,1.651,20.818-2.267,24.5-10.386c5.287-11.377-1.511-17.892-10.527-17.892c-12.673,0-20.836,11.668-24,22.297c-5.61,9.345-11.465,14.603-18.391,17.263c3.398-3.399,11.849-17.467,11.849-28.324c0-6.09-2.69-11.188-8.969-11.188c-5.901,0-10.008,4.485-10.103,4.674l1.416-3.588H161.92l-8.644,21.357c-5.669,9.551-11.397,15.747-14.959,15.747c-1.699,0-3.021-1.511,0.661-10.621l10.621-26.483h-11.802l-2.36,5.665c0,0-1.558-6.751-9.347-6.751c-10.356,0-17.073,11.841-20.362,22.321c-5.596,9.3-11.44,14.538-18.348,17.191c3.399-3.399,11.849-17.467,11.849-28.324c0-6.09-2.69-11.188-8.969-11.188c-5.901,0-10.008,4.485-10.103,4.674l1.416-3.588H69.866l-24.265,59.953h11.802L75.39,61.479c2.737-3.918,6.42-7.034,9.441-7.034c1.746,0,2.596,1.133,2.596,3.493c0,7.789-8.639,25.587-13.643,25.587c-1.416,0-2.69-1.747-2.69-1.747l-3.918,3.588c0,0,2.879,5.192,12.981,5.192c9.494,0,17.22-4.596,23.194-11.08c-0.008,0.222-0.016,0.443-0.016,0.647c0,5.76,3.068,10.433,9.017,10.433c7.176,0,12.698-6.845,12.698-6.845s0.661,6.845,9.017,6.845c4.319,0,8.28-1.94,11.915-5.089l-8.327,20.573h11.802l17.986-44.563c2.737-3.918,6.42-7.034,9.441-7.034c1.746,0,2.596,1.133,2.596,3.493c0,7.789-8.639,25.587-13.643,25.587c-1.416,0-2.69-1.747-2.69-1.747l-3.919,3.588c0,0,2.88,5.192,12.982,5.192c10.043,0,18.108-5.143,24.214-12.225c0.709,7.669,5.957,12.225,15.724,12.225c15.153,0,25.113-10.952,30.873-21.007c2.407-4.343,4.674-8.78,6.845-13.784c2.455,2.077,4.201,3.54,4.201,5.192c0,0.425-0.094,1.274-0.755,2.927l-2.832,7.034c-5.948,14.634,0.094,18.458,6.515,19.638c17.277,3.258,38.143-48.34,43.524-57.356C300,31.786,297.027,31.173,295.421,31.078z M221.165,54.398c2.927,0,2.69,2.313,1.085,5.759c-1.746,4.296-4.579,7.979-12.368,6.704C209.882,66.861,214.651,54.398,221.165,54.398zM126.279,74.461c0,0-4.06,6.515-8.827,6.515c-1.7,0-2.691-0.896-2.691-3.163c0-5.759,6.515-23.084,13.643-23.084c3.824,0,3.824,5.099,3.824,5.099L126.279,74.461z M535.327,46.043l-10.056-2.927c-3.162,7.033-8.592,17.372-12.037,23.32c0.005,0.017,0.017,0.033,0.022,0.05c-0.007,0-0.015-0.003-0.022-0.003c-6.043,10.527-15.06,16.711-23.415,16.711c-10.621,0-7.459-9.96-7.459-9.96c13.879,1.651,20.818-2.267,24.501-10.386c5.287-11.377-1.511-17.892-10.527-17.892c-12.717,0-20.893,11.748-24.033,22.404c-5.728,9.6-11.435,15.833-15.007,15.833c-1.416,0-3.258-0.991,0.661-10.621l4.343-10.857c1.746-4.344,2.597-7.317,2.597-9.678c0-4.438-2.738-7.034-7.507-7.034c-5.806,0-11.329,3.918-12.981,5.523l1.747-4.438h-11.802l-8.75,21.615c-5.619,9.405-11.276,15.489-14.807,15.489c-1.699,0-3.021-1.511,0.661-10.621l10.621-26.483h-11.802l-2.36,5.665c0,0-1.558-6.751-9.347-6.751c-10.375,0-17.098,11.885-20.38,22.379c-5.696,9.614-11.543,15.859-15.12,15.859c-1.604,0-3.115-1.275,0.661-10.622l17.372-43.053H369.3l-15.352,37.826c-5.584,9.258-11.416,14.476-18.307,17.123c3.398-3.399,11.849-17.467,11.849-28.324c0-6.09-2.69-11.188-8.97-11.188c-5.9,0-10.008,4.485-10.102,4.674l1.416-3.588h-11.707l-24.265,59.953h11.802l17.985-44.563c2.738-3.918,6.421-7.034,9.441-7.034c1.747,0,2.597,1.133,2.597,3.493c0,7.789-8.639,25.587-13.643,25.587c-1.416,0-2.691-1.747-2.691-1.747l-3.918,3.588c0,0,2.88,5.192,12.982,5.192c8.787,0,16.058-3.938,21.829-9.666c-0.192,6.879,3.768,9.666,8.949,9.666c6.035,0,11.632-4.238,16.618-10.397c0.013,5.743,3.079,10.397,9.016,10.397c7.176,0,12.698-6.845,12.698-6.845s0.661,6.845,9.017,6.845c4.289,0,8.225-1.912,11.837-5.021l-1.593,3.936h11.802l11.707-28.938c3.588-4.107,7.459-5.948,9.631-5.948c1.274,0,2.171,0.661,2.171,1.747c0,1.274-1.274,4.438-2.927,8.45l-1.936,4.862c-5.947,14.822-2.266,20.912,5.854,20.912c6.788,0,12.663-4.771,17.905-11.702c0.897,7.35,6.119,11.702,15.659,11.702c15.153,0,25.114-10.952,30.874-21.007c-0.005-0.016-0.017-0.032-0.021-0.048c1.744-3.205,4.092-7.525,6.252-11.754c-0.142,4.957,0.189,10.574,0.189,14.398c0,8.025-1.699,10.196-4.532,10.196c-1.369,0-2.36-0.425-3.352-1.511l-6.42,4.013c0.188,0.473,3.823,5.429,13.312,5.665c10.716,0,11.235-9.017,11.235-9.017c0.377-1.464,0.566-2.927,0.566-5.287C534.666,71.109,532.919,57.75,535.327,46.043zM495.72,54.398c2.928,0,2.691,2.313,1.086,5.759c-1.746,4.296-4.579,7.979-12.368,6.704C484.438,66.861,489.206,54.398,495.72,54.398z M398.757,74.461c0,0-4.106,6.515-8.827,6.515c-1.7,0-2.691-0.896-2.691-3.163c0-5.759,6.515-23.084,13.644-23.084c3.823,0,3.823,5.099,3.823,5.099L398.757,74.461z";
    this.linePaper = "M77.64,31.653l-26.25,76.542c0,0,26.432-77.84,42.5-55.25c6.675,9.385-11,39.75-24.417,30.317c40.667,22.78,42.5-39.484,64.417-30.067c-24.917-9.583-38.943,57.868-8.75,27.25c11.501-11.663,19.833-38.333,19.833-38.333s-29.833,64.458,0.917,39.833c20.856-16.702,19.648-34.42,21.75-37.5c-6.102,10.934-19.901,55.436-24.833,65c13.25-42.098,42.01-76.545,43.833-54c1.212,14.984-11.949,35.282-25.256,27.948c24.193,15.166,31.273-14.455,47.256-12.448c21.229,2.666,32.654-27.882,9-21.75c-20.25,5.25-23.314,41.358-0.096,36.612c32.346-6.612,28.346-37.112,31.596-43.862c4.961,3.083,13.5,19.5,6,34s7.321,18.729,24-8.14c8.196-13.203,19.261-36.152,19.261-36.152";
    this.linePlanes = "M328.39,29.567c0,0-28,73.976-30.75,79.878c7.5-19.848,19.25-54.5,37-59.75c15.125-3.875,3,45-19,34.5c26.125,12.75,46.875-13.646,60.5-57.875c-25.75,53.625-25.5,69.625-7.5,57.375c12.75-11.5,24.25-50,40.125-26.375c-13.625-16.875-37.78,35.113-23.03,28.863s26.401-31.851,31.655-43.488c-19.125,40.375-18.25,54.25,4.25,37c15.063-10.272,16.192-29.847,18.25-34.125c-4.25,7-16,42.027-18.25,46c8.368-19.791,15.361-37.435,27-41.125c25.625-8.125-7,30.25,1.75,35.5s21.5-16.771,28.25-16.011s25.5-1.739,23.5-15.989s-22.5-1.5-25.5,19.5s24.75,23,41.25-9.5c8-14.75,12.801-19.31,13.334-22.083c-5.303,25.574,2.117,39.164-5.959,43.958s-13.5-4.375-13.5-4.375"
});
Class(function _IntroLogo() {
    Inherit(this, View);
    var _this = this;
    var $this, $plane, $linePlanes, $linePaper;
    var _data, _svg;
    (function() {
        initHTML();
        initData();
        initSVG();
        style()
    })();

    function initHTML() {
        $this = _this.element;
        $this.invisible();
        $plane = $this.create("Plane")
    }

    function initData() {
        _data = _this.initClass(IntroLogoSVG)
    }

    function initSVG() {
        var ns = "http://www.w3.org/2000/svg";
        _svg = document.createElementNS(ns, "svg");
        _svg.setAttributeNS(null, "width", "595");
        _svg.setAttributeNS(null, "height", "300");
        _svg.setAttributeNS(null, "viewBox", "0 0 595 300");
        var defs = document.createElementNS(ns, "defs");
        var clip = document.createElementNS(ns, "clipPath");
        clip.setAttributeNS(null, "id", "paperPlanes");
        var linePaper = document.createElementNS(ns, "path");
        linePaper.setAttributeNS(null, "stroke", "#fff");
        linePaper.setAttributeNS(null, "stroke-width", "16");
        linePaper.setAttributeNS(null, "stroke-linecap", "round");
        linePaper.setAttributeNS(null, "fill", "none");
        linePaper.setAttributeNS(null, "clip-path", "url(#paperPlanes)");
        linePaper.setAttributeNS(null, "d", _data.linePaper);
        $linePaper = $(linePaper);
        var linePlanes = document.createElementNS(ns, "path");
        linePlanes.setAttributeNS(null, "stroke", "#fff");
        linePlanes.setAttributeNS(null, "stroke-width", "14");
        linePlanes.setAttributeNS(null, "stroke-linecap", "round");
        linePlanes.setAttributeNS(null, "fill", "none");
        linePlanes.setAttributeNS(null, "clip-path", "url(#paperPlanes)");
        linePlanes.setAttributeNS(null, "d", _data.linePlanes);
        $linePlanes = $(linePlanes);
        var paperPlanes = document.createElementNS(ns, "path");
        paperPlanes.setAttributeNS(null, "stroke", "none");
        paperPlanes.setAttributeNS(null, "d", _data.paperPlanes);
        _svg.appendChild(defs);
        defs.appendChild(clip);
        clip.appendChild(paperPlanes);
        _svg.appendChild(linePlanes);
        _svg.appendChild(linePaper);
        $this.add(_svg)
    }

    function style() {
        $this.css({
            position: "static"
        });
        $(_svg).css({
            width: "90%",
            height: "auto",
            left: "5%",
            top: "43%",
            margin: "auto",
        });
        $plane.size(64, 64).bg("assets/images/loader/plane-logo.png").center().css({
            left: "52%",
            top: "43%",
        });
        $plane.transform({
            x: 9,
            y: -20
        });
        var length = $linePlanes.div.getTotalLength();
        $linePlanes.css({
            strokeDasharray: length,
            strokeDashoffset: length,
        });
        length = $linePaper.div.getTotalLength();
        $linePaper.css({
            strokeDasharray: length,
            strokeDashoffset: length,
        })
    }
    this.animateIn = function(delay) {
        $this.visible().css({
            opacity: 0
        }).tween({
            opacity: 0.9
        }, 1000, "easeOutSine");
        $plane.transform({
            x: -100,
            y: 150,
            rotation: 5
        }).css({
            opacity: 0
        }).tween({
            x: 9,
            y: -20,
            rotation: -10,
            opacity: 1
        }, 2300, "easeOutQuart", function() {
            $plane.tween({
                x: 100,
                y: -200,
                rotation: -15,
                opacity: 0
            }, 2000, "easeInCubic")
        });
        $linePaper.div.style[Device.styles.vendorTransition] = "stroke-dashoffset 800ms " + TweenManager.getEase("easeOutQuad");
        $linePlanes.div.style[Device.styles.vendorTransition] = "stroke-dashoffset 1200ms " + TweenManager.getEase("easeOutQuad");
        _this.delayedCall(function() {
            $linePaper.css({
                strokeDashoffset: 0
            })
        }, (delay || 0) + 500);
        _this.delayedCall(function() {
            $linePlanes.css({
                strokeDashoffset: 0
            })
        }, (delay || 0) + 1100)
    };
    this.animateOut = function() {
        $this.tween({
            opacity: 0
        }, 1000, "easeOutSine")
    }
});
Class(function LoaderMobileView() {
    Inherit(this, View);
    var _this = this;
    var $this, $logo, $spinner;
    var _spin;
    (function() {
        initHTML();
        style()
    })();

    function initHTML() {
        $this = _this.element;
        $spinner = $this.create("Spinner");
        $logo = $this.create("Logo")
    }

    function style() {
        $this.css({
            position: "static"
        }).css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 2000, "easeInOutSine", 200);
        $spinner.size(100, 100).center().bg("assets/images/loader/spinner.png").css({
            opacity: 0.8,
        });
        _spin = _this.initClass(CSSAnimation);
        _spin.loop = true;
        _spin.duration = 2000;
        _spin.frames = [{
            rotation: 0
        }, {
            rotation: 360
        }];
        _spin.applyTo($spinner);
        _spin.play()
    }
});
Class(function MyPlanesSwipePrompt() {
    Inherit(this, View);
    var _this = this;
    var $this, $outline, $text;
    var _swipe, _tweenIn;
    var _threshold = -120;
    var _velocity = 0;
    (function() {
        initHTML();
        style();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element;
        $outline = $this.create("outline");
        $text = $this.create("Text")
    }

    function style() {
        $this.size(300, 40).center(1, 0).css({
            bottom: 60
        }).hide();
        $outline = $this.create(".outline");
        $outline.size(170, 46).center(1, 0).css({
            top: 21,
            border: "2px solid #fff",
            marginLeft: -170 / 2 - 2,
            boxShadow: "0 10px 30px rgba(0,0,0,0.15)",
            borderRadius: "30px"
        });
        $outline.fill = $outline.create(".fill");
        $outline.fill.size("100%").bg("#fff").css({
            borderRadius: 30,
            opacity: 0.1
        });
        $text.html(Copy.SWIPE).css({
            width: "100%",
            textAlign: "center",
            top: 37,
            left: 0,
            fontSize: 13,
            textTransform: "uppercase",
            fontFamily: "roboto",
            fontWeight: "bold",
            opacity: 0.9,
            letterSpacing: 1
        })
    }

    function initInteraction() {
        _swipe = _this.initClass(SwipeMechanic, $this);
        _swipe.onUpdate = onUpdate
    }

    function onUpdate(e) {
        $this.y = e.spring;
        $this.transform();
        e.progress = e.spring / _threshold;
        _this.events.fire(PlanesEvents.MY_PLANES_SWIPE_PROGRESS, e);
        if (e.target < _threshold) {
            complete(e.velocity * 0.01)
        }
    }

    function complete(velocity) {
        if (_swipe) {
            _swipe = _swipe.destroy()
        }
        _this.events.fire(PlanesEvents.MY_PLANES_SWIPE_COMPLETE, {
            velocity: velocity
        })
    }

    function addHandlers() {
        $this.touchClick(null, click);
        _this.events.subscribe(PlanesEvents.FORCE_MY_PLANES_SWIPE, click)
    }

    function click(e) {
        if (!_swipe) {
            return
        }
        if (e.force) {
            $this.y = -Stage.height;
            complete(1)
        } else {
            $outline.transform({
                scaleX: 0.97,
                scaleY: 0.97
            }).css({
                opacity: 1
            }).tween({
                scaleX: 1,
                scaleY: 1,
                opacity: 0.85
            }, 400, "easeOutSine");
            $outline.fill.css({
                opacity: 0.8
            }).tween({
                opacity: 0.1
            }, 300, "easeOutSine");
            _this.delayedCall(function() {
                complete(1)
            }, 100)
        }
    }
    this.animateIn = function(callback) {
        $text.transform({
            y: 7
        });
        $this.show().clearAlpha();
        $outline.transform({
            scaleX: 0.6,
            scaleY: 0.6
        }).css({
            opacity: 0
        });
        _tweenIn = $outline.tween({
            scaleX: 1,
            scaleY: 1,
            opacity: 0.85
        }, (typeof callback == "function") ? 100 : 1200, "easeOutQuart", 800, function() {
            initInteraction();
            if (typeof callback == "function") {
                callback()
            }
        });
        $text.css({
            opacity: 0
        }).tween({
            y: 0,
            opacity: 1
        }, 1000, "easeOutQuart", 1000)
    };
    this.animateOut = function() {
        if (_tweenIn && _tweenIn.stop) {
            _tweenIn.stop()
        }
        $this.tween({
            opacity: 0
        }, 500, "easeOutCubic");
        if (_swipe) {
            _swipe = _swipe.destroy()
        }
    }
});
Class(function MyPlanesDetailView(_data) {
    Inherit(this, View);
    var _this = this;
    var $this, $container, $swapPrompt;
    var _backPrompt, _earth, _plane, _closePrompt, _info, _pinchInstructions, _stats, _sharePrompt;
    if (Hydra.HASH && Hydra.HASH.indexOf("force") !== -1) {
        _data.data.stamps = [{
            date: "05-18-2016",
            address: "Melbourne, VIC",
            country: "Australia",
            coords: [-36.95, 146.07],
        }, {
            date: "05-18-2016",
            address: "Namibia",
            country: "Africa",
            coords: [-29.62, 21.97],
        }, {
            date: "05-18-2016",
            address: "Los Angeles, CA",
            country: "USA",
            coords: [35.38, -117.94],
        }, {
            date: "05-18-2016",
            address: "Melbourne, VIC",
            country: "Australia",
            coords: [-36.95, 146.07],
        }, {
            date: "05-18-2016",
            address: "Namibia",
            country: "Africa",
            coords: [-29.62, 21.97],
        }, {
            date: "05-18-2016",
            address: "Los Angeles, CA",
            country: "USA",
            coords: [35.38, -117.94],
        }, {
            date: "05-18-2016",
            address: "Melbourne, VIC",
            country: "Australia",
            coords: [-36.95, 146.07],
        }, {
            date: "05-18-2016",
            address: "Namibia",
            country: "Africa",
            coords: [-29.62, 21.97],
        }, {
            date: "05-18-2016",
            address: "Los Angeles, CA",
            country: "USA",
            coords: [35.38, -117.94],
        }, ]
    }
    if (Hydra.HASH && Hydra.HASH.indexOf("forceSame") !== -1) {
        _data.data.stamps = [{
            date: "05-18-2016",
            address: "Los Angeles, CA",
            country: "USA",
            coords: [35.38, -117.94],
        }, {
            date: "05-18-2016",
            address: "Los Angeles, CA",
            country: "USA",
            coords: [35.38, -117.94],
        }, {
            date: "05-18-2016",
            address: "Los Angeles, CA",
            country: "USA",
            coords: [35.38, -117.94],
        }]
    }
    var _beenThrown = _data.data.stamps.length > 1;
    (function() {
        initData();
        initHTML();
        style();
        initViews();
        addHandlers()
    })();

    function initData() {}

    function initHTML() {
        $this = _this.element;
        $container = $this.create("Container");
        $swapPrompt = $this.create("SwapPrompt")
    }

    function style() {
        $this.size("100%");
        $container.size("100%").css({
            textAlign: "center",
        });
        $swapPrompt.css({
            bottom: 0,
            left: 0,
            right: 0,
            height: "40%"
        });
        $this.transform({
            x: Stage.width
        })
    }

    function initViews() {
        _backPrompt = _this.initClass(DetailBackPrompt);
        _info = _this.initClass(DetailInfoView, _data, [$container]);
        _pinchInstructions = _this.initClass(DetailPinchInstructions, _data, [$container]);
        _stats = _this.initClass(DetailStatsView, _data, [$container]);
        _backPrompt.animateIn();
        initEarth();
        initPlane()
    }

    function initEarth() {
        if (_beenThrown) {
            _earth = _this.initClass(EarthDetail, _data, [$container])
        }
    }

    function initPlane() {
        _plane = _this.initClass(PlaneDetail, _data);
        _plane.onStartOpen = onStartOpen;
        _plane.onClose = onClose
    }

    function addHandlers() {
        if (_beenThrown) {
            $swapPrompt.bind("touchstart", swap)
        }
    }

    function swap() {
        if (_this.isEarth) {
            _this.isEarth = false;
            $swapPrompt.css({
                bottom: 0
            });
            _info.down();
            _plane.activate();
            _pinchInstructions.activate();
            if (_earth) {
                _earth.deactivate()
            }
            $container.tween({
                y: 0
            }, 700, "slideInOut")
        } else {
            _this.isEarth = true;
            $swapPrompt.css({
                bottom: "80%"
            });
            _info.up();
            _plane.deactivate();
            _pinchInstructions.deactivate();
            if (_earth) {
                _earth.activate()
            }
            $container.tween({
                y: -Stage.height * 0.368
            }, 700, "slideInOut")
        }
    }

    function onStartOpen() {
        $swapPrompt.hide();
        UIMobile.instance().closePrompt.animateOut();
        if (_earth) {
            _earth.shiftOut()
        }
        _pinchInstructions.fadeOut();
        _info.fadeOut();
        _stats.fadeOut();
        _closePrompt = _this.initClass(UIClosePrompt, true);
        _closePrompt.animateIn();
        _closePrompt.events.add(HydraEvents.CLICK, closePlane);
        if (Mobile.isNative()) {
            _sharePrompt = _this.initClass(UISharePrompt, true);
            _sharePrompt.animateIn();
            _sharePrompt.css({
                left: 0
            });
            _sharePrompt.events.add(HydraEvents.CLICK, sharePlane)
        }
    }

    function onClose() {
        if (_closePrompt) {
            _closePrompt.animateOut(function() {
                _closePrompt = _closePrompt.destroy()
            })
        }
        if (_sharePrompt) {
            _sharePrompt.animateOut(function() {
                _sharePrompt = _sharePrompt.destroy()
            })
        }
        if (_earth) {
            _earth.shiftIn()
        }
        UIMobile.instance().closePrompt.animateIn();
        $swapPrompt.show();
        _pinchInstructions.fadeIn();
        _info.fadeIn();
        _stats.fadeIn()
    }

    function closePlane() {
        _plane.close()
    }

    function sharePlane() {
        World.instance().getSnapshot(function(imageData) {
            if (imageData) {
                var snapshot = World.instance().renderer.domElement.toDataURL("image/png");
                var image = new Image();
                image.src = snapshot;
                image.style.zIndex = 99998;
                image.style.width = "100%";
                var logo = new Image();
                logo.src = Config.CDN + "assets/images/common/logo.png";
                logo.style.zIndex = 99999;
                logo.style.position = "absolute";
                logo.style.top = "50px";
                logo.style.left = "10%";
                logo.style.width = "80%";
                logo.style.height = "auto";
                document.body.appendChild(image);
                document.body.appendChild(logo);
                setTimeout(function() {
                    Mobile.Social.shareImage({
                        image: snapshot
                    });
                    setTimeout(function() {
                        document.body.removeChild(image);
                        document.body.removeChild(logo)
                    }, 250)
                }, 100)
            }
        })
    }
    this.animateIn = function() {
        $this.tween({
            x: 0
        }, 700, "slideInOut");
        _info.animateIn();
        _pinchInstructions.animateIn(500);
        _plane.animateIn(100);
        _stats.animateIn(200);
        if (_earth) {
            _earth.animateIn(300)
        }
    };
    this.animateOut = function(callback) {
        _plane.animateOut();
        if (_earth) {
            _earth.animateOut()
        }
        $this.tween({
            x: Stage.width
        }, 700, "slideInOut", callback)
    };
    this.fadeOut = function(callback) {
        _plane.animateOut();
        if (_earth) {
            _earth.animateOut()
        }
        $this.tween({
            opacity: 0
        }, 500, "easeInOutCubic", function() {
            $this.transform({
                x: Stage.width
            }).css({
                opacity: 1
            });
            callback()
        })
    };
    this.onDestroy = function() {}
});
Class(function EarthDetail(_data) {
    Inherit(this, View);
    var _this = this;
    var $this, $rotateCatcher;
    var _earth, _rotation, _curve, _timeline, _plane, _timerAutoplay;
    var _locations = [];
    var _locationMeshes = [];
    (function() {
        initHTML();
        style();
        initGeometry();
        initLocations();
        initRotation();
        initTimeline()
    })();

    function initHTML() {
        $this = _this.element;
        $rotateCatcher = $this.create("RotateCatcher")
    }

    function style() {
        $this.css({
            position: "static"
        });
        $rotateCatcher.size("100%", "50%").css({
            top: "66%",
        });
        $rotateCatcher.hide()
    }

    function initGeometry() {
        _earth = Earth.instance();
        var s = 0.08;
        _earth.object3D.scale.set(s, s, s);
        _earth.object3D.position.set(0, -25, 0);
        _earth.object3D.rotation.set(0, 0, 0);
        _earth.object3D.rotation.reorder("XYZ");
        _earth.halfVisible()
    }

    function initLocations() {
        var points = [];
        _data.data.stamps.forEach(function(d) {
            var location = _this.initClass(EarthDetailLocation, d, _earth);
            _locations.push(location);
            _locationMeshes.push(location.object3D.children[1]);
            points.push(location.position.clone())
        });
        _curve = _this.initClass(EarthDetailCurve, points, _earth);
        _plane = _this.initClass(PlaneOrbitGeometry, _earth)
    }

    function hideLocation(location) {
        location.animateOut()
    }

    function showLocation(location) {
        location.animateIn()
    }

    function initRotation() {
        _rotation = _this.initClass(EarthDetailRotation, $rotateCatcher, _earth, _data.data.stamps, _locationMeshes, _locations)
    }

    function initTimeline() {
        _timeline = _this.initClass(EarthDetailTimeline, _locations, _rotation, _plane, _curve);
        _timeline.element.hide()
    }
    this.animateIn = function(delay) {
        World.instance().scene.add(_earth.object3D);
        _earth.object3D.position.x = -40;
        TweenManager.tween(_earth.object3D.position, {
            x: 0
        }, 700, "slideInOut", delay || 0)
    };
    this.animateOut = function() {
        _locations.forEach(hideLocation);
        TweenManager.tween(_earth.object3D.position, {
            x: -40
        }, 700, "slideInOut", function() {
            World.instance().scene.remove(_earth.object3D)
        })
    };
    this.shiftIn = function() {
        if (!_this.isShiftedOut) {
            return
        }
        _this.isShiftedOut = false;
        World.instance().scene.add(_earth.object3D);
        _earth.object3D.position.y = -40;
        TweenManager.tween(_earth.object3D.position, {
            y: -25
        }, 700, "slideInOut", 100)
    };
    this.shiftOut = function() {
        _this.isShiftedOut = true;
        TweenManager.tween(_earth.object3D.position, {
            y: -40
        }, 700, "slideInOut", function() {
            World.instance().scene.remove(_earth.object3D)
        })
    };
    this.deactivate = function() {
        $rotateCatcher.hide();
        if (_timeline) {
            _timeline.element.hide()
        }
        _rotation.deactivate();
        _locations.forEach(hideLocation);
        if (_curve) {
            _curve.animateOut()
        }
        if (_plane) {
            _plane.animateOut()
        }
        if (_timerAutoplay) {
            clearTimeout(_timerAutoplay)
        }
        if (_timeline) {
            _timeline.stopAutoPlay()
        }
        TweenManager.tween(_earth.object3D.position, {
            y: -25
        }, 600, "slideInOut")
    };
    this.activate = function() {
        $rotateCatcher.show();
        if (_timeline) {
            _timeline.element.show()
        }
        _rotation.activate();
        _locations.forEach(showLocation);
        if (_curve) {
            _curve.animateIn()
        }
        if (_plane) {
            _plane.animateIn()
        }
        if (_timeline) {
            _timerAutoplay = _this.delayedCall(function() {
                _timeline.autoPlay()
            }, 800)
        }
        TweenManager.tween(_earth.object3D.position, {
            y: -2
        }, 800, "slideInOut")
    };
    this.onDestroy = function() {
        World.instance().scene.remove(_earth.object3D)
    }
});
Class(function EarthDetailCurve(_initialPoints, _earth) {
    Inherit(this, Component);
    var _this = this;
    var _mesh, _curve, _material, _timer;
    (function() {
        initCurve()
    })();

    function initCurve() {
        var initialCurve = new THREE.CatmullRomCurve3(_initialPoints);
        var points = initialCurve.getPoints(_initialPoints.length * 30);
        points.forEach(function(p) {
            p.multiplyScalar(160 / p.length())
        });
        _curve = new THREE.CatmullRomCurve3(points);
        var geometry = new THREE.Geometry();
        geometry.vertices = _curve.getPoints(points.length);
        _material = EarthDetailCurve.getMaterial();
        _mesh = new THREE.Line(geometry, _material);
        _mesh.frustumCulled = false;
        _earth.object3D.add(_mesh);
        _this.delayedCall(function() {
            _mesh.visible = false
        }, 100)
    }
    this.get("mesh", function() {
        return _mesh
    });
    this.get("curve", function() {
        return _curve
    });
    this.animateIn = function() {
        _mesh.visible = true;
        EarthDetailCurve.animateInLine()
    };
    this.animateOut = function() {
        EarthDetailCurve.animateOutLine();
        _timer = _this.delayedCall(function() {
            _mesh.visible = false
        }, 500)
    };
    this.onDestroy = function() {
        if (_timer) {
            clearTimeout(_timer)
        }
        EarthDetailCurve.animateOutLine();
        _earth.object3D.remove(_mesh);
        _mesh.geometry.dispose()
    }
}, function() {
    var _material;
    EarthDetailCurve.getMaterial = function() {
        if (_material) {
            return _material
        }
        _material = new THREE.LineBasicMaterial({
            color: 15658734,
            transparent: true,
            opacity: 0
        });
        return _material
    };
    EarthDetailCurve.animateInLine = function() {
        TweenManager.tween(_material, {
            opacity: 1
        }, 500, "easeInOutCubic", 500)
    };
    EarthDetailCurve.animateOutLine = function() {
        TweenManager.tween(_material, {
            opacity: 0
        }, 500, "easeInOutCubic")
    }
});
Class(function EarthDetailLocation(_data, _earth) {
    Inherit(this, Component);
    var _this = this;
    var _shader, _popup, _timeoutPopup;
    this.object3D = new THREE.Object3D();
    (function() {
        initGeometry();
        initPopup()
    })();

    function initGeometry() {
        var geometry;
        if (EarthDetailLocation.CYLINDER_GEOMETRY) {
            geometry = EarthDetailLocation.CYLINDER_GEOMETRY
        } else {
            geometry = new THREE.CylinderBufferGeometry(10, 1, 30, 16, 1, true);
            geometry.applyMatrix(new THREE.Matrix4().makeRotationZ(-Math.PI / 2));
            EarthDetailLocation.CYLINDER_GEOMETRY = geometry
        }
        _shader = EarthDetailLocation.getShader();
        var mesh = new THREE.Mesh(geometry, _shader.material);
        mesh.position.x = 160;
        _this.object3D.add(mesh);
        if (EarthDetailLocation.CLICK_GEOMETRY) {
            geometry = EarthDetailLocation.CLICK_GEOMETRY
        } else {
            geometry = new THREE.IcosahedronGeometry(30, 1);
            EarthDetailLocation.CLICK_GEOMETRY = geometry
        }
        var material = EarthDetailLocation.getClickMaterial();
        var clickMesh = new THREE.Mesh(geometry, material);
        clickMesh.position.x = 160;
        _this.object3D.add(clickMesh);
        _this.object3D.rotation.reorder("YXZ");
        _this.object3D.rotation.y = _data.coords[1] * Math.PI / 180 - 1.6;
        _this.object3D.rotation.z = _data.coords[0] * Math.PI / 180;
        _this.object3D.updateMatrixWorld();
        _this.position = new THREE.Vector3();
        _this.position.setFromMatrixPosition(mesh.matrixWorld);
        _earth.object3D.add(_this.object3D)
    }

    function initPopup() {
        _popup = _this.initClass(EarthDetailLocationPopup, _data, [Stage])
    }
    this.animateIn = function() {
        EarthDetailLocation.animateIn()
    };
    this.animateOut = function() {
        EarthDetailLocation.animateOut();
        _popup.animateOut(true)
    };
    this.showPopup = function() {
        _popup.animateIn();
        _timeoutPopup = _this.delayedCall(_this.hidePopup, 1500)
    };
    this.hidePopup = function() {
        if (_timeoutPopup) {
            clearTimeout(_timeoutPopup)
        }
        _popup.animateOut()
    };
    this.onDestroy = function() {
        _earth.object3D.remove(_this.object3D)
    }
}, function() {
    var _shader, _material;
    EarthDetailLocation.getShader = function() {
        if (_shader) {
            return _shader
        }
        _shader = new Shader("EarthLocations", "EarthLocations");
        _shader.uniforms = {
            time: {
                type: "f",
                value: 0
            },
            alpha: {
                type: "f",
                value: 0
            },
        };
        _shader.material.side = THREE.DoubleSide;
        _shader.material.transparent = true;
        _shader.material.depthWrite = false;
        return _shader
    };
    EarthDetailLocation.animateIn = function() {
        _shader.tween("alpha", 1, 500, "easeInOutCubic", 500);
        Render.start(loop)
    };
    EarthDetailLocation.animateOut = function() {
        _shader.tween("alpha", 0, 500, "easeInOutCubic", function() {
            Render.stop(loop)
        })
    };

    function loop(t, dt) {
        _shader.uniforms.time.value = dt
    }
    EarthDetailLocation.getClickMaterial = function() {
        if (_material) {
            return _material
        }
        _material = new THREE.MeshBasicMaterial({
            color: 16777215,
            opacity: 0,
            transparent: true,
            depthTest: false,
            depthWrite: false
        });
        return _material
    }
});
Class(function EarthDetailLocationPopup(_data) {
    Inherit(this, View);
    var _this = this;
    var $this, $text1, $text2;
    (function() {
        initHTML();
        style()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.css({
            left: "55%",
            top: "50%",
            marginTop: Utils.range(_data.coords[0], -90, 90, 100, -100) - 0,
            color: "#fff",
            width: 300
        });
        $text1 = $this.create(".text1");
        $text1.fontStyle("instruction", 10, "#fff");
        $text1.css({
            opacity: 0.6
        });
        $text1.text(_data.date);
        $text2 = $this.create(".text1");
        $text2.fontStyle("roboto", 12, "#fff");
        $text2.css({
            top: 16,
            lineHeight: 14,
            fontWeight: "bold"
        });
        $text2.html(_data.address + ",<br/>" + _data.country);
        $this.css({
            opacity: 0
        }).hide()
    }
    this.animateIn = function() {
        $this.transform({
            x: -3,
            y: -6
        });
        $this.show().tween({
            opacity: 1,
            x: 0,
            y: 0
        }, 500, "easeOutCubic", 300)
    };
    this.animateOut = function(isHaste) {
        $this.tween({
            opacity: 0,
            x: 3,
            y: 6
        }, isHaste ? 200 : 500, "easeInOutCubic", function() {
            $this.hide()
        })
    };
    this.onDestroy = function() {}
});
Class(function EarthDetailRotation(_catcher, _earth, _data, _locationMeshes, _locations) {
    Inherit(this, Component);
    var _this = this;
    var _interaction, _timerInertia, _raycaster, _animTween, _move, _currentLocation;
    var _time = 0;
    var _targetVelocity = new Vector2();
    var _velocity = new Vector2();
    var _autoPlayStrength = {
        value: 1
    };
    var _animRotation = new THREE.Vector3();
    this.progress = 0;
    (function() {
        initInteraction();
        Render.start(loop)
    })();

    function initInteraction() {
        _interaction = new Interaction.Input(_catcher);
        _interaction.onStart = onStart;
        _interaction.onUpdate = onUpdate;
        _interaction.onEnd = onEnd;
        _raycaster = _this.initClass(Raycaster, World.instance().camera)
    }

    function onStart() {
        if (typeof _this.onTouch == "function") {
            _this.onTouch()
        }
        _move = 0
    }

    function onUpdate(e) {
        if (!_this.isActive) {
            return
        }
        _targetVelocity.copyFrom(_interaction.velocity);
        _targetVelocity.multiply(0.2);
        _move += e.length()
    }

    function onEnd(e) {
        if (_move < 5) {
            checkForLocationClick(e)
        }
        _targetVelocity.set(0, 0)
    }

    function loop(t, dt, delta) {
        _velocity.lerp(_targetVelocity, 0.1);
        _targetVelocity.multiply(0.8);
        _time += delta;
        _earth.object3D.rotation.x += (Math.sin(_time * 0.0002) * 0.4 - _earth.object3D.rotation.x) * 0.1 * _autoPlayStrength.value;
        if (_interaction.touching || Math.abs(_velocity.x) > 0.001 || Math.abs(_velocity.y) > 0.001) {
            _earth.object3D.rotation.y += _velocity.x;
            _earth.object3D.rotation.x -= _velocity.y
        } else {
            if (_this.isAnimating) {
                _earth.object3D.rotation.y += (_animRotation.y - _earth.object3D.rotation.y) * 0.1;
                _earth.object3D.rotation.x += (_animRotation.x - _earth.object3D.rotation.x) * 0.1
            } else {
                _earth.object3D.rotation.y += 0.003 * _autoPlayStrength.value;
                if (_earth.object3D.rotation.y > Math.PI * 2) {
                    _earth.object3D.rotation.y -= Math.PI * 2
                }
            }
        }
    }

    function checkForLocationClick(e) {
        var hit = _raycaster.checkHit(_locationMeshes, e)[0];
        if (hit) {
            var index = _locationMeshes.indexOf(hit.object);
            _this.resetAnim();
            _this.rotateTo(index, 700, "easeOutCubic")
        }
    }
    this.resetAnim = function() {
        _animRotation.set(_earth.object3D.rotation.x, _earth.object3D.rotation.y, 0)
    };
    this.rotateTo = function(index, duration, ease, callback) {
        if (_currentLocation) {
            _currentLocation.hidePopup()
        }
        _locations[index].showPopup();
        _currentLocation = _locations[index];
        TweenManager.tween(_autoPlayStrength, {
            value: 0
        }, 10, "easeInOutCubic");
        _this.isAnimating = true;
        if (_timerInertia) {
            clearTimeout(_timerInertia)
        }
        var y = -_data[index].coords[1] * Math.PI / 180 - Math.PI;
        if (y > Math.PI) {
            y -= Math.PI * 2
        }
        if (y < -Math.PI) {
            y += Math.PI * 2
        }
        if (y - _earth.object3D.rotation.y > Math.PI) {
            y -= Math.PI * 2
        }
        if (y - _earth.object3D.rotation.y < -Math.PI) {
            y += Math.PI * 2
        }
        var x = -_data[index].coords[0] * Math.PI / 180 * 0.5;
        if (_animTween && _animTween.stop) {
            _animTween.stop()
        }
        _animTween = TweenManager.tween(_animRotation, {
            x: x,
            y: y
        }, duration || 1000, ease || "easeInOutCubic", function() {
            _timerInertia = _this.delayedCall(function() {
                _this.isAnimating = false;
                TweenManager.tween(_autoPlayStrength, {
                    value: 1
                }, 1000, "easeInOutCubic")
            }, 500);
            if (typeof callback == "function") {
                callback()
            }
        })
    };
    this.activate = function() {
        _this.isActive = true
    };
    this.deactivate = function() {
        _this.isActive = false
    };
    this.onDestroy = function() {
        if (_animTween && _animTween.stop) {
            _animTween.stop()
        }
        if (_timerInertia) {
            clearTimeout(_timerInertia)
        }
        Render.stop(loop)
    }
});
Class(function EarthDetailTimeline(_locations, _rotation, _plane, _curve) {
    Inherit(this, View);
    var _this = this;
    var $this, $touchCatcher, $container, $lineMask, $line, $thumb, _tweenAuto;
    var _interaction;
    var _points = [];
    var _current = 0;
    var _gutter = 80;
    (function() {
        initHTML();
        style();
        initInteraction()
    })();

    function initHTML() {
        $this = _this.element;
        $container = $this.create("Container");
        $touchCatcher = $this.create("TouchCatcher");
        $lineMask = $container.create("LineMask");
        $line = $lineMask.create("Line");
        _locations.forEach(function() {
            var $point = $container.create("Point");
            _points.push($point)
        });
        $thumb = $container.create("Thumb")
    }

    function style() {
        $this.size("100%", "15%").css({
            top: "110%",
        });
        $container.css({
            left: _gutter,
            right: _gutter,
            top: "50%",
            height: 1,
            background: "rgba(255, 255, 255, 0.2)",
        });
        $lineMask.size("100%").css({
            overflow: "hidden",
        });
        $line.css({
            left: "-100%",
            right: "100%",
            height: "100%",
            background: "#fff",
            marginRight: 6,
        });
        _points.forEach(function($point, i) {
            $point.size(5, 5).center().css({
                left: i * (100 / (_points.length - 1)) + "%",
                background: "#fff",
                borderRadius: 1000,
            })
        });
        $thumb.size(11, 11).center().css({
            left: 0,
            borderRadius: 1000,
            boxShadow: "0px 0px 0px 2px #fff, 0px 2px 8px 2px rgba(0, 0, 0, 0.2)",
            background: "rgba(255, 255, 255, 0.1",
        });
        $touchCatcher.css({
            top: "15%",
            bottom: "15%",
            left: _gutter - 5,
            right: _gutter - 5,
        });
        $thumb.persistTween = true;
        $thumb.tween({
            x: 0
        }, 300, "easeOutCubic");
        $line.persistTween = true;
        $line.tween({
            x: 0
        }, 300, "easeOutCubic")
    }

    function initInteraction() {
        _interaction = new Interaction.Input($touchCatcher);
        _interaction.onStart = onStart;
        _interaction.onUpdate = onUpdate;
        _interaction.onEnd = onEnd;
        _rotation.onTouch = stopAutoPlay
    }

    function onStart(e) {
        stopAutoPlay();
        update(e)
    }

    function onUpdate(diff, e) {
        update(e)
    }

    function onEnd() {
        snap()
    }

    function update(e) {
        var w = Stage.width - _gutter * 2;
        var x = e.x - _gutter;
        x = Math.max(0, Math.min(w, x));
        $thumb.transform({
            x: x
        });
        $line.transform({
            x: x
        });
        var segment = w / (_points.length - 1);
        var floor = $thumb.x - $thumb.x % segment;
        var index = Math.round((floor / w) * (_points.length - 1) + ($thumb.x % segment > segment * 0.5 ? 1 : 0));
        if (index !== _current) {
            _current = index;
            _rotation.resetAnim();
            _rotation.rotateTo(index, 1000, "easeOutCubic")
        }
    }

    function snap(isOnlyTimeline) {
        var w = Stage.width - _gutter * 2;
        var segment = w / (_points.length - 1);
        var floor = $thumb.x - $thumb.x % segment;
        var x = floor + ($thumb.x % segment > segment * 0.5 ? segment : 0);
        var index = Math.round((x / w) * (_points.length - 1));
        $thumb.transform({
            x: x
        });
        $line.transform({
            x: x
        });
        if (isOnlyTimeline) {
            return
        }
        if (index !== _current) {
            _current = index;
            _rotation.resetAnim();
            _rotation.rotateTo(index, 1000, "easeOutCubic")
        }
    }

    function stopAutoPlay() {
        if (_tweenAuto && _tweenAuto.stop) {
            _tweenAuto.stop()
        }
        snap(true);
        _plane.animateOut()
    }
    this.stopAutoPlay = stopAutoPlay;
    this.autoPlay = function() {
        _plane.animateIn();
        _current = 0;
        _rotation.resetAnim();
        _rotation.rotateTo(_current, 1500, "easeInOutCubic");
        var w = Stage.width - _gutter * 2;
        var temp = {
            a: 0
        };
        var onUpdate = function(e) {
            var index = Math.round(temp.a + 0.3);
            if (index !== _current) {
                _current = index;
                _rotation.resetAnim();
                _rotation.rotateTo(_current, 1500, "easeInOutCubic")
            }
            $thumb.transform({
                x: e * w
            });
            $line.transform({
                x: e * w
            });
            _plane.group.position.copy(_curve.curve.getPoint(e));
            _plane.group.lookAt(_curve.curve.getPoint(Math.max(0, e - 0.01)));
            _plane.group.rotation.z += _plane.group.position.y * -0.007 + Math.PI / 2
        };
        var onComplete = function() {
            _plane.animateOut()
        };
        _tweenAuto = TweenManager.tween(temp, {
            a: _locations.length - 1
        }, _locations.length * 1500, "linear", 1000, onComplete, onUpdate)
    };
    this.onDestroy = function() {
        if (_tweenAuto && _tweenAuto.stop) {
            _tweenAuto.stop()
        }
    }
});
Class(function DetailBackPrompt() {
    Inherit(this, View);
    var _this = this;
    var $this, $overlay;
    (function() {
        initHTML();
        style();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.size(100, 100).bg("assets/images/icons/arrow-back.png").css({
            backgroundSize: "30px 30px",
            backgroundRepeat: "no-repeat",
            backgroundPosition: "center",
            top: 0,
            left: 0,
        });
        $overlay = $this.create(".overlay");
        $overlay.size(100, 100).center().css({
            opacity: 0,
            background: "#fff",
            borderRadius: 1000,
        });
        $this.hide()
    }

    function addHandlers() {
        $this.touchClick(hover, click)
    }

    function hover() {}

    function click() {
        $overlay.css({
            opacity: 0.2
        }).transform({
            scaleX: 0.2,
            scaleY: 0.2
        }).tween({
            scaleX: 1.4,
            scaleY: 1.4,
            opacity: 0
        }, 600, "easeOutCubic");
        _this.events.fire(PlanesEvents.PLANE_DETAIL_CLOSE)
    }
    this.animateIn = function() {
        $this.show().css({
            opacity: 0
        }).transform({
            x: 15
        }).tween({
            opacity: 1,
            x: 0
        }, 1000, "easeOutCubic")
    };
    this.animateOut = function() {
        $this.tween({
            opacity: 0,
            x: -5
        }, 800, "easeInCubic", function() {
            $this.hide()
        })
    }
});
Class(function DetailInfoView(_data) {
    Inherit(this, View);
    var _this = this;
    var $this, $title, $text, $number, $icon, $arrows, $up, $down;
    (function() {
        initHTML();
        style()
    })();

    function initHTML() {
        $this = _this.element;
        $title = $this.create("Date");
        $text = $this.create("Text");
        $number = $this.create("Number");
        $icon = $this.create("Icon")
    }

    function style() {
        $this.css({
            position: "static"
        });
        $title.html("#" + Utils.numberWithCommas(_data.number)).css({
            left: 0,
            right: 0,
            top: 26,
            fontSize: 32,
            fontWeight: "bold",
        });

        function capitalize(s) {
            return s.toLowerCase().replace(/\b./g, function(a) {
                return a.toUpperCase()
            })
        }
        var place = _data.data.address.split(",")[0];
        var state = _data.data.address.split(",")[1] || "";
        var address = capitalize(place);
        $text.html("Created " + _data.data.date + "<br />in " + address + state).css({
            left: 0,
            right: 0,
            top: 75,
            fontSize: 13,
            lineHeight: 18,
            fontFamily: "instruction",
            fontStyle: "italic",
            opacity: 0.8,
            letterSpacing: 0.2
        });
        $number.html((_data.data.stamps.length - 1).toString()).css({
            right: 65,
            top: 36,
            textAlign: "right",
            fontSize: 15,
            fontWeight: "bold",
        });
        $icon.size(60, 60).bg("assets/images/icons/pin.png", "contain").css({
            backgroundRepeat: "no-repeat",
            top: 18,
            right: 15,
        });
        if (_data.data.stamps.length > 1) {
            $arrows = $this.create("Arrows");
            $arrows.size("100%").css({
                opacity: 0
            });
            $up = $arrows.create(".up");
            $up.size(26, 26).bg("assets/images/icons/arrow-up.png").center(1, 0).css({
                top: "50%",
                marginTop: -50,
                opacity: 0
            });
            $down = $arrows.create(".up");
            $down.size(26, 26).bg("assets/images/icons/arrow-down.png").center(1, 0).css({
                bottom: 90
            })
        } else {
            $number.css({
                opacity: 0.5
            });
            $icon.css({
                opacity: 0.5
            })
        }
    }
    this.up = function() {
        $title.tween({
            y: -50
        }, 500, "easeOutCubic");
        $number.tween({
            y: -50
        }, 700, "easeOutCubic");
        $icon.tween({
            y: -50
        }, 700, "easeOutCubic");
        $text.tween({
            y: -30
        }, 700, "easeOutCubic");
        if ($up) {
            $up.tween({
                opacity: 1
            }, 300, "easeOutSine", 300)
        }
        if ($down) {
            $down.tween({
                opacity: 0
            }, 300, "easeOutSine")
        }
    };
    this.down = function() {
        $title.tween({
            y: 0
        }, 900, "easeInOutCubic");
        $number.tween({
            y: 0
        }, 1000, "easeInOutCubic");
        $icon.tween({
            y: 0
        }, 1000, "easeInOutCubic");
        $text.tween({
            y: 0
        }, 800, "easeInOutCubic");
        if ($up) {
            $up.tween({
                opacity: 0
            }, 300, "easeOutSine")
        }
        if ($down) {
            $down.tween({
                opacity: 1
            }, 300, "easeOutSine", 300)
        }
    };
    this.fadeOut = function() {
        if ($arrows) {
            $arrows.tween({
                opacity: 0,
                y: 10
            }, 700, "easeInCubic")
        }
    };
    this.fadeIn = function() {
        if ($arrows) {
            $arrows.tween({
                opacity: 1,
                y: 0
            }, 700, "easeOutCubic")
        }
    };
    this.animateIn = function() {
        if ($arrows) {
            $arrows.tween({
                opacity: 1,
                y: 0
            }, 500, "easeInOutCubic", 600)
        }
    }
});
Class(function DetailPinchInstructions(_data) {
    Inherit(this, View);
    var _this = this;
    var $this;
    (function() {
        initHTML();
        style()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.html(_data.data.stamps.length > 1 ? Copy.PINCH : Copy.PINCH2).css({
            left: 0,
            right: 0,
            top: "30%",
            fontSize: 12,
            lineHeight: 20,
            fontFamily: "instruction",
            fontStyle: "italic",
            opacity: 0,
            letterSpacing: 0.5
        })
    }
    this.animateIn = function(delay) {
        $this.tween({
            opacity: 0.5
        }, 500, "easeOutSine", delay || 0)
    };
    this.fadeOut = function() {
        $this.tween({
            opacity: 0,
            y: -10
        }, 300, "easeInCubic")
    };
    this.fadeIn = function() {
        $this.tween({
            opacity: 0.5,
            y: 0
        }, 700, "easeOutCubic")
    };
    this.activate = function() {
        $this.tween({
            opacity: 0.5,
            y: 0
        }, 800, "slideInOut")
    };
    this.deactivate = function() {
        $this.tween({
            opacity: 0,
            y: -40
        }, 600, "easeOutCubic")
    }
});
Class(function DetailStatsView(_data) {
    Inherit(this, View);
    var _this = this;
    var $this, $label, $stat;
    (function() {
        initHTML();
        style()
    })();

    function initHTML() {
        $this = _this.element;
        $label = $this.create("Label");
        $stat = $this.create("Stat")
    }

    function style() {
        $this.size("100%", 100).css({
            top: "54%",
        });
        if (_data.data.stamps.length > 1) {
            $label.html("Your plane has flown").css({
                left: 0,
                right: 0,
                top: 0,
                fontSize: 17,
                lineHeight: 20,
                fontFamily: "din",
                letterSpacing: 0
            });
            $stat.html(getDistance() + " miles").css({
                left: 0,
                right: 0,
                top: 16,
                fontSize: 32,
                fontFamily: "din",
                fontWeight: "bold",
            })
        } else {
            $label.html(Copy.NOT_CAUGHT).css({
                left: 0,
                right: 0,
                top: 0,
                fontSize: 26,
                lineHeight: 30,
                fontFamily: "din",
                letterSpacing: -0.5
            })
        }
        $this.transform({
            x: Stage.width
        })
    }

    function getDistance() {
        var stamps = _data.data.stamps;
        var distance = 0;
        for (var i = 1; i < stamps.length; i++) {
            distance += getDistanceFromLatLonInMiles(stamps[i - 1].coords[0], stamps[i - 1].coords[1], stamps[i].coords[0], stamps[i].coords[1])
        }
        distance = Math.max(Utils.doRandom(100, 300), distance);
        return Utils.numberWithCommas(Math.round(distance))
    }

    function getDistanceFromLatLonInMiles(lat1, lon1, lat2, lon2) {
        var R = 6371;
        var dLat = deg2rad(lat2 - lat1);
        var dLon = deg2rad(lon2 - lon1);
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c;
        return toMiles(d)
    }

    function deg2rad(deg) {
        return deg * (Math.PI / 180)
    }

    function toMiles(value) {
        return value * 0.621371
    }
    this.animateIn = function(delay) {
        $this.tween({
            x: 0
        }, 700, "slideInOut", delay || 0)
    };
    this.fadeOut = function() {
        $this.tween({
            opacity: 0,
            y: 10
        }, 300, "easeInCubic")
    };
    this.fadeIn = function() {
        $this.tween({
            opacity: 1,
            y: 0
        }, 700, "easeOutCubic")
    }
});
Class(function MyPlanesList() {
    Inherit(this, View);
    var _this = this;
    var $this, $title, $container;
    var _data, _count, _dw;
    var _items = [];
    (function() {
        initData();
        initHTML();
        style();
        initList();
        addHandlers()
    })();

    function initData() {
        _data = Data.Planes.getCreatedPlanes();
        _count = _data.length;
        _data.sort(function(a, b) {
            return b.number - a.number
        })
    }

    function initHTML() {
        $this = _this.element;
        $title = $this.create("Title");
        $container = $this.create("Container");
        $this.transform({
            y: Stage.height * 2
        })
    }

    function style() {
        $this.size("100%").css({
            overflow: "hidden"
        });
        var text = Copy.MADE.replace("##", _data.length);
        if (_data.length == 1) {
            text = text.slice(0, -1)
        }
        $title.html(text).css({
            top: 32,
            right: 0,
            left: 0,
            textAlign: "center",
            fontSize: 32,
            fontFamily: "din",
            lineHeight: "1.10em",
            letterSpacing: -0.5,
            fontWeight: "bold",
        });
        $container.css({
            top: 130,
            left: 0,
            right: 0,
            bottom: 40,
            paddingBottom: 40,
            overflow: "auto",
        });
        var $top = $this.create(".top");
        $top.size("100%", 130).css({
            borderBottom: "1px solid rgba(255,255,255,0.3)",
            boxShadow: "0 0 40px rgba(20,20,40,0.07)"
        });
        $container.div.className += " fade-bottom";
        Mobile.overflowScroll($container, {
            y: true
        });
        $title.css({
            opacity: 0
        })
    }

    function initList() {
        var index = 0;
        if (!_data || !_data.length) {
            return
        }
        _dw = new DistributedWorker(2);
        _dw.start(function() {
            _items.push(_this.initClass(MyPlanesListItem, _data[index], index, [$container]));
            if (index++ >= _data.length - 1) {
                _dw.stop()
            }
        })
    }

    function addHandlers() {
        _this.events.subscribe(PlanesEvents.MY_PLANES_SWIPE_PROGRESS, update);
        _this.events.subscribe(PlanesEvents.CONFIRMATION_HIDDEN, updateList);
        _this.events.subscribe(PlanesEvents.LOADED_MY_PLANES, updateList)
    }

    function update(e) {
        $title.css({
            opacity: 1
        });
        $this.transform({
            y: Stage.height + e.spring
        });
        $this.show()
    }

    function updateList() {
        if (Data.Planes.getCreatedPlanes().length <= _count) {
            return
        }
        if (_dw) {
            _dw.stop()
        }
        _items.forEach(function(item) {
            item.destroy()
        });
        _items = [];
        initData();
        initList();
        var text = Copy.MADE.replace("##", _data.length);
        if (_data.length == 1) {
            text = text.slice(0, -1)
        }
        $title.html(text)
    }
    this.animateOut = function(callback) {
        $title.tween({
            opacity: 0
        }, 300, "easeOutCubic");
        $this.tween({
            opacity: 0,
            y: 100
        }, 300, "easeOutCubic", function() {
            $this.transform({
                y: Stage.height,
                x: 0
            }).css({
                opacity: 1
            });
            $container.div.scrollTop = 0;
            if (typeof callback == "function") {
                callback()
            }
        })
    };
    this.animateShiftOut = function() {
        $this.tween({
            x: -Stage.width
        }, 600, "slideInOut", 50);
        AudioController.trigger("plane_stats_in");
        AudioController.trigger("tap")
    };
    this.animateShiftIn = function() {
        $this.tween({
            x: 0
        }, 700, "slideInOut", 50);
        AudioController.trigger("plane_stats_out");
        AudioController.trigger("tap")
    }
});
Class(function MyPlanesListItem(_data, _index) {
    Inherit(this, View);
    var _this = this;
    var $this, $overlay, $text, $created, $number, $icon, $plane;
    (function() {
        initHTML();
        style();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element;
        $overlay = $this.create("Overlay");
        $text = $this.create("Text");
        $created = $this.create("Created");
        $number = $this.create("Number");
        $icon = $this.create("Icon");
        $plane = $this.create("Plane")
    }

    function style() {
        $this.size("100%", 83).css({
            position: "relative",
            display: "block",
            overflow: "hidden"
        });
        var $line = $this.create("line");
        $line.css({
            left: 30,
            right: 30,
            width: "auto",
            height: 1,
            bottom: 0,
            opacity: 0.15
        }).bg("#fff");
        $overlay.css({
            width: "100%",
            paddingTop: "100%",
            margin: "-50%",
            opacity: 0,
            background: "#fff",
            borderRadius: 1000,
        });
        $text.html("#" + Utils.numberWithCommas(_data.number)).fontStyle("roboto", 19, "#fff").css({
            fontWeight: "bold",
            top: 20,
            left: 72
        });
        $created.html("Created " + _data.data.date).fontStyle("instruction", 12, "#fff").css({
            bottom: 23,
            fontStyle: "italic",
            left: 72,
            opacity: 0.8
        });
        $number.html((_data.data.stamps.length - 1).toString()).css({
            right: 57,
            top: 31,
            fontFamily: "instruction",
            textAlign: "right",
            fontSize: 15
        });
        $icon.size(60, 60).bg("assets/images/icons/pin.png", "contain").css({
            backgroundRepeat: "no-repeat",
            top: 13,
            right: 10,
        });
        if (_data.data.stamps.length - 1 == 0) {
            $number.css({
                opacity: 0.5
            });
            $icon.css({
                opacity: 0.5
            })
        }
        $plane.size(34, 34).bg("assets/images/icons/plane-logo.png", "contain").css({
            backgroundRepeat: "no-repeat",
            top: 27,
            left: 30,
        })
    }

    function addHandlers() {
        $this.touchClick(hover, click)
    }

    function hover(e) {
        if (e.action == "over") {} else {}
    }

    function click(e) {
        var top = _index * 83 - $this.div.parentNode.scrollTop;
        var x = (e.x) / (Stage.width);
        var y = (e.y - 130 - top) / 85;
        $overlay.css({
            left: x * 100 + "%",
            top: y * 100 + "%"
        });
        $overlay.css({
            opacity: 0.15
        }).transform({
            scaleX: 0.2,
            scaleY: 0.2
        }).tween({
            scaleX: 1.8,
            scaleY: 1.8,
            opacity: 0
        }, 1000, "easeOutCubic");
        defer(function() {
            _this.events.fire(PlanesEvents.PLANE_LIST_SELECT, {
                data: _data
            })
        })
    }
});
Class(function NetView() {
    Inherit(this, Component);
    var _this = this;
    var _net, _netBase, _animation;
    this.object3D = new THREE.Object3D();
    (function() {
        initGeometries()
    })();

    function initGeometries() {
        _net = _this.initClass(NetGeometry);
        _netBase = _this.initClass(NetBaseGeometry);
        _this.object3D.add(_netBase.object3D);
        _this.object3D.add(_net.object3D);
        var s = 1.5;
        _this.object3D.scale.set(s, s, s);
        _this.object3D.position.set(-7, -10, 0);
        _this.object3D.rotation.set(0, 0.7, 0);
        World.instance().scene.add(_this.object3D)
    }

    function initAnimation() {
        _animation = _this.initClass(NetAnimation, _net, _netBase, _this.object3D);
        _this.catchPlane = _animation.catchPlane;
        _this.renewNet = _animation.renewNet;
        _this.animateOut = _animation.animateOut
    }

    function addHandlers() {
        __window.bind("keydown", function(e) {
            if (_animation.stopCatching) {
                return
            }
            if (e.keyCode == 32) {
                _this.events.fire(PlanesEvents.CATCH_PLANE)
            }
        });
        Stage.bind("touchend", touchEnd);
        if (Device.mobile) {
            _this.events.subscribe(Mobile.Events.INTERNET_STATUS, checkConnection);
            _this.object3D.visible = Mobile.System.CONNECTIVITY
        }
    }

    function checkConnection(e) {
        if (!e.connected) {
            _this.object3D.visible = false
        } else {
            _this.object3D.visible = true
        }
    }

    function touchEnd(e) {
        if (_animation.stopCatching || e.target.className) {
            return
        }
        if (!ThrowMechanic.HAS_MOTION) {
            _this.events.fire(PlanesEvents.CATCH_PLANE)
        }
    }
    this.init = function() {
        initAnimation();
        addHandlers()
    }
});
Class(function NetAnimation(_net, _netBase, _container) {
    Inherit(this, Component);
    var _this = this;
    var _accel, _sway, _fadeTwn;
    var _shakeValveTarget = 1;
    var _shakeTarget = 1;
    var _shaleVel = 0;
    var _time = 0;
    var _shake = 1;
    (function() {
        initAccel();
        Render.start(loop);
        animateInStart()
    })();

    function initAccel() {
        _accel = Mobile.Accelerometer;
        _accel.capture()
    }

    function loop(t, dt, delta) {
        _time += delta;
        _sway = 0.1 * Math.sin(_time * 0.001);
        calculateShake();
        determineCatch();
        _net.shader.uniforms.time.value = _time;
        _net.shader.uniforms.flaccid.value = _shake;
        _container.rotation.z += (Utils.range(1 - _shake, 0, 1, 0, -1.2) + _sway - _container.rotation.z) * 0.1
    }

    function calculateShake() {
        if (_this.stopCatching) {
            return
        }
        var shakeAmount = Utils.range(Math.max(Math.abs(_accel.x), Math.abs(_accel.y), Math.abs(_accel.z)), 0, 18, 1, 0, true);
        _shakeValveTarget += (shakeAmount - _shakeValveTarget) * (shakeAmount > _shakeValveTarget ? 0.25 : 0.7);
        _shakeTarget += (_shakeValveTarget - _shakeTarget) * 0.2;
        springEase()
    }

    function springEase() {
        var spring = 0.6;
        var friction = 0.5;
        _shaleVel += (_shakeTarget - _shake) * spring;
        _shake += (_shaleVel *= friction)
    }

    function determineCatch() {
        if (_this.stopCatching) {
            return
        }
        if (Math.max(Math.abs(_accel.x), Math.abs(_accel.y), Math.abs(_accel.z)) < 18) {
            return
        }
        if (Device.mobile && !Mobile.System.CONNECTIVITY) {
            return
        }
        _this.events.fire(PlanesEvents.CATCH_PLANE)
    }

    function animateInStart() {
        _container.position.y = -15;
        _container.position.x = -12;
        var delay = Tests.slowMeshUpload() ? 1000 : 0;
        TweenManager.tween(_container.position, {
            y: -10,
            x: -7
        }, 3000, "easeOutQuart", delay + 500);
        _net.shader.uniforms.alpha.value = 0;
        _netBase.shader.uniforms.alpha.value = 0;
        _net.shader.tween("alpha", 1, 3000, "easeOutSine", delay + 500);
        _netBase.shader.tween("alpha", 1, 2000, "easeOutSine", delay + 500)
    }
    this.get("shake", function() {
        return _shake
    });
    this.set("shake", function(value) {
        _shake = value
    });
    this.catchPlane = function() {
        _this.stopCatching = true;
        var temp = {
            a: _shake
        };
        var onUpdate = function() {
            _shake = temp.a
        };
        var onComplete = function() {
            TweenManager.tween(temp, {
                a: 0.5
            }, 800, "easeInOutCubic", 0, null, onUpdate)
        };
        TweenManager.tween(temp, {
            a: 0
        }, 100, "easeOutCubic", 0, onComplete, onUpdate);
        _fadeTwn = _this.delayedCall(_this.animateOut, 1500)
    };
    this.animateOut = function() {
        _this.stopCatching = true;
        _net.shader.tween("alpha", 0, 500, "easeOutCubic");
        _netBase.shader.tween("alpha", 0, 500, "easeOutCubic", function() {
            Render.stop(loop);
            _container.remove(_netBase.object3D);
            _container.remove(_net.object3D)
        })
    };
    this.renewNet = function() {
        if (_fadeTwn) {
            clearTimeout(_fadeTwn)
        }
        _container.add(_netBase.object3D);
        _container.add(_net.object3D);
        _shake = 1;
        Render.start(loop);
        _net.shader.tween("alpha", 1, 1200, "easeOutCubic");
        _netBase.shader.tween("alpha", 1, 1200, "easeOutCubic", function() {
            _this.stopCatching = false
        })
    };
    this.onDestroy = function() {
        Render.stop(loop)
    }
});
Class(function NetBaseGeometry() {
    Inherit(this, Component);
    var _this = this;
    var _geometry, _shader;
    this.object3D = new THREE.Object3D();
    (function() {
        initGeometry();
        initShader();
        initMesh()
    })();

    function initGeometry() {
        _geometry = new THREE.BufferGeometry();
        var data = Hydra.JSON.netBase;
        var position = new THREE.BufferAttribute(new Float32Array(data.position), 3);
        var normal = new THREE.BufferAttribute(new Float32Array(data.normal), 3);
        var uv = new THREE.BufferAttribute(new Float32Array(data.uv), 2);
        _geometry.addAttribute("position", position);
        _geometry.addAttribute("normal", normal);
        _geometry.addAttribute("uv", uv)
    }

    function initShader() {
        _shader = new Shader("NetBase", "NetBase");
        _shader.uniforms = {
            alpha: {
                type: "f",
                value: 0
            },
            tMatcap: {
                type: "t",
                value: Utils3D.getTexture("assets/images/plane/netmatcap.jpg")
            }
        };
        _shader.material.transparent = true
    }

    function initMesh() {
        var mesh = new THREE.Mesh(_geometry, _shader.material);
        mesh.frustumCulled = false;
        _this.object3D.add(mesh);
        _this.object3D.position.set(2, 15, 0);
        _this.object3D.rotation.z = 0.4
    }
    this.get("shader", function() {
        return _shader
    })
});
Class(function NetGeometry() {
    Inherit(this, Component);
    var _this = this;
    var _geometry, _shader, _accel;
    this.object3D = new THREE.Object3D();
    (function() {
        initGeometry();
        initShader();
        initMesh()
    })();

    function initGeometry() {
        _geometry = new THREE.BufferGeometry();
        var data = Hydra.JSON.net;
        var vertices = new THREE.BufferAttribute(new Float32Array(data.vertices), 3);
        _geometry.addAttribute("position", vertices)
    }

    function initShader() {
        _shader = new Shader("Net", "Net");
        _shader.uniforms = {
            control: {
                type: "v3",
                value: new THREE.Vector3(-15, 0, 0)
            },
            flaccid: {
                type: "f",
                value: 1
            },
            time: {
                type: "f",
                value: 1
            },
            sway: {
                type: "f",
                value: 0
            },
            alpha: {
                type: "f",
                value: 0
            },
        };
        _shader.material.linewidth = 2;
        _shader.material.transparent = true;
        _shader.material.depthWrite = false
    }

    function initMesh() {
        var mesh = new THREE.Mesh(_geometry);
        var edges = new THREE.EdgesHelper(mesh);
        mesh.frustumCulled = false;
        edges.frustumCulled = false;
        edges.material = _shader.material;
        _this.object3D.add(edges);
        _this.object3D.position.set(2, 15, 0);
        _this.object3D.rotation.z = 0.4
    }
    this.get("shader", function() {
        return _shader
    })
});
Class(function OverlayMobileView(_text) {
    Inherit(this, View);
    var _this = this;
    var $this, $wrapper, $logo, $text1, $text2, $text3, $text4, $gps, $close;
    var _fallback = Tests.NO_CSS_BLEND();
    (function() {
        initHTML();
        initLogo();
        initText();
        if (!Data.User.usingAccurateGeo()) {
            initGPS()
        }
        initClose();
        addListeners()
    })();

    function initHTML() {
        $this = _this.element;
        $this.size("100%").invisible().css({
            left: 0,
            top: 0
        });
        $wrapper = $this.create(".wrapper");
        $wrapper.size(220, Data.User.usingAccurateGeo() ? 340 : 400).center()
    }

    function initLogo() {
        $logo = $wrapper.create(".logo");
        $logo.size(44, 44).center(1, 0).bg(_fallback ? "assets/images/icons/plane-logo-purple.png" : "assets/images/loader/plane-logo-black.png")
    }

    function initText() {
        $text1 = $wrapper.create(".text");
        $text1.fontStyle("Roboto", 15, "#000");
        $text1.css({
            position: "relative",
            fontWeight: "bold",
            marginTop: 70,
            textAlign: "center",
            display: "block"
        });
        if (_fallback) {
            $text1.css({
                color: "#9da4e1"
            })
        }
        $text1.html(_text[0]);
        $text2 = $wrapper.create(".text");
        $text2.fontStyle("Roboto", 15, "#000");
        $text2.css({
            position: "relative",
            marginTop: 20,
            textAlign: "center",
            display: "block"
        });
        if (_fallback) {
            $text2.css({
                color: "#9da4e1"
            });
            defer(function() {
                var list = $text2.div.getElementsByTagName("a");
                console.log(list);
                for (var i = 0; i < list.length; i++) {
                    console.log(list[i]);
                    $(list[i]).css({
                        color: "#9da4e1"
                    })
                }
            })
        }
        $text2.html(_text[1]);
        $text3 = $wrapper.create(".text");
        $text3.fontStyle("Roboto", 15, "#000");
        $text3.css({
            position: "relative",
            marginTop: 20,
            textAlign: "center",
            display: "block"
        });
        if (_fallback) {
            $text3.css({
                color: "#9da4e1"
            })
        }
        $text3.html(_text[2])
    }

    function initGPS() {
        $text4 = $wrapper.create(".text");
        $text4.fontStyle("Roboto", 15, "#000");
        $text4.css({
            position: "relative",
            marginTop: 20,
            textAlign: "center",
            display: "block"
        });
        if (_fallback) {
            $text4.css({
                color: "#9da4e1"
            })
        }
        $text4.html(Copy.INFO_GPS_1);
        $gps = $wrapper.create(".text");
        $gps.fontStyle("Roboto", 15, "#000");
        $gps.css({
            position: "relative",
            fontWeight: "bold",
            textDecoration: "underline",
            marginTop: 0,
            textAlign: "center",
            display: "block"
        });
        if (_fallback) {
            $gps.css({
                color: "#9da4e1"
            })
        }
        $gps.html(Copy.INFO_GPS_2);
        $gps.interact(null, function() {
            Data.User.getAccurateGeo();
            $text4.tween({
                opacity: 0
            }, 300, "easeOutSine");
            $gps.tween({
                opacity: 0
            }, 300, "easeOutSine", function() {
                $gps.hide();
                $text4.hide()
            })
        })
    }

    function initClose() {
        $close = $this.create(".close");
        $close.size(60, 60).center(1, 0).css({
            bottom: 10
        }).bg(_fallback ? "assets/images/icons/close-purple.png" : "assets/images/icons/close-black.png")
    }

    function addListeners() {
        _this.events.subscribe(PlanesEvents.CATCH_PLANE, click);
        _this.events.subscribe(PlanesEvents.THROW_NEW_PLANE, click);
        _this.events.subscribe(PlanesEvents.RE_THROW_CAUGHT_PLANE, click);
        $close.interact(null, click);
        $close.hit.size(100, 100).center()
    }

    function click() {
        if (!_this.isVisible) {
            return
        }
        BackgroundView.instance().toBack();
        UIMobile.instance().show();
        MyPlanes.instance().show();
        _this.isVisible = false;
        $close.css({
            opacity: 0
        });
        OverlayMobile.instance().animateOut()
    }
    this.animateIn = function() {
        $wrapper.size(220, Data.User.usingAccurateGeo() ? 340 : 400).center();
        _this.isVisible = true;
        $this.visible();
        $logo.transform({
            x: -80,
            y: 200,
            rotation: 12,
            scale: 0.8
        }).css({
            opacity: 0
        }).tween({
            x: 0,
            y: 0,
            rotation: 0,
            opacity: 1,
            scale: 1
        }, 2000, "easeOutQuart");
        $text1.transform({
            y: 40
        }).css({
            opacity: 0
        }).tween({
            y: 0,
            opacity: 1
        }, 1600, "easeOutCubic", 700);
        $text2.transform({
            y: 40
        }).css({
            opacity: 0
        }).tween({
            y: 0,
            opacity: 1
        }, 1600, "easeOutCubic", 900);
        $text3.transform({
            y: 40
        }).css({
            opacity: 0
        }).tween({
            y: 0,
            opacity: 1
        }, 1600, "easeOutCubic", 1100);
        if ($text4) {
            $text4.transform({
                y: 40
            }).css({
                opacity: 0
            }).tween({
                y: 0,
                opacity: 1
            }, 1600, "easeOutCubic", 1300)
        }
        if ($gps) {
            $gps.transform({
                y: 40
            }).css({
                opacity: 0
            }).tween({
                y: 0,
                opacity: 1
            }, 1600, "easeOutCubic", 1400)
        }
        $close.css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 800, "easeOutSine", 1600)
    }
});
Class(function PlaneButterflies() {
    Inherit(this, Component);
    var _this = this;
    var _planes;
    var _numParticles = Math.round(Config.BUTTERFLY_COUNT * Tests.getPlaneReduce());
    var _numThreads = Config.BUTTERFLY_THREAD_COUNT;
    var _chunks = [];
    (function() {
        initPlanes()
    })();

    function initPlanes() {
        _planes = _this.initClass(PlaneInstance, "PlaneCPUInstance", 8, _numParticles);
        var s = 0.2;
        _planes.object3D.scale.set(s, s, s);
        _planes.shader.uniforms.alpha.value = 0;
        World.instance().scene.add(_planes.object3D)
    }

    function initChunks() {
        for (var i = 0; i < _numThreads; i++) {
            var chunk = _this.initClass(PlaneButterfliesChunk, i, Math.floor(_numParticles / _numThreads), _planes.geometry);
            _chunks.push(chunk)
        }
    }

    function callChunks(func, args) {
        _chunks.forEach(function(chunk) {
            if (typeof chunk[func] == "function") {
                chunk[func](args)
            }
        })
    }

    function animateInStart() {
        _planes.object3D.position.z = -200;
        _planes.object3D.position.y = 50;
        var delay = Tests.slowMeshUpload() ? 1000 : 0;
        TweenManager.tween(_planes.object3D.position, {
            y: 0,
            z: 0
        }, 2000, "easeOutCubic", delay + 500);
        _planes.fadeIn(null, delay + 1000)
    }

    function addHandlers() {
        _this.events.subscribe(PlanesEvents.NEW_PLANE, hidePlanes)
    }

    function hidePlanes() {
        _planes.shader.uniforms.alpha.value = 0
    }
    this.init = function() {
        initChunks();
        addHandlers();
        animateInStart()
    };
    this.pause = function() {
        _planes.fadeOut(function() {
            callChunks("pause")
        })
    };
    this.resume = function() {
        _planes.fadeIn();
        callChunks("resume")
    }
});
Class(function ButterfliesBehavior(_boundary) {
    Inherit(this, Component);
    var _this = this;
    var _delta = new Vector3();
    var _points = [];
    this.addPoint = function(pos, radius, strength) {
        pos.radius = radius;
        pos.strength = strength;
        pos.radiusSq = pos.radius * pos.radius;
        _points.push(pos)
    };

    function contain(p) {
        if (p.pos.x < -_boundary * 2) {
            p.pos.set(p.pos.x + _boundary * 4, Utils.doRandom(-_boundary, _boundary) - 50, Utils.doRandom(-_boundary, _boundary));
            p.vel.set(Utils.doRandom(-10, -100), Utils.doRandom(-20, 20), Utils.doRandom(-100, 100))
        }
    }
    this.applyBehavior = function(p) {
        contain(p);
        p.acc.x -= 100 * p.speed;
        p.acc.y += 40 * p.speed;
        _delta.copyFrom(p.pos);
        var distSq = _delta.lengthSq();
        _points.forEach(function(point, i) {
            if (distSq < point.radiusSq && distSq > 0.000001) {
                _delta.normalize().multiply(1 - distSq / point.radiusSq);
                p.acc.add(_delta.multiply(point.strength))
            }
        })
    }
});
Class(function ButterfliesRotation() {
    Inherit(this, Component);
    var _this = this;
    var _origin = new Vector3(0, 0, -1);
    var _u = new Vector3();
    var _c = new Vector3();
    var _axis = new Vector3(0, 0, -1);
    var _z = new THREE.Quaternion();
    (function() {})();
    this.applyBehavior = function(p) {
        _u.copyFrom(p.vel);
        _u.normalize();
        _c.copyFrom(_u);
        var cos_theta = _u.dot(_origin);
        var angle = Math.acos(cos_theta);
        _c.cross(_origin);
        _c.normalize();
        p.rotation.setFromAxisAngle(_c, angle);
        _z.setFromAxisAngle(_axis, -0.5 + p.random * 2);
        p.rotation.multiply(_z)
    }
});
Class(function PlaneButterfliesChunk(_index, _numParticles, _geometry) {
    Inherit(this, Component);
    var _this = this;
    var _thread, _recycle, _render;
    var OFFSET = 7;
    (function() {
        initThread();
        Render.start(loop)
    })();

    function initThread() {
        _thread = _this.initClass(Thread, PlaneButterfliesThread);
        _thread.importScript(Config.PROXY + "assets/js/lib/three.min.js");
        _thread.importClass(Vector2, Vector3, ParticlePhysics, EulerIntegrator, LinkedList, PlaneButterfliesThreadConverter, Particle, WiggleBehavior, ButterfliesBehavior, ButterfliesRotation, ObjectPool);
        _thread.init({
            total: _numParticles
        });
        _thread.on("transfer", updateGeometry)
    }

    function loop() {
        if (!_render) {
            _render = {}
        }
        _render.time = Render.TSL;
        _render.delta = Render.DELTA;
        _thread.render(_render)
    }

    function updateGeometry(e) {
        for (var i = 0, j = _index * _numParticles; i < e.values.length; i += OFFSET, j++) {
            _geometry.attributes.offset.setXYZ(j, e.values[i + 0], e.values[i + 1], e.values[i + 2]);
            _geometry.attributes.orientation.setXYZW(j, e.values[i + 3], e.values[i + 4], e.values[i + 5], e.values[i + 6])
        }
        _geometry.attributes.offset.needsUpdate = true;
        _geometry.attributes.orientation.needsUpdate = true;
        recycle(e.values)
    }

    function recycle(buffer) {
        if (!_recycle) {
            _recycle = {
                transfer: true,
                msg: {
                    buffers: []
                }
            }
        }
        _recycle.msg.array = buffer;
        _recycle.msg.buffers.length = 0;
        _recycle.msg.buffers.push(buffer.buffer);
        _thread.recycleBuffer(_recycle)
    }
    this.pause = function() {
        Render.stop(loop)
    };
    this.resume = function() {
        Render.start(loop)
    }
});
Class(function PlaneButterfliesThread() {
    Inherit(this, Component);
    var _this = this;
    var _system, _converter;
    var _boundary = 100;
    (function() {})();

    function initSystem() {
        var integrator = new EulerIntegrator();
        integrator.useDeltaTime = true;
        _system = _this.initClass(ParticlePhysics, integrator);
        _converter = _this.initClass(PlaneButterfliesThreadConverter, _system.particles)
    }

    function initParticles(numParticles) {
        for (var i = 0; i < numParticles; i++) {
            var p = new Particle(new Vector3(Utils.doRandom(-_boundary * 2, _boundary * 2), Utils.doRandom(-_boundary, _boundary), Utils.doRandom(-_boundary, _boundary)), 0, 0);
            p.rotation = new THREE.Quaternion();
            p.speed = Utils.doRandom(80, 200) / 100;
            p.vel.set(Utils.doRandom(-10, -100), Utils.doRandom(-20, 20), Utils.doRandom(-20, 20));
            p.random = Math.random();
            _system.addParticle(p)
        }
    }

    function initBehaviours() {
        var attractor = new ButterfliesBehavior(_boundary);
        attractor.addPoint(new Vector3(300, 0, 0), 200, 100);
        attractor.addPoint(new Vector3(250, 50, 200), 100, 200);
        attractor.addPoint(new Vector3(150, -50, -200), 100, 200);
        attractor.addPoint(new Vector3(0, 0, 0), 150, -80);
        _system.addBehavior(attractor);
        _system.addBehavior(new ButterfliesRotation());
        _system.friction = 0.99
    }

    function loop(time, delta) {
        _system.update();
        var data = _converter.convert();
        var message = {};
        var buffers = [];
        for (var key in data) {
            message[key] = data[key];
            buffers.push(data[key].buffer)
        }
        emit("transfer", message, buffers)
    }
    this.init = function(e) {
        initSystem();
        initParticles(e.total);
        initBehaviours()
    };
    this.render = function(e) {
        loop(e.time, e.delta)
    };
    this.recycleBuffer = function(e) {
        _converter.recycle(e.array)
    }
});
Class(function PlaneButterfliesThreadConverter(_particles) {
    Inherit(this, Component);
    var _this = this;
    var OFFSET = 7;
    var _buffer = {};
    var _pool;
    (function() {})();

    function initPool() {
        _pool = new ObjectPool();
        for (var i = 0; i < 20; i++) {
            var array = new Float32Array(_particles.length * OFFSET);
            _pool.insert(array)
        }
    }
    this.convert = function() {
        if (!_pool) {
            initPool()
        }
        var values = _pool.get() || new Float32Array(_particles.length * OFFSET);
        var p = _particles.start();
        var index = 0;
        while (p) {
            values[index * OFFSET + 0] = p.pos.x;
            values[index * OFFSET + 1] = p.pos.y;
            values[index * OFFSET + 2] = p.pos.z;
            values[index * OFFSET + 3] = p.rotation.x;
            values[index * OFFSET + 4] = p.rotation.y;
            values[index * OFFSET + 5] = p.rotation.z;
            values[index * OFFSET + 6] = p.rotation.w;
            index++;
            p = _particles.next()
        }
        _buffer.values = values;
        return _buffer
    };
    this.recycle = function(array) {
        _pool.put(array)
    }
});
Class(function PlaneCaught() {
    Inherit(this, Component);
    var _this = this;
    var _plane, _animation, _pinch, _stamp, _fold, _throw, _shadow;
    (function() {
        initGeometry();
        initData();
        initAnimation()
    })();

    function initGeometry() {
        if (PlaneCaught.PLANE) {
            _plane = PlaneCaught.PLANE;
            _plane.update(91);
            _plane.flipContainer.rotation.x = 0;
            _plane.fade = 0;
            _plane.stripColor = null
        } else {
            _plane = _this.initClass(PlaneFoldGeometry);
            PlaneCaught.PLANE = _plane;
            _plane.age()
        }
        _plane.depth = false;
        World.instance().scene.add(_plane.swayContainer)
    }

    function initData() {
        Data.Planes.catchPlane(function(data) {
            _plane.stamp.addStamps(data.stamps)
        })
    }

    function initAnimation() {
        _animation = _this.initClass(PlaneFoldAnimation, _plane);
        _animation.preCatchPosition()
    }

    function addHandlers() {
        _this.events.subscribe(PlanesEvents.CATCH_PLANE, flyIntoNet)
    }

    function flyIntoNet() {
        _this.initialised = true;
        _plane.stamp.render();
        Mobile.vibrate(100);
        _animation.flyIntoNet();
        _this.delayedCall(function() {
            _animation.toCenter(initPinching)
        }, 1000);
        _this.delayedCall(function() {
            UIMobile.instance().closePrompt.animateIn();
            UIMobile.instance().instructions.update("PINCH", 160);
            UIMobile.instance().instructions.heading("CATCH", 115)
        }, 2000)
    }

    function initPinching() {
        var tl = _animation.createPinchingTimeline();
        UIMobile.instance().createPinchPrompt();
        _pinch = _this.initClass(PlanePinch, tl);
        _pinch.onStart = function() {
            UIMobile.instance().removePinchPrompt();
            UIMobile.instance().instructions.animateOut();
            UIMobile.instance().newPrompt.animateOut()
        };
        _pinch.onComplete = function() {
            GATracker.trackEvent("plane caught", "pinch", "pinched plane", 1);
            _pinch = _pinch.destroy();
            tl = tl.destroy();
            initStamping()
        }
    }

    function initStamping() {
        _plane.depth = true;
        _stamp = _this.initClass(PlaneStamp, _plane);
        _stamp.onComplete = function() {
            UIMobile.instance().closePrompt.animateOut();
            initFolding()
        }
    }

    function initFolding() {
        _fold = _this.initClass(PlaneFold, _plane, _animation, _stamp, true);
        _fold.onStart = function() {
            _stamp = _stamp.destroy();
            _plane.stripColor = PlaneStampTexture.DATA.color
        };
        _fold.onComplete = function() {
            GATracker.trackEvent("plane caught", "fold", "folded plane", 1);
            _fold = _fold.destroy();
            promptToRotate()
        }
    }

    function promptToRotate() {
        if (Global.HAS_SEEN_ROTATE_PROMPT || Tests.RETURN_USER()) {
            UIMobile.instance().closePrompt.animateOut();
            UIMobile.instance().instructions.animateOut();
            _animation.toThrowPosition();
            _this.delayedCall(initThrowing, 1000);
            return
        }
        UIMobile.instance().closePrompt.animateOut();
        UIMobile.instance().instructions.update("ROTATE");
        UIMobile.instance().createRotatePrompt();
        _animation.toThrowPosition();
        _this.delayedCall(function() {
            UIMobile.instance().removeRotatePrompt();
            initThrowing()
        }, 1500);
        Global.HAS_SEEN_ROTATE_PROMPT = true
    }

    function initThrowing() {
        _shadow = _this.initClass(PlaneShadow);
        _shadow.animateIn();
        _throw = _this.initClass(PlaneThrow, _plane, _animation, _shadow, true);
        _throw.onComplete = function() {
            GATracker.trackEvent("plane caught", "throw", "throw plane", 1);
            _throw = _throw.destroy();
            _this.events.fire(PlanesEvents.RE_THROW_CAUGHT_PLANE)
        }
    }
    this.init = function() {
        addHandlers()
    };
    this.onDestroy = function() {
        UIMobile.instance().instructions.animateOut();
        UIMobile.instance().removePinchPrompt();
        UIMobile.instance().removeRotatePrompt();
        World.instance().scene.remove(_plane.swayContainer)
    }
});
Class(function PlaneDetail(_data) {
    Inherit(this, Component);
    var _this = this;
    var _plane, _animation, _pinch, _tl, _pinchPrompt, _tweenAnimIn;
    (function() {
        initGeometry();
        initAnimation()
    })();

    function initGeometry() {
        if (PlaneDetail.PLANE) {
            _plane = PlaneDetail.PLANE;
            _plane.update(91)
        } else {
            _plane = _this.initClass(PlaneFoldGeometry);
            PlaneDetail.PLANE = _plane;
            _plane.age()
        }
        _plane.fade = 0;
        _this.delayedCall(function() {
            _plane.stamp.addStamps(_data.data.stamps)
        }, 500);
        World.instance().scene.add(_plane.swayContainer)
    }

    function initAnimation() {
        _animation = _this.initClass(PlaneFoldAnimation, _plane);
        _animation.toInitialDetailPosition();
        World.instance().scene.add(_plane.swayContainer);
        _plane.object3D.position.x = -40
    }

    function initPinching() {
        _tl = _animation.createPinchingTimeline(true);
        _pinch = _this.initClass(PlanePinch, _tl, true);
        _pinch.onStart = function() {
            GATracker.trackEvent("plane detail", "pinch", "pinch open", 1);
            if (typeof _this.onStartOpen == "function") {
                _this.onStartOpen()
            }
            _pinchPrompt = UIMobile.instance().removePinchPrompt();
            _animation.toDetailOpenPosition()
        };
        _pinch.onClose = function() {
            GATracker.trackEvent("plane detail", "pinch", "pinch close", 1);
            if (typeof _this.onClose == "function") {
                _this.onClose()
            }
            initPinchPrompt()
        }
    }

    function initPinchPrompt() {
        if (!_pinchPrompt) {
            _pinchPrompt = UIMobile.instance().createPinchPrompt(-50)
        }
    }
    this.animateIn = function(delay) {
        GATracker.trackEvent("plane detail", "click", "animate out", 1);
        World.instance().scene.add(_plane.swayContainer);
        _plane.object3D.position.x = -40;
        _tweenAnimIn = TweenManager.tween(_plane.object3D.position, {
            x: 0
        }, 700, "slideInOut", delay || 0, function() {
            _this.delayedCall(function() {
                initPinching();
                initPinchPrompt()
            }, 200)
        })
    };
    this.animateOut = function() {
        GATracker.trackEvent("plane detail", "click", "animate out", 1);
        if (_pinch) {
            _pinch = _pinch.destroy()
        }
        if (_tl) {
            _tl = _tl.destroy()
        }
        if (_pinchPrompt) {
            _pinchPrompt.element.tween({
                opacity: 0
            }, 200, "easeOutCubic", function() {
                if (_pinchPrompt) {
                    _pinchPrompt = UIMobile.instance().removePinchPrompt()
                }
            })
        }
        if (_tweenAnimIn && _tweenAnimIn.stop) {
            _tweenAnimIn.stop()
        }
        TweenManager.tween(_plane.object3D.position, {
            x: -40
        }, 700, "slideInOut", function() {
            World.instance().scene.remove(_plane.swayContainer)
        })
    };
    this.close = function() {
        GATracker.trackEvent("plane detail", "click", "close detial", 1);
        _pinch.snap(0)
    };
    this.deactivate = function() {
        GATracker.trackEvent("plane detail", "click", "deactivate", 1);
        if (_pinch) {
            _pinch = _pinch.destroy()
        }
        if (_tl) {
            _tl = _tl.destroy()
        }
        _animation.toDetailInactive();
        if (_pinchPrompt) {
            _pinchPrompt.element.tween({
                opacity: 0,
                y: -100
            }, 300, "easeInOutCubic", function() {
                _pinchPrompt.element.hide()
            })
        }
    };
    this.activate = function() {
        GATracker.trackEvent("plane detail", "click", "activate", 1);
        _animation.toDetailActive(initPinching);
        _pinchPrompt.element.show();
        _pinchPrompt.element.transform({
            y: -50
        }).tween({
            opacity: 1
        }, 500, "easeInOutCubic", 500)
    };
    this.onDestroy = function() {
        if (_pinch) {
            _pinch = _pinch.destroy()
        }
        if (_tl) {
            _tl = _tl.destroy()
        }
        if (_pinchPrompt) {
            _pinchPrompt = UIMobile.instance().removePinchPrompt()
        }
        World.instance().scene.remove(_plane.swayContainer)
    }
});
Class(function PlaneNew(_isFirstPlane) {
    Inherit(this, Component);
    var _this = this;
    var _plane, _animation, _stamp, _fold, _scale, _throw, _shadow;
    (function() {
        initGeometry();
        initAnimation()
    })();

    function initGeometry() {
        if (PlaneNew.PLANE) {
            _plane = PlaneNew.PLANE;
            _plane.update(91);
            _plane.stamp.clearStamps();
            _plane.object3D.scale.set(1, 1, 1);
            _plane.mesh.scale.set(1, 1, 1);
            _plane.flipContainer.rotation.x = 0;
            _plane.fade = 1;
            _plane.stripColor = null
        } else {
            _plane = _this.initClass(PlaneFoldGeometry);
            _plane.fade = 1;
            PlaneNew.PLANE = _plane
        }
        _plane.depth = false;
        World.instance().scene.add(_plane.swayContainer)
    }

    function initAnimation() {
        _animation = _this.initClass(PlaneFoldAnimation, _plane);
        _animation.animateInNewPlane(initStamping)
    }

    function initStamping() {
        _plane.depth = true;
        if (!_isFirstPlane) {
            UIMobile.instance().closePrompt.animateIn()
        }
        _stamp = _this.initClass(PlaneStamp, _plane);
        _stamp.onComplete = function() {
            GATracker.trackEvent("plane", "stamped", "stamped plane", 1);
            initFolding()
        }
    }

    function initFolding() {
        _fold = _this.initClass(PlaneFold, _plane, _animation, _stamp);
        _fold.onStart = function() {
            _stamp = _stamp.destroy();
            _plane.stripColor = PlaneStampTexture.DATA.color
        };
        _fold.onComplete = function() {
            GATracker.trackEvent("plane", "fold", "fold plane", 1);
            _fold = _fold.destroy();
            promptToRotate()
        }
    }

    function promptToRotate() {
        if (Global.HAS_SEEN_ROTATE_PROMPT || Tests.RETURN_USER()) {
            UIMobile.instance().closePrompt.animateOut();
            UIMobile.instance().instructions.animateOut();
            _animation.toThrowPosition();
            _this.delayedCall(initThrowing, 1000);
            return
        }
        UIMobile.instance().closePrompt.animateOut();
        UIMobile.instance().instructions.update("ROTATE");
        UIMobile.instance().createRotatePrompt();
        _animation.toThrowPosition();
        _this.delayedCall(function() {
            UIMobile.instance().removeRotatePrompt();
            initThrowing()
        }, 2000);
        Global.HAS_SEEN_ROTATE_PROMPT = true
    }

    function initScaling() {
        _shadow = _this.initClass(PlaneShadow);
        _shadow.animateIn();
        _scale = _this.initClass(PlaneScaling, _plane, _shadow);
        _scale.onComplete = function() {
            GATracker.trackEvent("plane", "scale", "scale plane", 1);
            _scale = _scale.destroy();
            initThrowing()
        }
    }

    function initThrowing() {
        if (!_shadow) {
            _shadow = _this.initClass(PlaneShadow);
            _shadow.animateIn()
        }
        _throw = _this.initClass(PlaneThrow, _plane, _animation, _shadow);
        _throw.onComplete = function() {
            GATracker.trackEvent("plane", "throw", "throw plane", 1);
            _throw = _throw.destroy();
            _this.events.fire(PlanesEvents.THROW_NEW_PLANE)
        }
    }
    this.onDestroy = function() {
        UIMobile.instance().removeRotatePrompt();
        World.instance().scene.remove(_plane.swayContainer)
    }
});
Class(function PlaneFoldAnimation(_plane) {
    Inherit(this, Component);
    var _this = this;
    var _teaseTwn, _foldTwn, _centerTwn;
    var _catchTweens = [];
    var _time = 0;
    var _swayStrength = 1;
    var _lastTime = 0;
    (function() {
        Render.start(loop)
    })();

    function loop(t, dt, delta) {
        _time += delta;
        _plane.swayContainer.rotation.x = _swayStrength * Utils.range(Math.sin(_time * 0.001 + 1.2), -1, 1, -0.02, 0.02);
        _plane.swayContainer.rotation.z = _swayStrength * Utils.range(Math.sin(_time * 0.002 + 1.2), -1, 1, -0.05, 0.05)
    }
    this.set("swayStrength", function(value) {
        _swayStrength = value
    });
    this.preCatchPosition = function() {
        var s = 0.3;
        _plane.object3D.scale.set(s, s, s);
        _plane.object3D.position.set(28, 0, -12);
        _plane.object3D.rotation.set(0.4, 2.2, -0.5)
    };
    this.flyIntoNet = function() {
        _catchTweens[0] = TweenManager.tween(_plane.object3D.position, {
            x: -4,
            y: 7,
            z: -4
        }, 2000, "easeOutExpo")
    };
    this.toCenter = function(callback) {
        var s = 1;
        _catchTweens[1] = TweenManager.tween(_plane.object3D.scale, {
            x: s,
            y: s,
            z: s
        }, 1500, "easeInOutCubic");
        _centerTwn = TweenManager.tween(_plane.object3D.position, {
            x: 0,
            y: 1,
            z: 0
        }, 1600, "easeInOutQuad", callback);
        _catchTweens[2] = TweenManager.tween(_plane.object3D.rotation, {
            x: 0.15,
            y: 5.3,
            z: 0.4
        }, 1500, "easeInOutQuad")
    };
    this.createPinchingTimeline = function(isDetail) {
        var tl = _this.initClass(TweenTimeline);
        var temp = {
            a: _plane.frame
        };
        var s = 1.3;
        tl.onUpdate = function(alpha) {
            _swayStrength = 1 - alpha;
            _plane.update(temp.a);
            _plane.fade = alpha
        };
        tl.add(temp, {
            a: 96
        }, 650, "easeInOutCubic");
        tl.add(_plane.object3D.scale, {
            x: s,
            y: s,
            z: s
        }, 650, "easeInOutCubic");
        tl.add(_plane.object3D.position, {
            x: 0,
            y: isDetail ? -4 : 0,
            z: 0
        }, 500, "easeInOutQuad");
        tl.add(_plane.object3D.rotation, {
            x: 1.54,
            y: 6.28,
            z: 3.14
        }, 700, "easeInOutQuad");
        return tl
    };
    this.initFolding = function() {
        _plane.update(0);
        AudioController.trigger("paper_loop_start")
    };
    this.teaseFold = function(t) {
        var temp = {
            a: _plane.frame
        };
        var onUpdate = function() {
            _plane.update(temp.a)
        };
        AudioController.trigger("hint");
        _teaseTwn = TweenManager.tween(temp, {
            a: t + 2
        }, 200, "easeOutCubic", function() {
            _teaseTwn = TweenManager.tween(temp, {
                a: t + 1
            }, 100, "easeInOutCubic", function() {
                _teaseTwn = TweenManager.tween(temp, {
                    a: t + 2
                }, 100, "easeInOutCubic", function() {
                    _teaseTwn = TweenManager.tween(temp, {
                        a: t
                    }, 200, "easeInOutCubic", function() {}, onUpdate)
                }, onUpdate)
            }, onUpdate)
        }, onUpdate)
    };
    this.updateFold = function(t) {
        if (_teaseTwn && _teaseTwn.stop) {
            _teaseTwn.stop()
        }
        _plane.update(t);
        AudioController.trigger("paper_mod", t - _lastTime);
        _lastTime = t
    };
    this.completeFold = function(callback, duration, ease) {
        var temp = {
            a: _plane.frame
        };
        var onUpdate = function(alpha) {
            _plane.update(temp.a);
            _plane.fade = 1 - alpha
        };
        _foldTwn = TweenManager.tween(temp, {
            a: 91
        }, duration || 2000, ease || "easeOutCubic", function() {
            if (typeof callback == "function") {
                callback()
            }
        }, onUpdate);
        AudioController.trigger("fold_last");
        AudioController.trigger("paper_loop_stop")
    };
    this.toThrowPosition = function() {
        var temp = {
            a: 0
        };
        var onUpdate = function(e) {
            _swayStrength = e
        };
        TweenManager.tween(temp, {
            a: 1
        }, 500, "easeInOutCubic", null, onUpdate);
        TweenManager.tween(_plane.object3D.rotation, {
            x: 1.54,
            y: 6.28,
            z: 2
        }, 1000, "easeInOutQuad")
    };
    this.throwPlane = function(callback) {
        TweenManager.tween(_plane.object3D.position, {
            y: 100
        }, 1000, "easeOutCubic", callback)
    };
    this.animateInNewPlane = function(callback) {
        _plane.update(0);
        _swayStrength = 0;
        var s = 1.4;
        callback();
        _plane.object3D.scale.set(s * 2, s * 2, s * 2);
        _plane.object3D.position.set(0, 0, 0);
        _plane.object3D.rotation.set(1.54, 6.28, 3.14);
        TweenManager.tween(_plane.object3D.scale, {
            x: s,
            y: s,
            z: s
        }, 1500, "easeOutExpo", 100)
    };
    this.toInitialDetailPosition = function() {
        var s = 0.9;
        _plane.object3D.scale.set(s, s, s);
        _plane.object3D.rotation.set(0.15, 5.3, 0.4);
        _plane.object3D.position.set(0, 6, 0)
    };
    this.toDetailInactive = function() {
        TweenManager.tween(_plane.object3D.position, {
            y: 31
        }, 650, "slideInOut")
    };
    this.toDetailActive = function(callback) {
        TweenManager.tween(_plane.object3D.position, {
            y: 6
        }, 800, "slideInOut", callback)
    };
    this.toDetailOpenPosition = function() {
        TweenManager.tween(_plane.object3D.position, {
            y: 1
        }, 500, "easeInOutCubic")
    };
    this.closeDetail = function(callback) {
        _plane.update(96);
        var temp = {
            a: _plane.frame
        };
        var onUpdate = function(e) {
            _swayStrength = e;
            _plane.update(temp.a)
        };
        TweenManager.tween(temp, {
            a: 91
        }, 1000, "easeInOutCubic", callback, onUpdate);
        var s = 0.9;
        TweenManager.tween(_plane.object3D.scale, {
            x: s,
            y: s,
            z: s
        }, 1000, "easeInOutCubic");
        TweenManager.tween(_plane.object3D.rotation, {
            x: 0.15,
            y: 5.3,
            z: 0.4
        }, 1000, "easeInOutCubic");
        TweenManager.tween(_plane.object3D.position, {
            y: 6
        }, 1000, "easeInOutCubic");
        AudioController.trigger("fold_last")
    };
    this.flip = function(isFlipped) {
        TweenManager.tween(_plane.flipContainer.rotation, {
            x: isFlipped ? Math.PI : 0
        }, 700, "easeInOutCubic");
        TweenManager.tween(_plane.object3D.rotation, {
            z: isFlipped ? 1.1 : 2
        }, 700, "easeInOutCubic")
    };
    this.onDestroy = function() {
        _catchTweens.forEach(function(tween) {
            if (tween && tween.stop) {
                tween.stop()
            }
        });
        if (_centerTwn && _centerTwn.stop) {
            _centerTwn.stop()
        }
        if (_teaseTwn && _teaseTwn.stop) {
            _teaseTwn.stop()
        }
        if (_foldTwn && _foldTwn.stop) {
            _foldTwn.stop()
        }
        Render.stop(loop)
    }
});
Class(function PlaneFold(_plane, _animation, _stamp, _isShort) {
    Inherit(this, Component);
    var _this = this;
    var _folding, _current, _tease, _prompt, _promptTween, _teaseTimeout;
    var _keys = [0, 10, 20, 30, 40, 50];
    if (_isShort) {
        _keys = _keys.slice(0, -3)
    }(function() {
        initFold();
        initPrompt();
        initUI();
        addHandlers()
    })();

    function initFold() {
        _folding = _this.initClass(FoldMechanic);
        _current = 0;
        _animation.initFolding();
        _this.delayedCall(startTeasing, 500, _current)
    }

    function initPrompt() {
        var geometry = new THREE.PlaneBufferGeometry(2.5, 2.5);
        geometry.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI / 2));
        var material = new THREE.MeshBasicMaterial({
            map: Utils3D.getTexture("assets/images/icons/circle.png"),
            transparent: true,
            opacity: 0
        });
        _prompt = new THREE.Mesh(geometry, material);
        _prompt.position.set(9.5, 5, -13.7);
        _plane.mesh.add(_prompt);
        _promptTween = TweenManager.tween(_prompt.material, {
            opacity: 1
        }, 500, "easeOutCubic", 500)
    }

    function removePrompt() {
        _plane.mesh.remove(_prompt);
        _prompt.geometry.dispose();
        _prompt.material.dispose();
        _prompt = null
    }

    function initUI() {
        UIMobile.instance().instructions.update("START_FOLD")
    }

    function addHandlers() {
        _folding.onUpdate = onUpdate;
        _folding.onEnd = onEnd;
        _folding.onClick = onClick
    }

    function onUpdate(e) {
        var frame = (_keys[_current + 1] - _keys[_current]) * e + _keys[_current];
        frame = Math.max(_keys[_current], Math.min(_keys[_current + 1], frame));
        if (Math.abs(frame - _keys[_current]) > 0.001) {
            _animation.updateFold(frame);
            if (!_this.startFolding) {
                _promptTween = TweenManager.tween(_prompt.material, {
                    opacity: 0
                }, 500, "easeOutCubic", removePrompt)
            }
            _this.startFolding = true
        }
    }

    function onEnd(isComplete) {
        if (!isComplete) {
            if (_teaseTimeout) {
                clearTimeout(_teaseTimeout)
            }
            _teaseTimeout = _this.delayedCall(startTeasing, 2000, _current);
            return
        }
        _this.delayedCall(function() {
            if (_current + 1 == _keys.length - 1) {
                _folding = _folding.destroy();
                _animation.completeFold(function() {
                    if (typeof _this.onComplete == "function") {
                        _this.onComplete()
                    }
                }, _isShort ? 3000 : null, _isShort ? null : null);
                UIMobile.instance().instructions.animateOut();
                return
            }
            _current++;
            _animation.updateFold(_keys[_current]);
            _folding.next();
            _this.delayedCall(startTeasing, 200, _current);
            if (!_this.madeFirstFold) {
                _this.madeFirstFold = true;
                if (typeof _this.onStart == "function") {
                    _this.onStart()
                }
                UIMobile.instance().instructions.update("KEEP_FOLD")
            }
        }, 300)
    }

    function onClick(e) {
        if (_stamp && _stamp.addStamp) {
            _stamp.addStamp(e)
        }
    }

    function startTeasing(current) {
        if (Math.abs(_plane.frame - _keys[current]) > 0.002) {
            return
        }
        _animation.teaseFold(_keys[current]);
        _teaseTimeout = _this.delayedCall(startTeasing, 2000, current)
    }
    this.onDestroy = function() {
        if (_promptTween && _promptTween.stop) {
            _promptTween.stop()
        }
        if (_prompt) {
            removePrompt()
        }
        if (_tease) {
            clearTimeout(_tease)
        }
    }
});
Class(function PlanePinch(_tl, _isDetail) {
    Inherit(this, Component);
    var _this = this;
    var _pinch;
    var _elapsedTarget = 0;
    var _debug;
    var _lastPercent = 0;
    var _threshold = 0.3;
    (function() {
        initPinch();
        addHandlers();
        Render.start(loop)
    })();

    function initPinch() {
        _pinch = _this.initClass(PinchMechanism);
        _pinch.max = 300;
        _pinch.start();
        AudioController.trigger("paper_loop_start")
    }

    function loop() {
        _elapsedTarget = _pinch.percent;
        _tl.elapsed += (_elapsedTarget - _tl.elapsed) * 0.2;
        AudioController.trigger("paper_mod", (_elapsedTarget - _lastPercent) * 10);
        _lastPercent = _elapsedTarget;
        _tl.update();
        if (_tl.elapsed > 0.001 && !_this.startPinching) {
            _this.startPinching = true;
            if (typeof _this.onStart == "function") {
                _this.onStart()
            }
        }
        if (_isDetail) {
            if (_this.startPinching && _tl.elapsed < 0.001) {
                _this.startPinching = false;
                if (typeof _this.onClose == "function") {
                    _this.onClose()
                }
            }
            return
        }
        if (_tl.elapsed > 0.99) {
            Render.stop(loop);
            if (typeof _this.onComplete == "function") {
                _this.onComplete()
            }
        }
    }

    function addHandlers() {
        _pinch.events.add(HydraEvents.COMPLETE, pinchSnap);
        _debug = function(e) {
            if (e.keyCode == 32) {
                __window.unbind("keydown", _debug);
                _pinch.stop();
                _pinch.snapTo(1, 1000)
            }
        };
        __window.bind("keydown", _debug)
    }

    function pinchSnap(force) {
        var to = typeof force == "number" ? force : _isDetail ? (_pinch.percent > _threshold ? 1 : 0) : 1;
        var time = Math.max(0.01, Math.abs(_pinch.percent - to) * 1000);
        _pinch.snapTo(to, time);
        _threshold = to == 1 ? 0.7 : 0.3;
        if (to == 1 && !_isDetail) {
            _pinch.stop()
        }
        AudioController.trigger("paper_loop_stop")
    }
    this.snap = pinchSnap;
    this.onDestroy = function() {
        __window.unbind("keydown", _debug);
        Render.stop(loop)
    }
});
Class(function PlaneScaling(_plane, _shadow) {
    Inherit(this, Component);
    var _this = this;
    var _scale, _scalePrompt, _sub, _initialRot;
    var _accel = Mobile.Accelerometer;
    var _prompts = [];
    var _deviceRotation = new Vector3();
    var _planeRotation = new Vector3();
    var _lastScale = new Vector3();
    (function() {
        initScaling();
        initPrompts();
        initUI();
        addHandlers()
    })();

    function initScaling() {
        _scale = _this.initClass(ScaleMechanic);
        AudioController.trigger("paper_loop_start")
    }

    function initPrompts() {
        var geometry = new THREE.PlaneBufferGeometry(2.3, 2.3);
        geometry.applyMatrix(new THREE.Matrix4().makeRotationY(-Math.PI / 2));
        var material = new THREE.MeshBasicMaterial({
            map: Utils3D.getTexture("assets/images/icons/circle.png"),
            transparent: true
        });
        [
            [0, 0, -14.8],
            [-5.5, 5.3, 15.5]
        ].forEach(function(p) {
            var prompt = new THREE.Mesh(geometry, material);
            prompt.position.set(p[0], p[1], p[2]);
            _plane.mesh.add(prompt);
            _prompts.push(prompt)
        })
    }

    function initUI() {
        _scalePrompt = UIMobile.instance().createScalePrompt();
        UIMobile.instance().instructions.update("SCALE", 30, true)
    }

    function loop() {}

    function addHandlers() {
        _scalePrompt.events.subscribe(HydraEvents.COMPLETE, complete);
        _scale.onUpdate = onUpdate
    }

    function onUpdate(axis, value) {
        _plane.mesh.scale[axis] = value;
        var vol = Math.abs(_plane.mesh.scale.lengthSq() - _lastScale.lengthSq());
        vol = Math.min(1, vol * 10);
        AudioController.trigger("paper_mod", vol);
        _lastScale = _plane.mesh.scale.clone();
        _prompts.forEach(function(prompt) {
            prompt.scale[axis] = 1 / value
        });
        _shadow.object3D.scale[axis == "z" ? "y" : "x"] = value
    }

    function complete() {
        _prompts[0].geometry.dispose();
        _prompts[0].material.dispose();
        _prompts.forEach(function(prompt) {
            _plane.mesh.remove(prompt)
        });
        AudioController.trigger("paper_loop_stop");
        if (typeof _this.onComplete == "function") {
            _this.onComplete()
        }
    }
    this.onDestroy = function() {}
});
Class(function PlaneStamp(_plane) {
    Inherit(this, Component);
    var _this = this;
    (function() {
        initUI();
        addHandlers()
    })();

    function initUI() {
        UIMobile.instance().instructions.update("STAMP")
    }

    function addHandlers() {
        Stage.bind("touchstart", addStamp)
    }

    function addStamp(e) {
        var stageRatio = Stage.width / Stage.height;
        var paperRatio = 210 / 297;
        var ratioDiff = stageRatio / paperRatio;
        var h = 0.62;
        var w = h / ratioDiff;
        var y = (e.y - Stage.height * ((1 - h) * 0.5)) / (Stage.height * h);
        var x = (e.x - Stage.width * ((1 - w) * 0.5)) / (Stage.width * w);
        if (y < 0 || y > 1) {
            return
        }
        if (y < 0.2 && x > 0.7) {
            return
        }
        Stage.unbind("touchstart", addStamp);
        y = Math.max(0.1, Math.min(0.9, y));
        x = Math.max(0.16, Math.min(0.84, x));
        _plane.stamp.addStamp(x, y, _this.hasStamped);
        AudioController.trigger("stamp_down");
        if (e.type == "touchstart") {
            Stage.bind("touchend", onStampUp)
        } else {
            _this.delayedCall(function() {
                AudioController.trigger("stamp_up")
            }, Utils.doRandom(60, 300))
        }
        if (!_this.hasStamped && typeof _this.onComplete == "function") {
            _this.onComplete()
        }
        _this.hasStamped = true
    }

    function onStampUp(e) {
        AudioController.trigger("stamp_up");
        Stage.unbind("touchend", onStampUp)
    }
    this.addStamp = addStamp;
    this.onDestroy = function() {
        Stage.unbind("touchstart", addStamp);
        Stage.unbind("touchend", onStampUp)
    }
});
Class(function PlaneThrow(_plane, _animation, _shadow, _isRethrow) {
    Inherit(this, Component);
    var _this = this;
    var _accel, _throwPrompt, _flipPrompt, _flipToggle;
    var _shake = {
        x: 0,
        y: 0,
        z: 0
    };
    var _hold = 0;
    var _debug;
    (function() {
        initUI();
        initAccel();
        addHandlers();
        Render.start(loop)
    })();

    function initUI() {
        UIMobile.instance().instructions.update("THROW", 30, true);
        UIMobile.instance().instructions.subText("THROW_SUB", 45, true);
        _throwPrompt = UIMobile.instance().createThrowPrompt();
        _flipPrompt = UIMobile.instance().createFlipPrompt()
    }

    function initAccel() {
        _accel = Mobile.Accelerometer;
        _accel.capture()
    }

    function loop() {
        ["x", "y", "z"].forEach(function(axis) {
            var amount = Utils.range(_accel[axis], -18, 18, -50, 50);
            _shake[axis] += (amount - _shake[axis]) * 0.04
        });
        _hold += ((_this.isTouching ? 0.8 : 0.3) - _hold) * 0.1;
        _animation.swayStrength = 1 - _hold * 0.9;
        var m = 1 - _hold * 0.5;
        _plane.object3D.position.set(m * _shake.x + _hold * 5, m * _shake.y, m * _shake.z);
        _shadow.updateFade(_plane.object3D.position.x);
        _shadow.mesh.position.y = _plane.object3D.position.y
    }

    function addHandlers() {
        Stage.bind("touchstart", onDown);
        Stage.bind("touchend", onUp);
        Stage.bind("touchcancel", onUp);
        _flipPrompt.events.add(HydraEvents.COMPLETE, flip);
        _this.events.subscribe(ThrowMechanic.THROW, throwPlane);
        _debug = function(e) {
            if (e.keyCode == 32) {
                __window.unbind("keydown", _debug);
                throwPlane()
            }
        };
        __window.bind("keydown", _debug)
    }

    function onDown(e) {
        if (e.path && _flipPrompt && _flipPrompt.element && e.path.indexOf(_flipPrompt.element.div) !== -1) {
            return
        }
        _this.isTouching = true;
        if (!ThrowMechanic.HAS_MOTION) {
            throwPlane()
        }
    }

    function onUp(e) {
        if (e.touches.length === 0) {
            _this.isTouching = false
        }
    }

    function throwPlane() {
        GATracker.trackEvent("plane", "throw", "throw plane", 1);
        Mobile.vibrate(100);
        UIMobile.instance().instructions.animateOut();
        UIMobile.instance().removeThrowPrompt();
        UIMobile.instance().removeFlipPrompt();
        Render.stop(loop);
        _this.events.unsubscribe(ThrowMechanic.THROW, throwPlane);
        _shadow.throwShadow(_flipToggle);
        _animation.throwPlane(function() {
            if (typeof _this.onComplete == "function") {
                _this.onComplete()
            }
        });
        var coords = PlaneStampTexture.DATA.coords;
        var color = PlaneStampTexture.DATA.color;
        var scale = {
            x: _plane.mesh.scale.x,
            z: _plane.mesh.scale.z
        };
        var location = PlaneStampTexture.DATA.address + ", " + (PlaneStampTexture.DATA.country_name || PlaneStampTexture.DATA.country);
        Data.Planes.throwPlane({
            id: Utils.timestamp(),
            coords: coords,
            color: color,
            scale: scale,
            location: location
        }, _isRethrow);
        AudioController.trigger("throw")
    }

    function flip() {
        _flipToggle = !_flipToggle;
        _animation.flip(_flipToggle);
        _throwPrompt.flip(_flipToggle);
        _flipPrompt.flip(_flipToggle);
        _shadow.flip()
    }
    this.onDestroy = function() {
        Stage.unbind("touchstart", onDown);
        Stage.unbind("touchend", onUp);
        Stage.unbind("touchcancel", onUp);
        UIMobile.instance().removeFlipPrompt();
        UIMobile.instance().removeThrowPrompt();
        Render.stop(loop);
        __window.unbind("keydown", _debug)
    }
});
Class(function PlaneShadow() {
    Inherit(this, Component);
    var _this = this;
    var _mesh, _tween;
    (function() {
        if (PlaneShadow.OBJECT3D) {
            _this.object3D = PlaneShadow.OBJECT3D
        } else {
            _this.object3D = new THREE.Object3D();
            PlaneShadow.MESH = _this.object3D;
            initMesh()
        }
        _mesh.position.set(0, -2, 3);
        _this.object3D.scale.set(1, 1, 1);
        _this.object3D.position.set(8, -1, 0)
    })();

    function initMesh() {
        var geometry = new THREE.PlaneBufferGeometry(5, 60);
        geometry.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI));
        var material = new THREE.MeshBasicMaterial({
            map: Utils3D.getTexture("assets/images/plane/shadow.png"),
            transparent: true,
            opacity: 0
        });
        _mesh = new THREE.Mesh(geometry, material);
        _this.object3D.add(_mesh)
    }
    this.get("mesh", function() {
        return _mesh
    });
    this.animateIn = function() {
        _this.isAnimating = true;
        World.instance().scene.add(_this.object3D);
        _tween = TweenManager.tween(_mesh.material, {
            opacity: 0.15
        }, 500, "easeOutCubic", 500, function() {
            _this.isAnimating = false
        })
    };
    this.updateFade = function(value) {
        if (_this.isAnimating) {
            return
        }
        value = Utils.range(value, -1, 7, 0, 1);
        _mesh.material.opacity = value * 0.3 + 0.15;
        _mesh.scale.y = 1 - value * 0.2;
        _mesh.scale.x = 1 - value * 0.2
    };
    this.throwShadow = function(isFlipped) {
        _this.isAnimating = true;
        _tween = TweenManager.tween(_this.object3D.position, {
            y: isFlipped ? -80 : 80
        }, 1000, "easeOutCubic", function() {
            World.instance().scene.remove(_this.object3D)
        })
    };
    this.flip = function() {
        var initialX = _this.object3D.scale.x;
        var initialY = _this.object3D.scale.y;
        _tween = TweenManager.tween(_this.object3D.scale, {
            x: 3,
            y: 0.2
        }, 350, "easeInCubic", function() {
            _tween = TweenManager.tween(_this.object3D.scale, {
                x: initialX,
                y: initialY
            }, 350, "easeOutCubic")
        })
    };
    this.onDestroy = function() {
        if (_tween && _tween.stop) {
            _tween.stop()
        }
        World.instance().scene.remove(_this.object3D)
    }
});
Class(function PlaneStampTexture() {
    Inherit(this, Component);
    var _this = this;
    var _stampTexture, _s, _canvas, _finalSize, _finalCanvas, _context;
    var _stylesList, _stylesSelection;
    var _colors = Config.STAMPS_COLORS;
    var _colorCount = Utils.doRandom(0, _colors.length - 1);
    var _styleCount = 0;
    var _canvases = [];
    (function() {
        initTexture();
        initStyles()
    })();

    function initTexture() {
        _s = 4;
        _canvas = new Canvas(210 * _s, 297 * _s);
        _finalSize = 1024;
        _finalCanvas = new Canvas(_finalSize, _finalSize);
        _context = _finalCanvas.context;
        _stampTexture = new THREE.Texture(_finalCanvas.div);
        _stampTexture.needsUpdate = true;
        _this.canStamp = true
    }

    function initStyles() {
        _stylesList = [_this.initClass(PeaceDayStamp, _s), _this.initClass(PeaceDayStamp, _s), _this.initClass(StampStyle1, _s), _this.initClass(StampStyle3, _s), _this.initClass(StampStyle4, _s), _this.initClass(StampStyle5, _s), _this.initClass(StampStyle6, _s), _this.initClass(SpecialStamp, _s), _this.initClass(SpecialStamp, _s), ];
        var stylesPool = [];
        var populatePool = function(e, i) {
            if (Tests.PEACE_DAY()) {
                if (i < 2) {
                    stylesPool.push(i)
                }
            } else {
                if (i > 1) {
                    stylesPool.push(i)
                }
            }
        };
        _stylesList.forEach(populatePool);
        _stylesSelection = [];
        var isSpecial = false;
        _colors.forEach(function() {
            var random = Utils.doRandom(0, stylesPool.length - (isSpecial ? 2 : 1));
            isSpecial = stylesPool[random] > 8;
            var styleIndex = stylesPool.splice(random, 1)[0];
            _stylesSelection.push(styleIndex);
            if (stylesPool.length == 1 && stylesPool[0] > 8) {
                stylesPool.splice(0, 1)
            }
            if (stylesPool.length === 0) {
                _stylesList.forEach(populatePool);
                stylesPool.splice(Tests.AT_IO() ? styleIndex : styleIndex - 4, 1)
            }
        })
    }
    this.get("texture", function() {
        return _stampTexture
    });
    this.render = function() {
        _context.clearRect(0, 0, _finalSize, _finalSize);
        _context.save();
        _context.scale(1, -1);
        _canvases.forEach(function(canvas) {
            if (!canvas.alreadyRendered) {
                canvas.render()
            }
            _context.drawImage(canvas.div, 0, 0, canvas.width, canvas.height, 0, -_finalSize, _finalSize, _finalSize)
        });
        _context.restore();
        _stampTexture.needsUpdate = true;
        _this.canStamp = true
    };
    this.addStamp = function(x, y, isReplace) {
        if (!_this.canStamp) {
            return
        }
        _this.canStamp = false;
        if (isReplace) {
            _canvases.pop();
            var child = _canvas.children.pop();
            if (child.destroy) {
                child.destroy()
            }
        }
        var styleIndex = _stylesSelection[_styleCount % _stylesSelection.length];
        var style = _stylesList[styleIndex];
        var colorIndex = _colorCount % _colors.length;
        var color = _colors[colorIndex];
        var rotation = Utils.doRandom(-30, 30);
        var location = Data.User.getLocation();
        var address = location.city.capitalize() + (location.region.length ? ", " + location.region.toUpperCase() : "");
        var date = DateUtil.getDate();
        GATracker.trackEvent("plane", "stamp", "plane stamp", 1);
        var country = location.country.toUpperCase();
        if (country == "US") {
            country = "USA"
        }
        if (country == "CA") {
            country = "CAN"
        }
        if (country == "AU") {
            country = "AUS"
        }
        PlaneStampTexture.DATA = {
            position: {
                x: x,
                y: y
            },
            rotation: rotation,
            color: color,
            style: styleIndex,
            image: null,
            date: date.numeric,
            address: address,
            country: country,
            country_name: location.country_name,
            coords: Data.User.getCoords(),
        };
        style.addStamp(_canvas, PlaneStampTexture.DATA, function(graphics) {
            _canvases.push(_canvas);
            _canvas.add(graphics);
            _this.render();
            if (typeof _this.onStamp == "function") {
                _this.onStamp(PlaneStampTexture.DATA)
            }
        });
        _colorCount++;
        _styleCount++
    };
    this.addStamps = function(data) {
        if (!data) {
            return
        }
        _canvas.children.forEach(function(child) {
            if (child.destroy) {
                child.destroy()
            }
        });
        _canvas.children = [];
        _canvases = [];
        _this.delayedCall(function() {
            data.forEach(function(d, i) {
                if (i > data.length - 20) {
                    _this.addOldStamp(d)
                }
            })
        }, 500)
    };
    this.addOldStamp = function(data) {
        if (data.style == undefined || data.style >= _stylesList.length) {
            return
        }
        var style = _stylesList[data.style];
        var canvas = _this.initClass(Canvas, 210 * _s, 297 * _s);
        _canvases.push(canvas);
        style.addStamp(canvas, data, function(graphics) {
            _this.delayedCall(function() {
                canvas.add(graphics);
                canvas.render();
                canvas.alreadyRendered = true;
                _this.render()
            }, Utils.doRandom(0, 250))
        })
    };
    this.clearStamps = function() {
        _canvases = [];
        _canvas.children.forEach(function(child) {
            if (child.destroy) {
                child.destroy()
            }
        });
        _canvas.children = [];
        _this.render()
    }
});
Class(function IOStamp1(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();

    function drawArcText(str, size, bottom, offset) {
        str = str.toUpperCase();
        var gap = Math.PI * 1;
        var angle = bottom ? -gap : gap;
        var canvas = new Canvas(size * 2, size * 2);
        var textSize = bottom ? 4.2 : 5;
        textSize *= 1.6;
        var context = canvas.context;
        context.font = "bold " + textSize * _s + "pt roboto";
        context.fillStyle = "#000";
        context.textAlign = "center";
        context.save();
        context.translate(size, size);
        if (bottom) {
            context.rotate(gap * 0.5 + str.length * 0.1)
        } else {
            context.rotate(Math.PI * 0.25)
        }
        var dir = bottom ? 1 : -1;
        context.rotate(dir * angle / 2);
        context.rotate(dir * (angle / 16) / 2);
        for (var n = 0; n < str.length; n++) {
            var a = angle / 16;
            var x = dir * size * 0.75;
            if (str[n] == "." || str[n] == "," || str[n] == " " || _this.shortenNext) {
                a *= 0.8;
                if (str[n - 1] && str[n - 1] == ",") {
                    a *= 0.5
                }
                _this.shortenNext = !_this.shortenNext
            }
            context.rotate(a);
            context.save();
            context.translate(0, x);
            var chr = str[n];
            context.fillText(chr, 0, 0);
            context.restore()
        }
        context.restore();
        return canvas.div
    }
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var mask = new CanvasGraphics();
        var num = Utils.doRandom(0, 9);
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.src = Images.getProxyPath("assets/images/stamps/io/0.png");
        img.onload = function() {
            var image = new CanvasTexture(img, 360, 360);
            image.x = -180;
            image.y = -180;
            mask.add(image);
            var date = new CanvasTexture(drawArcText(data.date, 200, false), 240, 240);
            date.x = -120;
            date.y = -120;
            mask.add(date);
            var location = new CanvasTexture(drawArcText(data.address, 200, true), 280, 280);
            location.x = -140;
            location.y = -140;
            mask.add(location);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(mask);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function IOStamp2(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var num = Utils.doRandom(0, 9);
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.src = Images.getProxyPath("assets/images/stamps/io/1.png");
        img.onload = function() {
            var date = new CanvasGraphics();
            date.font = "bold " + 7 * _s + "pt roboto";
            date.textAlign = "center";
            date.fillStyle = "#000";
            date.textBaseline = "middle";
            date.fillText(data.date.toUpperCase(), 0, -80);
            graphics.add(date);
            var locations = ["Los Angeles, CA", "Mountain View, CA", "Some long ass name awd awdawda awd", "short"];
            var text = data.address;
            var address = new CanvasGraphics();
            var size = Utils.convertRange(text.length, 5, 40, 6, 1);
            address.font = "bold " + size * _s + "pt roboto";
            address.textAlign = "center";
            address.fillStyle = "#000";
            address.textBaseline = "middle";
            address.fillText(text.toUpperCase(), 0, 85);
            graphics.add(address);
            var image = new CanvasTexture(img, 380, 380);
            image.x = -190;
            image.y = -190;
            image.roataion = data.rotation;
            graphics.add(image);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function IOStamp3(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var num = Utils.doRandom(0, 9);
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.src = Images.getProxyPath("assets/images/stamps/io/2.png");
        img.onload = function() {
            var date2 = new CanvasGraphics();
            date2.font = "bold " + 4 * _s + "pt roboto";
            date2.textAlign = "center";
            date2.fillStyle = "#000";
            date2.textBaseline = "middle";
            date2.rotation = 90;
            date2.fillText(data.date.toUpperCase(), 0, -125);
            graphics.add(date2);
            var locations = ["Los Angeles, CA", "Mountain View, CA", "Some long ass name awd awdawda awd", "short"];
            var text = data.address;
            var address = new CanvasGraphics();
            var size = Utils.convertRange(text.length, 5, 40, 6, 1);
            address.font = "bold " + size * _s + "pt roboto";
            address.textAlign = "center";
            address.fillStyle = "#000";
            address.textBaseline = "middle";
            address.fillText(text.toUpperCase(), 0, 60);
            graphics.add(address);
            var image = new CanvasTexture(img, 360, 360);
            image.x = -180;
            image.y = -180;
            image.roataion = data.rotation;
            graphics.add(image);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function IOStamp4(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var num = Utils.doRandom(0, 9);
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.src = Images.getProxyPath("assets/images/stamps/io/3.png");
        img.onload = function() {
            var date = new CanvasGraphics();
            date.font = "bold " + 5 * _s + "pt roboto";
            date.textAlign = "center";
            date.fillStyle = "#000";
            date.textBaseline = "middle";
            date.fillText(data.date.toUpperCase(), 0, -35);
            graphics.add(date);
            var locations = ["Los Angeles, CA", "Mountain View, CA", "Some long ass name awd awdawda awd", "short"];
            var text = data.address;
            var address = new CanvasGraphics();
            var size = Utils.convertRange(text.length, 5, 40, 6, 1);
            address.font = "bold " + size * _s + "pt roboto";
            address.textAlign = "center";
            address.fillStyle = "#000";
            address.textBaseline = "middle";
            address.fillText(text.toUpperCase(), 0, -70);
            graphics.add(address);
            var image = new CanvasTexture(img, 380, 380);
            image.x = -190;
            image.y = -190;
            image.roataion = data.rotation;
            graphics.add(image);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function PeaceDayStamp(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();

    function drawArcText(str, size, bottom, offset) {
        str = str.toUpperCase();
        var gap = Math.PI * 0.6;
        var angle = bottom ? -gap : gap;
        var canvas = new Canvas(size * 2, size * 2);
        var textSize = bottom ? 4.4 : 5.2;
        var context = canvas.context;
        context.font = "bold " + textSize * _s + "pt roboto";
        context.fillStyle = "#000";
        context.textAlign = "center";
        context.save();
        context.translate(size, size);
        if (bottom) {
            context.rotate(gap * 0.5 + str.length * 0.055)
        } else {
            context.rotate(offset ? Math.PI * 0.38 : Math.PI * 0.12)
        }
        var dir = bottom ? 1 : -1;
        context.rotate(dir * angle / 2);
        context.rotate(dir * (angle / 16) / 2);
        for (var n = 0; n < str.length; n++) {
            var a = angle / 16;
            var x = dir * size * 0.75;
            if (str[n] == "." || str[n] == "," || str[n] == "|" || str[n] == " " || _this.shortenNext) {
                a *= 0.8;
                if (str[n - 1] && str[n - 1] == ",") {
                    a *= 0.5
                }
                if (str[n] !== "|") {
                    _this.shortenNext = !_this.shortenNext
                }
            }
            context.rotate(a);
            context.save();
            context.translate(0, x);
            var chr = str[n];
            context.fillText(chr, 0, 0);
            context.restore()
        }
        context.restore();
        return canvas.div
    }
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var mask = new CanvasGraphics();
        var img = new Image();
        img.crossOrigin = "anonymous";
        Global.PEACE_STAMP_COUNT++;
        if (Global.PEACE_STAMP_COUNT > 4) {
            Global.PEACE_STAMP_COUNT = 0
        }
        img.src = Images.getProxyPath("assets/images/stamps/peace/" + (typeof data.image == "number" ? data.image : Global.PEACE_STAMP_COUNT) + ".png");
        if (PlaneStampTexture.DATA && typeof PlaneStampTexture.DATA.image !== "number") {
            PlaneStampTexture.DATA.image = Global.PEACE_STAMP_COUNT
        }
        img.onload = function() {
            var image = new CanvasTexture(img, 350, 350);
            image.x = -175;
            image.y = -179;
            mask.add(image);
            var date = new CanvasTexture(drawArcText(data.date + " " + data.country, 200, false, false), 400, 400);
            date.x = -200;
            date.y = -200;
            mask.add(date);
            var location = new CanvasTexture(drawArcText("International Day of Peace", 200, true), 440, 440);
            location.x = -220;
            location.y = -220;
            mask.add(location);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(mask);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function SpecialStamp(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();

    function drawArcText(str, size, bottom, offset) {
        str = str.toUpperCase();
        var gap = Math.PI * 0.6;
        var angle = bottom ? -gap : gap;
        var canvas = new Canvas(size * 2, size * 2);
        var textSize = bottom ? 4.4 : 5.2;
        var context = canvas.context;
        context.font = "bold " + textSize * _s + "pt roboto";
        context.fillStyle = "#000";
        context.textAlign = "center";
        context.save();
        context.translate(size, size);
        if (bottom) {
            context.rotate(gap * 0.5 + str.length * 0.055)
        } else {
            context.rotate(offset ? Math.PI * 0.38 : Math.PI * 0.12)
        }
        var dir = bottom ? 1 : -1;
        context.rotate(dir * angle / 2);
        context.rotate(dir * (angle / 16) / 2);
        for (var n = 0; n < str.length; n++) {
            var a = angle / 16;
            var x = dir * size * 0.75;
            if (str[n] == "." || str[n] == "," || str[n] == "|" || str[n] == " " || _this.shortenNext) {
                a *= 0.8;
                if (str[n - 1] && str[n - 1] == ",") {
                    a *= 0.5
                }
                if (str[n] !== "|") {
                    _this.shortenNext = !_this.shortenNext
                }
            }
            context.rotate(a);
            context.save();
            context.translate(0, x);
            var chr = str[n];
            context.fillText(chr, 0, 0);
            context.restore()
        }
        context.restore();
        return canvas.div
    }
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var mask = new CanvasGraphics();
        var img = new Image();
        img.crossOrigin = "anonymous";
        Global.SPECIAL_STAMP_COUNT++;
        if (Global.SPECIAL_STAMP_COUNT > 9) {
            Global.SPECIAL_STAMP_COUNT = 0
        }
        img.src = Images.getProxyPath("assets/images/stamps/special/" + (typeof data.image == "number" ? data.image : Global.SPECIAL_STAMP_COUNT) + ".png");
        if (PlaneStampTexture.DATA && typeof PlaneStampTexture.DATA.image !== "number") {
            PlaneStampTexture.DATA.image = Global.SPECIAL_STAMP_COUNT
        }
        img.onload = function() {
            var image = new CanvasTexture(img, 350, 350);
            image.x = -175;
            image.y = -179;
            mask.add(image);
            var date = new CanvasTexture(drawArcText(data.date, 200, false, Global.SPECIAL_STAMP_COUNT == 7), 400, 400);
            date.x = -200;
            date.y = -200;
            mask.add(date);
            var location = new CanvasTexture(drawArcText(data.address + ", " + data.country, 200, true), 440, 440);
            location.x = -220;
            location.y = -220;
            mask.add(location);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(mask);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function StampStyle1(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var num = Utils.doRandom(0, 9);
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.src = Images.getProxyPath("assets/images/stamps/outlines/0.png");
        img.onload = function() {
            var date = new CanvasGraphics();
            date.font = "bold " + 6 * _s + "pt roboto";
            date.textAlign = "center";
            date.fillStyle = "#000";
            date.textBaseline = "bottom";
            date.fillText(data.date.toUpperCase(), 0, 22);
            graphics.add(date);
            var locations = ["Los Angeles, CA", "Mountain View, CA", "Some long ass name awd awdawda awd", "short"];
            var text = data.address;
            var address = new CanvasGraphics();
            var size = Utils.convertRange(text.length, 5, 40, 6, 1);
            address.font = "bold " + size * _s + "pt roboto";
            address.textAlign = "center";
            address.fillStyle = "#000";
            address.textBaseline = "top";
            address.fillText(text.toUpperCase(), 0, 20);
            graphics.add(address);
            var max = 15;
            var countryName = data.country_name && data.country_name.length < max ? data.country_name : data.country;
            var size = Utils.convertRange(countryName.length, 5, max, 9, 5);
            var country = new CanvasGraphics();
            country.font = "bold " + size * _s + "pt roboto";
            country.textAlign = "center";
            country.fillStyle = "#000";
            country.textBaseline = "bottom";
            country.fillText(countryName.toUpperCase(), 0, -22 + size);
            graphics.add(country);
            var image = new CanvasTexture(img, 340, 340);
            image.x = -170;
            image.y = -170;
            image.roataion = data.rotation;
            graphics.add(image);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function StampStyle2(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();

    function wrapText(text, x, y, maxWidth, lineHeight) {
        var canvas = new Canvas(200, 200);
        var context = canvas.context;
        context.font = "bold " + 7 * _s + "pt roboto";
        context.fillStyle = "#000";
        context.textAlign = "center";
        context.save();
        context.fillText("WADWDWDW", 0, 0);
        context.restore();
        return canvas.div
    }
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var num = Utils.doRandom(0, 9);
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.src = Images.getProxyPath("assets/images/stamps/outlines/1.png");
        img.onload = function() {
            var max = 15;
            var countryName = data.country_name && data.country_name.length < max ? data.country_name : data.country;
            var split = countryName.split(" ");
            if (split.length > 2) {
                countryName = data.country
            }
            var size = Utils.convertRange(countryName.length, 5, max, 7.5, 5);
            if (countryName.length == 2) {
                size = 11
            }
            if (split.length == 2) {
                var big = Math.max(split[0].length, split[1].length);
                size = Utils.convertRange(big, 5, max, 8, 5)
            }
            var country = new CanvasGraphics();
            country.font = "bold " + size * _s + "pt roboto";
            country.textAlign = "left";
            country.fillStyle = "#000";
            country.textBaseline = "bottom";
            country.fillText(split[0].toUpperCase(), -100, split.length > 1 ? -5 : 20);
            if (split[1]) {
                country.fillText(split[1].toUpperCase(), -100, 38)
            }
            graphics.add(country);
            var locations = ["Los Angeles, CA", "Mountain View, CA", "Some long ass name awd awdawda awd", "short"];
            var text = data.address;
            var address = new CanvasGraphics();
            var size = Utils.convertRange(text.length, 5, 40, 4.8, 1);
            address.font = "bold " + size * _s + "pt roboto";
            address.textAlign = "left";
            address.fillStyle = "#000";
            address.textBaseline = "bottom";
            address.fillText(text.toUpperCase(), -100, split.length > 1 ? 60 : 40);
            graphics.add(address);
            var image = new CanvasTexture(img, 340, 340);
            image.x = -170;
            image.y = -170;
            image.roataion = data.rotation;
            graphics.add(image);
            var date = new CanvasGraphics();
            date.font = "bold " + 4.5 * _s + "pt roboto";
            date.textAlign = "center";
            date.fillStyle = "#000";
            date.rotation = 90;
            date.textBaseline = "middle";
            date.fillText(data.date.toUpperCase(), 0, -95);
            graphics.add(date);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function StampStyle3(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var num = Utils.doRandom(0, 9);
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.src = Images.getProxyPath("assets/images/stamps/outlines/2.png");
        img.onload = function() {
            var date1 = new CanvasGraphics();
            date1.font = "bold " + 3.5 * _s + "pt roboto";
            date1.textAlign = "center";
            date1.fillStyle = "#000";
            date1.textBaseline = "middle";
            date1.rotation = -90;
            date1.fillText(data.date.toUpperCase(), 0, -145);
            graphics.add(date1);
            var date2 = new CanvasGraphics();
            date2.font = "bold " + 3.5 * _s + "pt roboto";
            date2.textAlign = "center";
            date2.fillStyle = "#000";
            date2.textBaseline = "middle";
            date2.rotation = 90;
            date2.fillText(data.date.toUpperCase(), 0, -145);
            graphics.add(date2);
            var locations = ["Los Angeles, CA", "Mountain View, CA", "Some long ass name awd awdawda awd", "short"];
            var text = data.address;
            var address = new CanvasGraphics();
            var size = Utils.convertRange(text.length, 5, 40, 6, 1);
            address.font = "bold " + size * _s + "pt roboto";
            address.textAlign = "center";
            address.fillStyle = "#000";
            address.textBaseline = "bottom";
            address.fillText(text.toUpperCase(), 0, -12);
            graphics.add(address);
            var max = 15;
            var countryName = data.country_name && data.country_name.length < max ? data.country_name : data.country;
            var size = Utils.convertRange(countryName.length, 5, max, 9, 5);
            var country = new CanvasGraphics();
            country.font = "bold " + size * _s + "pt roboto";
            country.textAlign = "center";
            country.fillStyle = "#000";
            country.textBaseline = "top";
            country.fillText(countryName.toUpperCase(), 0, 0 - size * 1.7);
            graphics.add(country);
            var image = new CanvasTexture(img, 380, 340);
            image.x = -190;
            image.y = -170;
            image.roataion = data.rotation;
            graphics.add(image);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function StampStyle4(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var num = Utils.doRandom(0, 9);
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.src = Images.getProxyPath("assets/images/stamps/outlines/4.png");
        img.onload = function() {
            var date1 = new CanvasGraphics();
            date1.font = "bold " + 4 * _s + "pt roboto";
            date1.textAlign = "center";
            date1.fillStyle = "#000";
            date1.textBaseline = "middle";
            date1.rotation = -90;
            date1.fillText(data.date.toUpperCase(), 0, -145);
            graphics.add(date1);
            var date2 = new CanvasGraphics();
            date2.font = "bold " + 4 * _s + "pt roboto";
            date2.textAlign = "center";
            date2.fillStyle = "#000";
            date2.textBaseline = "middle";
            date2.rotation = 90;
            date2.fillText(data.date.toUpperCase(), 0, -145);
            graphics.add(date2);
            var locations = ["Los Angeles, CA", "Mountain View, CA", "Some long ass name awd awdawda awd", "short"];
            var text = data.address;
            var address = new CanvasGraphics();
            var size = Utils.convertRange(text.length, 5, 40, 6, 1);
            address.font = "bold " + size * _s + "pt roboto";
            address.textAlign = "center";
            address.fillStyle = "#000";
            address.textBaseline = "middle";
            address.fillText(text.toUpperCase(), 0, -25);
            graphics.add(address);
            var max = 15;
            var countryName = data.country_name && data.country_name.length < max ? data.country_name : data.country;
            var size = Utils.convertRange(countryName.length, 5, max, 9, 5);
            var country = new CanvasGraphics();
            country.font = "bold " + size * _s + "pt roboto";
            country.textAlign = "center";
            country.fillStyle = "#000";
            country.textBaseline = "top";
            country.fillText(countryName.toUpperCase(), 0, 3 - size * 1.5);
            graphics.add(country);
            var image = new CanvasTexture(img, 380, 320);
            image.x = -190;
            image.y = -160;
            image.roataion = data.rotation;
            graphics.add(image);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function StampStyle5(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var num = Utils.doRandom(0, 9);
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.src = Images.getProxyPath("assets/images/stamps/outlines/5.png");
        img.onload = function() {
            var date1 = new CanvasGraphics();
            date1.font = "bold " + 4 * _s + "pt roboto";
            date1.textAlign = "center";
            date1.fillStyle = "#000";
            date1.textBaseline = "middle";
            date1.fillText(data.date.toUpperCase(), 0, -20);
            graphics.add(date1);
            var locations = ["Los Angeles, CA", "Mountain View, CA", "Some long ass name awd awdawda awd", "short"];
            var text = data.address;
            var address = new CanvasGraphics();
            var size = Utils.convertRange(text.length, 5, 40, 6, 1);
            address.font = "bold " + size * _s + "pt roboto";
            address.textAlign = "center";
            address.fillStyle = "#000";
            address.textBaseline = "middle";
            address.fillText(text.toUpperCase(), 0, 65);
            graphics.add(address);
            var country = new CanvasGraphics();
            country.font = "bold " + 9 * _s + "pt roboto";
            country.textAlign = "center";
            country.fillStyle = "#000";
            country.textBaseline = "middle";
            country.fillText(data.country.toUpperCase(), 0, 20);
            graphics.add(country);
            var image = new CanvasTexture(img, 400, 400);
            image.x = -200;
            image.y = -200;
            image.roataion = data.rotation;
            graphics.add(image);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function StampStyle6(_s) {
    Inherit(this, Component);
    var _this = this;
    (function() {})();

    function drawArcText(str, size, bottom, offset) {
        str = str.toUpperCase();
        if (str.length > 20) {
            str = str.slice(0, 20)
        }
        var gap = Math.PI * 0.9;
        var angle = bottom ? -gap : gap;
        var canvas = new Canvas(size * 2, size * 2);
        var textSize = bottom ? 4 : 4.6;
        textSize *= 1.6;
        var context = canvas.context;
        context.font = "bold " + textSize * _s + "pt roboto";
        context.fillStyle = "#000";
        context.textAlign = "center";
        context.save();
        context.translate(size, size);
        if (bottom) {
            context.rotate(gap * 0.5 + str.length * 0.1)
        } else {
            context.rotate(Math.PI * 0.25)
        }
        var dir = bottom ? 1 : -1;
        context.rotate(dir * angle / 2);
        context.rotate(dir * (angle / 16) / 2);
        for (var n = 0; n < str.length; n++) {
            var a = angle / 16;
            var x = dir * size * 0.75;
            if (str[n] == "." || str[n] == "," || str[n] == " " || _this.shortenNext) {
                a *= 0.8;
                if (str[n - 1] && str[n - 1] == ",") {
                    a *= 0.5
                }
                _this.shortenNext = !_this.shortenNext
            }
            context.rotate(a);
            context.save();
            context.translate(0, x);
            var chr = str[n];
            context.fillText(chr, 0, 0);
            context.restore()
        }
        context.restore();
        return canvas.div
    }
    this.addStamp = function(_canvas, data, callback) {
        var graphics = new CanvasGraphics();
        var mask = new CanvasGraphics();
        var num = Utils.doRandom(0, 9);
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.src = Images.getProxyPath("assets/images/stamps/outlines/6.png");
        img.onload = function() {
            var image = new CanvasTexture(img, 360, 360);
            image.x = -180;
            image.y = -180;
            mask.add(image);
            var date = new CanvasTexture(drawArcText(data.date, 200, false), 260, 260);
            date.x = -130;
            date.y = -130;
            mask.add(date);
            var location = new CanvasTexture(drawArcText(data.address, 200, true), 300, 300);
            location.x = -150;
            location.y = -150;
            mask.add(location);
            var country = new CanvasGraphics();
            country.font = "bold " + 11 * _s + "pt roboto";
            country.textAlign = "center";
            country.fillStyle = "#000";
            country.textBaseline = "middle";
            country.fillText(data.country.toUpperCase(), 0, -5);
            graphics.add(country);
            var color = new CanvasGraphics();
            color.blendMode = "source-in";
            color.fillStyle = data.color;
            color.fillRect(-500, -500, 1000, 1000);
            graphics.add(mask);
            graphics.add(color);
            graphics.rotation = data.rotation;
            graphics.x = data.position.x * _canvas.width;
            graphics.y = data.position.y * _canvas.height;
            callback(graphics)
        }
    }
});
Class(function PrivacyPrompt() {
    Inherit(this, View);
    var _this = this;
    var $this, $privacy;
    (function() {
        initHTML();
        style();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element;
        $privacy = $this.create(".privacy", "a")
    }

    function style() {
        $this.css({
            position: "static"
        });
        $privacy.fontStyle("Roboto", 10, "#fff");
        $privacy.css({
            right: 30,
            fontWeight: "bold",
            letterSpacing: 1,
            position: "absolute",
            textDecoration: "underline",
            bottom: 30
        });
        $privacy.div.href = "https://www.google.com/policies/privacy/";
        $privacy.div.target = "_blank";
        $privacy.text("PRIVACY");
        hide()
    }

    function addHandlers() {
        _this.events.subscribe(PlanesEvents.CONFIRMATION_HIDDEN, hide);
        _this.events.subscribe(PlanesEvents.CANCEL, hide)
    }

    function hide() {
        $this.hide()
    }

    function show() {
        $this.show()
    }
    this.show = show;
    this.hide = hide
}, "singleton");
Class(function UICatchPrompt() {
    Inherit(this, View);
    var _this = this;
    var $this, $wrapper, $icon;
    var _timeout;
    (function() {
        initHTML();
        style()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.size(140, 140).center().css({
            top: 60,
            marginTop: "",
            marginLeft: -110
        });
        $wrapper = $this.create(".icon");
        $wrapper.size(140, 140);
        $icon = $wrapper.create(".icon");
        $icon.size(140, 140).bg("assets/images/icons/hand-catch.png").transformPoint("30%", "80%");
        $this.hide().css({
            opacity: 0
        })
    }

    function animateIcon() {
        if (!_this.visible) {
            return
        }
        _this.count++;
        if (_this.count > 3) {
            _this.animateOut();
            return
        }
        $wrapper.stopTween().css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 1200, "easeInOutSine", function() {
            $wrapper.stopTween().css({
                opacity: 1
            }).tween({
                opacity: 0
            }, 500, "easeInOutSine", 100)
        });
        $icon.stopTween().transform({
            y: 0,
            rotation: 50,
            x: 40
        }).tween({
            rotation: 0,
            y: 30,
            x: -30
        }, 1800, "easeInOutQuart", function() {
            _timeout = _this.delayedCall(animateIcon, 100)
        })
    }
    this.animateIn = function() {
        if (!$wrapper) {
            return
        }
        _this.visible = true;
        _this.count = 0;
        animateIcon();
        $this.show().css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 500, "easeOutSine", 400)
    };
    this.animateOut = function(callback) {
        if ($this.stopTween) {
            $this.stopTween()
        }
        if (_timeout) {
            clearTimeout(_timeout)
        }
        _this.visible = false;
        $this.tween({
            opacity: 0
        }, 300, "easeOutSine", function() {
            $wrapper.stopTween();
            $icon.stopTween();
            $this.hide();
            if (typeof callback == "function") {
                callback()
            }
        })
    }
});
Class(function UIClosePrompt(_isLocal) {
    Inherit(this, View);
    var _this = this;
    var $this, $overlay;
    (function() {
        initHTML();
        style();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.bg("assets/images/icons/close.png").size(80, 80).css({
            backgroundSize: "60px 60px",
            backgroundPosition: "center center",
            backgroundRepeat: "no-repeat",
            bottom: 0,
            left: "50%",
            marginLeft: -40,
        });
        $this.hide();
        $overlay = $this.create(".overlay");
        $overlay.size(100, 100).center().css({
            opacity: 0,
            background: "#fff",
            borderRadius: 1000,
        }).transform({
            scaleX: 0.25,
            scaleY: 0.25
        })
    }

    function addHandlers() {
        $this.touchClick(hover, click)
    }

    function hover() {}

    function click() {
        if (_this.isTimeout) {
            return
        }
        _this.isTimeout = true;
        _this.delayedCall(function() {
            _this.isTimeout = false
        }, 1000);
        $overlay.css({
            opacity: 0.2
        }).transform({
            scaleX: 0.25,
            scaleY: 0.25
        }).tween({
            scaleX: 1.4,
            scaleY: 1.4,
            opacity: 0
        }, 600, "easeOutCubic", function() {
            $overlay.transform({
                scaleX: 0.25,
                scaleY: 0.25
            })
        });
        if (_isLocal) {
            _this.events.fire(HydraEvents.CLICK)
        } else {
            _this.events.fire(PlanesEvents.CANCEL)
        }
        AudioController.trigger("tap")
    }
    this.animateIn = function() {
        $this.show().css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 500, "easeOutSine")
    };
    this.animateOut = function() {
        $this.tween({
            opacity: 0
        }, 300, "easeOutSine", function() {
            $this.hide()
        })
    }
});
Class(function UIFlipPrompt() {
    Inherit(this, View);
    var _this = this;
    var $this, $icon;
    (function() {
        initHTML();
        style();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.size(90, 90).css({
            top: 30,
            left: 30,
            borderRadius: "1000px",
        });
        $icon = $this.create(".icon");
        $icon.size(90, 90).transform({
            rotation: 90
        }).bg("assets/images/icons/rotate-button.png");
        $this.hide()
    }

    function addHandlers() {
        $this.touchClick(hover, click)
    }

    function hover(e) {
        switch (e.action) {
            case "over":
                $this.tween({
                    scale: 0.95
                }, 50, "easeOutSine");
                break;
            case "out":
                $icon.tween({
                    scale: 1
                }, 300, "easeOutSine");
                break
        }
    }

    function click() {
        _this.events.fire(HydraEvents.COMPLETE);
        AudioController.trigger("tap")
    }
    this.animateIn = function() {
        $this.show().css({
            opacity: 0
        }).transform({
            scale: 0.8
        }).tween({
            opacity: 1,
            scale: 1
        }, 500, "easeOutCubic")
    };
    this.animateOut = function() {
        $this.tween({
            opacity: 0
        }, 300, "easeOutSine", function() {
            $this.hide()
        })
    };
    this.flip = function(isFlipped) {
        $this.tween({
            opacity: 0,
            scale: 0.9
        }, 200, "easeOutCubic", function() {
            if (isFlipped) {
                $this.css({
                    top: "auto",
                    bottom: 30
                })
            } else {
                $this.css({
                    bottom: "auto",
                    top: 30
                })
            }
            $this.tween({
                opacity: 1,
                scale: 1
            }, 400, "easeOutCubic")
        })
    }
});
Class(function UIInstructions() {
    Inherit(this, View);
    var _this = this;
    var $this, $text, $heading, $subText;
    (function() {
        initHTML();
        style();
        addListeners()
    })();

    function initHTML() {
        $this = _this.element;
        $text = $this.create("Text");
        $heading = $this.create("Heading");
        $subText = $this.create("SubText")
    }

    function style() {
        $this.css({
            position: "static",
            textAlign: "center"
        }).setZ(10);
        $text.css({
            fontSize: 14,
            lineHeight: 18,
            fontFamily: "instruction",
            fontStyle: "italic",
            opacity: 0.9,
            letterSpacing: 0.3
        });
        $heading.css({
            fontSize: 38,
            marginTop: -8,
            fontFamily: "din"
        });
        $subText.css({
            fontSize: 12,
            fontFamily: "instruction",
            fontStyle: "italic",
            letterSpacing: 0.5,
            opacity: 0.9,
        });
        $this.hide();
        $heading.hide();
        $subText.hide()
    }

    function addListeners() {
        _this.events.subscribe(Mobile.Events.INTERNET_STATUS, checkConnection)
    }

    function checkConnection(e) {
        if (!e.connected) {
            if ($text.text().strpos("catch a plane")) {
                $text.text("")
            }
        } else {
            $text.text($text.textSet)
        }
    }
    this.update = function(copy, top, rotate) {
        $text.textSet = Copy[copy];
        if ($text.textSet.strpos("Wave your phone")) {
            if (!ThrowMechanic.HAS_MOTION) {
                $text.textSet = "Tap the screen to catch a plane"
            }
        } else {
            if ($text.textSet.strpos("Hold your phone like a")) {
                if (!ThrowMechanic.HAS_MOTION) {
                    $text.textSet = "Tap the screen to throw the plane"
                }
            }
        }
        $subText.textSet = "";
        $heading.textSet = "";
        $this.tween({
            opacity: 0
        }, 300, "easeOutSine", function() {
            top = top || ($text.textSet.strpos("<br") ? 30 : 50);
            $text.css({
                top: top,
                left: 0,
                right: 0,
                width: "auto",
            });
            $text.rSet = 0;
            $text.xSet = 0;
            if (rotate) {
                $text.css({
                    left: "auto",
                    width: 500,
                    right: -250,
                    top: "50%",
                });
                $text.rSet = 90;
                $text.xSet = -top - 20
            }
            _this.animateIn()
        })
    };
    this.heading = function(copy, top, rotate) {
        top = top || 40;
        $heading.textSet = Copy[copy];
        $heading.css({
            top: top,
            left: 0,
            right: 0,
            width: "auto",
        });
        $heading.rSet = 0;
        $heading.xSet = 0;
        if (rotate) {
            $heading.css({
                left: "auto",
                width: 500,
                right: -250,
                top: "50%",
            });
            $heading.rSet = 90;
            $heading.xSet = -top - 20
        }
        $heading.show()
    };
    this.subText = function(copy, top, rotate) {
        top = top || 50;
        $subText.textSet = Copy[copy];
        $subText.css({
            top: top,
            left: "30%",
            right: 0,
            width: "auto",
        });
        $subText.rSet = 0;
        $subText.xSet = 0;
        if (rotate) {
            $subText.css({
                left: "auto",
                width: 500,
                right: -250,
                top: "70%",
            });
            $subText.rSet = 90;
            $subText.xSet = -top - 23
        }
        $subText.show()
    };
    this.animateIn = function() {
        var text = $text.textSet;
        if (Mobile.isNative() && !Mobile.System.CONNECTIVITY && text.strpos("catch a plane")) {
            text = ""
        }
        $text.stopTween().html(text).css({
            opacity: 0
        }).transform({
            y: 10,
            rotation: $text.rSet,
            x: $text.xSet
        });
        $text.tween({
            y: 0,
            opacity: 0.9,
            rotation: $text.rSet,
            x: $text.xSet
        }, 1200, "easeOutQuart");
        $subText.stopTween().html($subText.textSet).css({
            opacity: 0
        }).transform({
            y: 10,
            rotation: $subText.rSet,
            x: $subText.xSet
        });
        $subText.tween({
            y: 0,
            opacity: 0.9,
            rotation: $subText.rSet,
            x: $subText.xSet
        }, 1200, "easeOutQuart");
        $heading.stopTween().html($heading.textSet).css({
            opacity: 0
        }).transform({
            y: -15,
            rotation: $heading.rSet,
            x: $heading.xSet
        });
        $heading.tween({
            y: 0,
            opacity: 1,
            rotation: $heading.rSet,
            x: $heading.xSet
        }, 1200, "easeOutQuart");
        $this.show().stopTween().css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 300, "easeOutSine")
    };
    this.animateOut = function() {
        _this.visible = false;
        $this.tween({
            opacity: 0
        }, 300, "easeOutSine", function() {
            $this.hide()
        })
    }
});
Class(function UINewPrompt() {
    Inherit(this, View);
    var _this = this;
    var $this, $icon, $plus, $circle, $ring;
    (function() {
        initHTML();
        style();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.size(80, 80).css({
            bottom: 100,
            left: "50%",
            marginLeft: -40
        }).setZ(1);
        $icon = $this.create(".icon");
        $icon.size(80, 80).css({
            borderRadius: 100,
            boxShadow: "0px 8px 19px -8px rgba(0,0,0,0.2)",
            overflow: "hidden"
        }).bg("assets/images/icons/plane-button.png");
        $icon.cover = $icon.create(".cover");
        $icon.cover.size(60, 60).center().css({
            borderRadius: 100
        }).bg("#fff");
        $icon.inner = $icon.create(".inner");
        $icon.inner.size(44, 44).css({
            left: 16,
            top: 18,
            opacity: 0
        }).bg("assets/images/icons/plane-logo-purple.png");
        var size = Math.max(Stage.width, Stage.height);
        $circle = Stage.create(".behind");
        $circle.size(size, size).center().css({
            borderRadius: size
        }).bg("#fff").hide().setZ(1000).mouseEnabled(false);
        $ring = $this.create(".ring");
        $ring.size(78, 78).css({
            opacity: 0,
            borderRadius: 80,
            border: "1px solid #fff"
        });
        $plus = $this.create(".plus");
        $plus.size(34, 34).bg("assets/images/icons/plus.png");
        $plus.center();
        $this.hide()
    }

    function addHandlers() {
        $this.touchClick(hover, click);
        _this.events.subscribe(PlanesEvents.MY_PLANES_SWIPE_PROGRESS, updateFade)
    }

    function hover(e) {
        switch (e.action) {
            case "over":
                $icon.tween({
                    scale: 0.95
                }, 50, "easeOutSine");
                break;
            case "out":
                $icon.tween({
                    scale: 1
                }, 300, "easeOutSine");
                break
        }
    }

    function click() {
        if (_this.isTimeout) {
            return
        }
        _this.isTimeout = true;
        _this.delayedCall(function() {
            _this.isTimeout = false
        }, 1000);
        $icon.tween({
            scale: 1
        }, 300, "easeOutSine");
        var size = Math.sqrt(Math.pow(Stage.height * 0.5, 2) * 2) * 2;
        $circle.size(size, size).center();
        var y = size * 0.5 + Stage.height * 0.5 - 100 - 20;
        if (_this.offset) {
            y = size * 0.5 + 90
        }
        $circle.show().stopTween().css({
            opacity: 1
        }).transform({
            scale: 0.1
        }).transformPoint("50%", y);
        $circle.tween({
            scale: 1,
            y: 0,
            opacity: 1
        }, 600, "easeOutQuart", function() {
            _this.events.fire(PlanesEvents.NEW_PLANE)
        });
        AudioController.trigger("tap");
        AudioController.trigger("paper_in")
    }

    function updateFade(e) {
        if (!_this.isIdle) {
            return
        }
        $this.css({
            opacity: Math.pow(1 - e.progress, 2)
        })
    }

    function pulseRing() {
        if (!_this.isIdle) {
            return
        }
        $ring.stopTween().css({
            opacity: 0.4
        }).transform({
            scale: 1
        }).tween({
            opacity: 0,
            scale: 1.8
        }, 3000, "easeOutCubic", pulseRing)
    }

    function animatePlus() {
        if (!_this.isIdle) {
            return
        }
        $plus.tween({
            opacity: 0,
            scale: 0.7
        }, 300, "easeOutSine", 60);
        $icon.inner.transform({
            y: 50,
            x: -30,
            rotation: 5
        }).css({
            opacity: 0
        }).tween({
            x: 0,
            y: 0,
            rotation: 0,
            opacity: 1
        }, 800, "easeOutQuart", function() {
            if (!_this.isIdle) {
                return
            }
            $icon.inner.tween({
                opacity: 0
            }, 1500, "easeInOutSine", 100);
            $icon.cover.tween({
                opacity: 0
            }, 300, "easeOutSine");
            _this.delayedCall(function() {
                if (!_this.isIdle) {
                    return
                }
                $icon.cover.tween({
                    opacity: 1
                }, 300, "easeOutSine", 1200);
                $icon.inner.tween({
                    opacity: 1
                }, 1500, "easeInOutSine", function() {
                    $plus.tween({
                        opacity: 1,
                        scale: 1
                    }, 500, "easeOutCubic", 600, function() {
                        if (!_this.isIdle) {
                            return
                        }
                        _this.delayedCall(animatePlus, 500)
                    });
                    $icon.inner.tween({
                        x: 30,
                        y: -50,
                        rotation: -5,
                        opacity: 0
                    }, 700, "easeInCubic")
                })
            }, 1500)
        })
    }
    this.animateIn = function() {
        if (_this.isAnimatedIn) {
            return
        }
        _this.isAnimatedIn = true;
        $this.show();
        $plus.stopTween().clearAlpha().clearTransform();
        $icon.inner.stopTween().css({
            opacity: 0
        });
        $icon.cover.stopTween().clearAlpha();
        if (!_this.isIdle) {
            $this.css({
                opacity: 0
            }).transform({
                scale: 0.5
            }).tween({
                opacity: 1,
                scale: 1
            }, 1200, "easeOutQuint", 500)
        }
        $plus.transform({
            scale: 0.2
        }).css({
            opacity: 0
        }).tween({
            opacity: 1,
            scale: 1
        }, 500, "easeOutCubic", 500);
        _this.delayedCall(animatePlus, 1500);
        _this.isIdle = true;
        _this.delayedCall(pulseRing, 800)
    };
    this.animateOut = function() {
        _this.isAnimatedIn = false;
        $this.tween({
            opacity: 0
        }, 300, "easeOutSine", function() {
            $this.hide()
        });
        $circle.tween({
            opacity: 0
        }, 200, "easeOutSine", 100, function() {
            $circle.hide()
        });
        _this.isIdle = false
    }
});
Class(function UIPinchPrompt(_y) {
    Inherit(this, View);
    var _this = this;
    var $this;
    (function() {
        initHTML();
        style()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.bg("assets/images/icons/hand-open.png").size(80, 80).center().css({});
        $this.transform({
            rotation: 20,
            x: 50,
            y: _y || -15
        });
        $this.hide().css({
            opacity: 0
        })
    }
    this.animateIn = function() {
        $this.show().tween({
            opacity: 0.8
        }, 1000, "easeOutSine")
    };
    this.animateOut = function() {
        $this.tween({
            opacity: 0
        }, 500, "easeOutSine", function() {
            $this.hide()
        })
    }
});
Class(function UIRotatePrompt() {
    Inherit(this, View);
    var _this = this;
    var $this, $spin;
    var _anim;
    (function() {
        initHTML();
        style()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.size(200, 200).center();
        $spin = $this.create(".spin");
        $spin.size(200, 200).bg("assets/images/icons/rotate-arrow.png");
        _anim = _this.initClass(CSSAnimation);
        _anim.loop = true;
        _anim.duration = 2000;
        _anim.ease = "easeInOutCubic";
        _anim.frames = [{
            rotation: 0
        }, {
            rotation: -360
        }];
        _anim.applyTo($spin);
        $this.hide()
    }
    this.animateIn = function() {
        $this.show().css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 800, "easeOutSine");
        _anim.play()
    };
    this.animateOut = function() {
        $this.tween({
            opacity: 0
        }, 200, "easeOutSine", function() {
            _anim.stop();
            $this.hide()
        })
    }
});
Class(function UIScaleCompletePrompt() {
    Inherit(this, View);
    var _this = this;
    var $this, $icon;
    (function() {
        initHTML();
        style();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.size(90, 90).css({
            bottom: 30,
            left: 30,
            borderRadius: "1000px",
        });
        $icon = $this.create(".icon");
        $icon.size(90, 90).transform({
            rotation: 90
        }).bg("assets/images/icons/done-button.png");
        $this.hide()
    }

    function addHandlers() {
        $this.touchClick(hover, click)
    }

    function hover(e) {
        switch (e.action) {
            case "over":
                $this.tween({
                    scale: 0.95
                }, 50, "easeOutSine");
                break;
            case "out":
                $icon.tween({
                    scale: 1
                }, 300, "easeOutSine");
                break
        }
    }

    function click() {
        _this.events.fire(HydraEvents.COMPLETE);
        AudioController.trigger("tap")
    }
    this.animateIn = function() {
        $this.show().css({
            opacity: 0
        }).transform({
            scale: 0.8
        }).tween({
            opacity: 1,
            scale: 1
        }, 500, "easeOutCubic")
    };
    this.animateOut = function() {
        $this.tween({
            opacity: 0
        }, 300, "easeOutSine", function() {
            $this.hide()
        })
    }
});
Class(function UISharePrompt(_isLocal) {
    Inherit(this, View);
    var _this = this;
    var $this, $overlay;
    (function() {
        initHTML();
        style();
        addHandlers()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.bg("assets/images/icons/share.png").size(80, 80).css({
            backgroundSize: "60px 60px",
            backgroundPosition: "center center",
            backgroundRepeat: "no-repeat",
            bottom: 0,
            left: 0
        });
        $this.hide();
        $overlay = $this.create(".overlay");
        $overlay.size(100, 100).center().css({
            opacity: 0,
            background: "#fff",
            borderRadius: 1000,
        }).transform({
            scaleX: 0.25,
            scaleY: 0.25
        })
    }

    function addHandlers() {
        $this.touchClick(hover, click)
    }

    function hover() {}

    function click() {
        if (_this.isTimeout) {
            return
        }
        _this.isTimeout = true;
        _this.delayedCall(function() {
            _this.isTimeout = false
        }, 1000);
        $overlay.css({
            opacity: 0.2
        }).transform({
            scaleX: 0.25,
            scaleY: 0.25
        }).tween({
            scaleX: 1.4,
            scaleY: 1.4,
            opacity: 0
        }, 600, "easeOutCubic", function() {
            $overlay.transform({
                scaleX: 0.25,
                scaleY: 0.25
            })
        });
        if (_isLocal) {
            _this.events.fire(HydraEvents.CLICK)
        } else {
            _this.events.fire(PlanesEvents.CANCEL)
        }
        AudioController.trigger("tap")
    }
    this.animateIn = function() {
        $this.show().css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 500, "easeOutSine")
    };
    this.animateOut = function() {
        $this.tween({
            opacity: 0
        }, 300, "easeOutSine", function() {
            $this.hide()
        })
    }
});
Class(function UIThrowPrompt() {
    Inherit(this, View);
    var _this = this;
    var $this, $wrapper, $icon;
    (function() {
        initHTML();
        style()
    })();

    function initHTML() {
        $this = _this.element
    }

    function style() {
        $this.size(140, 140).css({
            left: 10,
            top: "50%",
            marginTop: -100
        });
        $wrapper = $this.create(".icon");
        $wrapper.size(140, 140);
        $icon = $wrapper.create(".icon");
        $icon.size(140, 140).bg("assets/images/icons/hand-throw.png").transformPoint("30%", "80%");
        $this.hide()
    }

    function animateIcon() {
        if (!_this.visible) {
            return
        }
        $wrapper.stopTween().css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 1000, "easeOutSine", function() {
            $wrapper.stopTween().css({
                opacity: 1
            }).tween({
                opacity: 0
            }, 500, "easeOutSine", 500)
        });
        $icon.stopTween().transform({
            y: 40,
            rotation: 120,
            x: 0
        }).tween({
            rotation: 70,
            y: -40,
            x: -20
        }, 2000, "easeInOutQuart", function() {
            _this.delayedCall(animateIcon, 500)
        })
    }
    this.animateIn = function() {
        _this.visible = true;
        animateIcon();
        $this.show().css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 500, "easeOutSine")
    };
    this.animateOut = function() {
        _this.visible = false;
        $this.tween({
            opacity: 0
        }, 300, "easeOutSine", function() {
            $this.hide()
        })
    };
    this.flip = function(isFlipped) {
        $this.tween({
            opacity: 0
        }, 200, "easeOutSine", function() {
            if (isFlipped) {
                $this.transform({
                    scaleY: -1
                })
            } else {
                $this.transform({
                    scaleY: 1
                })
            }
            animateIcon();
            $this.tween({
                opacity: 1
            }, 500, "easeOutSine")
        })
    }
});
Class(function UITitle(_text) {
    Inherit(this, View);
    var _this = this;
    var $this;
    var _lines;
    var _size = Mobile.phone ? 26 : 32;
    (function() {
        initHTML()
    })();

    function initHTML() {
        $this = _this.element;
        $this.size("100%").invisible();
        var split = _text.split("<br />");
        _lines = [];
        for (var i = 0; i < split.length; i++) {
            var $line = $this.create(".line");
            $line.fontStyle("Din", _size, "#fff");
            $line.css({
                top: i * _size * 1.25,
                width: "100%",
                textAlign: "center",
                letterSpacing: -0.2
            });
            $line.html(split[i]);
            _lines.push($line)
        }
        $this.css({
            height: _lines.length * _size,
            bottom: "50%",
            marginBottom: _size
        });
        defer(function() {
            for (var i = 0; i < _lines.length; i++) {
                _lines[i].words = SplitTextfield.split(_lines[i], "word");
                for (var j = 0; j < _lines[i].words.length; j++) {
                    _lines[i].words[j].css({
                        display: "inline-block",
                        cssFloat: "",
                        styleFloat: ""
                    });
                    _lines[i].words[j].transform({
                        y: _size * 1.3,
                        rotation: 3
                    }).css({
                        opacity: 0
                    })
                }
            }
        })
    }
    this.animateIn = function() {
        $this.visible();
        var delay = 0;
        for (var i = 0; i < _lines.length; i++) {
            for (var j = 0; j < _lines[i].words.length; j++) {
                _lines[i].words[j].tween({
                    y: 0,
                    rotation: 0,
                    opacity: 1
                }, 3200, "easeOutQuint", delay);
                delay += 50
            }
        }
    };
    this.animateOut = function() {
        $this.tween({
            opacity: 0
        }, 500, "easeOutCubic")
    }
});
Class(function PlaygroundAntimatter() {
    Inherit(this, Component);
    var _this = this;
    var _antimatter;
    this.object3D = new THREE.Object3D();
    (function() {
        initAntimatter()
    })();

    function initAntimatter() {
        _antimatter = _this.initClass(Antimatter, 250000, Global.PLAYGROUND_RENDERER);
        _antimatter.vertexShader = "ParticleOutput";
        _antimatter.fragmentShader = "ParticleOutput";
        _antimatter.ready(particleReady)
    }

    function generateProperties() {
        var array = _antimatter.createFloatArray();
        var num = array.length / 3;
        for (var i = 0; i < num; i++) {
            array[i * 3 + 0] = Utils.doRandom(-500, 500);
            array[i * 3 + 1] = Utils.doRandom(20, 50) / 100
        }
        return new AntimatterAttribute(array)
    }

    function generateColorAttribute() {
        var array = _antimatter.createFloatArray();
        var num = array.length / 3;
        for (var i = 0; i < num; i++) {
            var color = new THREE.Color();
            color.setHSL(Utils.doRandom(0, 100) / 100, 0.7, 0.5);
            array[i * 3 + 0] = color.r;
            array[i * 3 + 1] = color.g;
            array[i * 3 + 2] = color.b
        }
        return new THREE.BufferAttribute(array, 3)
    }

    function particleReady() {
        var vertices = _antimatter.vertices;
        for (var i = 0; i < vertices.count; i++) {
            vertices.buffer[i * 4 + 0] = Utils.doRandom(-1000, 1000);
            vertices.buffer[i * 4 + 1] = Utils.doRandom(-1000, 1000);
            vertices.buffer[i * 4 + 2] = Utils.doRandom(-1000, 1000);
            vertices.buffer[i * 4 + 3] = Utils.doRandom(1, 10)
        }
        var geometry = _antimatter.vertices.geometry;
        geometry.addAttribute("color", generateColorAttribute());
        var mesh = _antimatter.getMesh();
        _this.object3D.add(mesh);
        var pass = new AntimatterPass("Curl");
        pass.addInput("tOrigin", vertices);
        pass.addInput("tProperties", generateProperties());
        _antimatter.addPass(pass);
        var p2 = new AntimatterPass("Test");
        _antimatter.addPass(p2);
        Render.start(loop)
    }

    function loop() {
        _antimatter.update()
    }
});
Class(function PlaygroundFlock() {
    Inherit(this, Component);
    var _this = this;
    var _meshes;
    this.object3D = new THREE.Object3D();
    (function() {
        initMeshes()
    })();

    function initMeshes() {
        for (var i = 0; i < 1; i++) {
            var chunk = _this.initClass(FlockingPlaneChunk);
            _this.object3D.add(chunk.object3D)
        }
    }
});
Class(function PlaygroundFlocking() {
    Inherit(this, Component);
    var _this = this;
    var _antimatter;
    this.object3D = new THREE.Object3D();
    (function() {
        initAntimatter()
    })();

    function initAntimatter() {
        _antimatter = _this.initClass(Antimatter, 4096, Global.PLAYGROUND_RENDERER);
        _antimatter.ready(particleReady)
    }

    function particleReady() {
        var vertices = _antimatter.vertices;
        for (var i = 0; i < vertices.count; i++) {
            vertices.buffer[i * 4 + 0] = Utils.doRandom(-50, 50);
            vertices.buffer[i * 4 + 1] = Utils.doRandom(-50, 50);
            vertices.buffer[i * 4 + 2] = Utils.doRandom(-50, 50);
            vertices.buffer[i * 4 + 3] = Utils.doRandom(1, 4)
        }
        var mesh = _antimatter.getMesh();
        _this.object3D.add(mesh);
        var uniforms = {
            dT: {
                type: "f",
                value: 0.016
            },
            seperationDistance: {
                type: "f",
                value: 10.39
            },
            alignmentDistance: {
                type: "f",
                value: 20.6
            },
            cohesionDistance: {
                type: "f",
                value: 50.9
            },
            maxVel: {
                type: "f",
                value: 2
            },
            forceMultiplier: {
                type: "f",
                value: 1
            },
            centerPower: {
                type: "f",
                value: 0.06
            },
            predator: {
                type: "v3",
                value: new THREE.Vector3()
            },
            predatorRepelRadius: {
                type: "f",
                value: 0.01
            },
            predatorRepelPower: {
                type: "f",
                value: 2
            },
        };
        var pass = _this.initClass(AntimatterPass, "Flocking", uniforms);
        _antimatter.addPass(pass);
        Render.start(function() {
            _antimatter.update();
            pass.shader.uniforms.dT.value = Render.DELTA
        })
    }
});
Class(function PlaygroundList() {
    Inherit(this, View);
    var _this = this;
    var $this;
    (function() {
        initHTML()
    })();

    function initHTML() {
        $this = _this.element
    }
});
Class(function PlaygroundPlane() {
    Inherit(this, Component);
    var _this = this;
    var _plane;
    this.object3D = new THREE.Object3D();
    (function() {
        initGeom()
    })();

    function initGeom() {
        _plane = _this.initClass(PlaneFoldGeometry);
        _this.object3D.add(_plane.swayContainer);
        var s = 30;
        _this.object3D.scale.set(s, s, s);
        _this.object3D.rotation.set(0, 1.3, 1)
    }
});
Class(function PlaygroundShadow() {
    Inherit(this, Component);
    var _this = this;
    this.object3D = new THREE.Object3D();
    (function() {
        initSphere();
        initMesh();
        initPlane()
    })();

    function initMesh() {
        var _geometry = new THREE.BufferGeometry();
        _geometry = new THREE.SphereGeometry(4);
        var shader = new Shader("ShadowTest", "ShadowTest");
        shader.uniforms = THREE.UniformsUtils.merge([THREE.UniformsLib.lights, {
            lightPosition: {
                type: "v3",
                value: new THREE.Vector3(700, 700, 700)
            },
            time: {
                type: "f",
                value: 0
            }
        }]);
        shader.material.lights = true;
        var mesh = new THREE.Mesh(_geometry, new THREE.MeshPhongMaterial());
        mesh.castShadow = true;
        mesh.receiveShadow = true;
        mesh.scale.set(50, 50, 50);
        Render.start(function() {
            shader.uniforms.time.value = Render.TSL * 0.0025
        });
        Global.PLAYGROUND_SCENE.add(mesh)
    }

    function initSphere() {
        var geom = new THREE.PlaneGeometry(100, 100);
        var mat = new THREE.MeshPhongMaterial();
        var mesh = new THREE.Mesh(geom, mat);
        mesh.scale.set(10, 10, 10);
        mesh.rotation.x = Utils.toRadians(90);
        mat.side = THREE.DoubleSide;
        mesh.castShadow = true;
        mesh.receiveShadow = true
    }

    function initPlane() {
        var geometry = new THREE.PlaneBufferGeometry(100, 100);
        var planeMaterial = new THREE.MeshPhongMaterial({
            color: 16777215
        });
        var shader = new Shader("ShadowTest", "ShadowTest");
        shader.uniforms = THREE.UniformsUtils.merge([THREE.UniformsLib.lights, {
            lightPosition: {
                type: "v3",
                value: new THREE.Vector3(700, 700, 700)
            },
            time: {
                type: "f",
                value: 0
            }
        }]);
        shader.material.lights = true;
        var ground = new THREE.Mesh(geometry, planeMaterial);
        ground.position.set(1000, -1000, 0);
        ground.rotation.x = -Math.PI / 2;
        ground.scale.set(100, 100, 100);
        ground.castShadow = false;
        ground.receiveShadow = true;
        Global.PLAYGROUND_SCENE.add(ground);
        var light = new THREE.DirectionalLight(16777215, 1);
        light.position.set(0, 1000, 0);
        light.shadow.camera.near = 1;
        light.shadow.camera.far = 10000;
        light.shadow.camera.left = -750;
        light.shadow.camera.right = 750;
        light.shadow.camera.top = 750;
        light.shadow.camera.bottom = -750;
        light.shadow.camera.updateProjectionMatrix();
        console.log(light.shadow.camera);
        Render.start(function(t) {});
        light.shadow.mapSize.width = 2048;
        light.shadow.mapSize.height = 2048;
        light.castShadow = true;
        console.log(light.shadow);
        Global.PLAYGROUND_SCENE.add(light)
    }
});
Class(function SidescreenView() {
    Inherit(this, View);
    var _this = this;
    var $this, $logo, $ioLogo;
    var _text;
    (function() {
        initHTML();
        initLogo();
        initText();
        initIOLogo()
    })();

    function initHTML() {
        $this = _this.element;
        $this.size("100%").invisible().setZ(10)
    }

    function initLogo() {
        $logo = $this.create(".logo");
        $logo.size(70, 70).center().css({
            marginTop: -260
        }).bg("assets/images/loader/plane-logo.png")
    }

    function initText() {
        _text = _this.initClass(SidescreenText, Copy.SIDESCREEN)
    }

    function initIOLogo() {
        var scale = 0.45;
        $ioLogo = $this.create("ioLogo");
        $ioLogo.size(500 * scale, 340 * scale).center(1, 0).css({
            bottom: 100,
            opacity: 0,
            marginLeft: -250 * scale - 10
        }).bg("assets/images/common/iologo.png")
    }

    function animateText() {
        $this.stopTween().clearAlpha();
        $logo.transform({
            x: -180,
            y: 400,
            scale: 0.8,
            rotation: 12
        }).css({
            opacity: 0
        }).tween({
            rotation: 0,
            x: 0,
            y: 0,
            opacity: 1,
            scale: 1
        }, 4000, "easeOutQuint", 500);
        _text.element.invisible();
        _text.animateIn(1500)
    }
    this.animateIn = function() {
        $this.visible();
        animateText();
        $ioLogo.css({
            opacity: 0
        }).tween({
            opacity: 1
        }, 5000, "easeInOutSine", 1000)
    }
});
Class(function SidescreenText(_text) {
    Inherit(this, View);
    var _this = this;
    var $this;
    var _lines;
    var _size = 50;
    (function() {
        initHTML()
    })();

    function initHTML() {
        $this = _this.element;
        $this.size("100%").invisible();
        var split = _text.split("<br />");
        _lines = [];
        for (var i = 0; i < split.length; i++) {
            var $line = $this.create(".line");
            $line.fontStyle("din", _size, "#fff");
            $line.css({
                top: i * _size * 1.25,
                width: "100%",
                textAlign: "center",
                letterSpacing: -0.3
            });
            if (i == split.length - 1) {
                $line.css({
                    fontWeight: "bold",
                    fontSize: _size * 1.05
                })
            }
            $line.html(split[i]);
            _lines.push($line)
        }
        $this.css({
            height: _lines.length * _size,
            bottom: "50%",
            marginBottom: 0
        });
        defer(function() {
            for (var i = 0; i < _lines.length; i++) {
                _lines[i].words = SplitTextfield.split(_lines[i], "word");
                for (var j = 0; j < _lines[i].words.length; j++) {
                    _lines[i].words[j].css({
                        display: "inline-block",
                        cssFloat: "",
                        styleFloat: ""
                    })
                }
            }
        })
    }
    this.animateIn = function(d) {
        $this.visible();
        var delay = d || 0;
        for (var i = 0; i < _lines.length; i++) {
            for (var j = 0; j < _lines[i].words.length; j++) {
                _lines[i].words[j].transform({
                    y: _size
                }).css({
                    opacity: 0
                }).tween({
                    y: 0,
                    opacity: 1
                }, 4000, "easeOutQuart", delay);
                delay += 50
            }
        }
    };
    this.animateOut = function() {
        $this.tween({
            opacity: 0
        }, 500, "easeOutCubic")
    }
});
Class(function Main() {
    Inherit(this, Component);
    var _this = this;
    Global.SPECIAL_STAMP_COUNT = Utils.doRandom(0, 9);
    Global.PEACE_STAMP_COUNT = Utils.doRandom(0, 4);
    (function() {
        Utils3D.disableWarnings();
        if (!Storage.get(Config.LOCALSTORAGE_KEY)) {
            Storage.set("created_planes", null);
            Storage.set("myPlanes", null);
            Storage.set(Config.LOCALSTORAGE_KEY, true)
        }
        if (Mobile.isNative()) {
            Mobile.setOrientation("portrait");
            Mobile.System.statusBarColor = "#ffffff"
        }
        GATracker.trackPage(Mobile.isNative() ? "native" : "web");
        if (!Device.graphics.webgl) {
            return window.location = "https://paperplanes.world/fallback"
        }
        Hydra.CDN = Config.CDN;
        Utils3D.PATH = Config.CDN;
        AssetUtil.PATH = Config.CDN;
        Thread.PATH = Config.PROXY;
        if (Config.BEAST) {
            Stage.css({
                cursor: "none"
            })
        }
        if (!Storage.get("clear_tue")) {
            localStorage.clear();
            Storage.set("clear_tue", 1)
        }
        Images.getProxyPath = function(path) {
            return Config.PROXY + path
        };
        setupSocket();
        setupNotifications();
        if (Hydra.HASH.strpos("playground")) {
            AssetLoader.loadAllAssets(function() {
                setTimeout(function() {
                    Playground.instance()
                }, 500)
            });
            return
        }
        if (Hydra.HASH.strpos("side")) {
            Sidescreen.instance();
            Data.Socket.on("side", sideMsg);
            return
        }
        if (Hydra.HASH.strpos("pre") || Hydra.HASH.strpos("after")) {
            Blocker.instance();
            return
        }
        if (Device.mobile) {
            ContainerMobile.instance()
        } else {
            ContainerDesktop.instance()
        }
    })();

    function sideMsg(e) {
        if (e.start) {
            _this.events.fire(PlanesEvents.START_EXP)
        }
        if (e.end) {
            _this.events.fire(PlanesEvents.END_EXP)
        }
    }

    function setupSocket() {
        Data.Socket.experience = "p";
        if (Data.User.isAtIO() || Hydra.HASH.strpos("io") || Hydra.HASH.strpos("side")) {
            if (!Device.mobile) {
                if (Hydra.HASH.strpos("io") || Hydra.HASH.strpos("side")) {
                    Data.Socket.SCREEN_IO = true
                } else {
                    Data.Socket.DESKTOP = true
                }
            } else {
                Data.Socket.MOBILE_IO = true
            }
        } else {
            if (Device.mobile) {
                Data.Socket.MOBILE = true
            } else {
                Data.Socket.DESKTOP = true
            }
        }
    }

    function setupNotifications() {
        if (Device.mobile && !Mobile.isNative()) {
            Data.WebNotifications.init()
        }
    }
});
window._MINIFIED_ = true;
window._BUILT_ = true;